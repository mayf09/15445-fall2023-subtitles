1
00:00:25,880 --> 00:00:27,840
0,365 365,980 980,1325 1325,1625 1625,1960
Clearly violating fire code here.|
显然违反了这里的消防法规。|

2
00:00:29,420 --> 00:00:30,310
0,290 290,485 485,635 635,755 755,890
I guess you can kind
我想你可以坐在前面，也可以坐在地板上，对吗？所以有很多话要说。首先，我们又有了一位DJ。第二，你们是最凶猛的JJ，你们想不想做个快速预览？做。

3
00:00:30,310 --> 00:00:30,970
0,105 105,255 255,405 405,510 510,660
of maybe sit up there

4
00:00:30,970 --> 00:00:33,025
0,165 165,440 1630,1875 1875,1965 1965,2055
up front or you sit

5
00:00:33,025 --> 00:00:35,610
0,75 75,195 195,485 1855,2220 2220,2585
on the floor, right? So

6
00:00:36,350 --> 00:00:37,150
0,260 260,410 410,545 545,650 650,800
a lot to talk about.

7
00:00:37,150 --> 00:00:37,930
0,150 150,225 225,435 435,675 675,780
First of all, we have

8
00:00:37,930 --> 00:00:45,835
0,120 120,435 435,2295 2295,2570 7600,7905
a DJ againj. Two, you're

9
00:00:45,835 --> 00:00:49,705
0,90 90,2105 3505,3735 3735,3795 3795,3870
the fiercestjjs do you want

10
00:00:49,705 --> 00:00:50,580
0,90 90,180 180,285 285,450 450,875
to do a quick preview?

11
00:00:50,930 --> 00:00:54,620
0,400
Do.|
|

12
00:00:59,020 --> 00:01:00,285
0,320 320,545 545,830 830,1100 1100,1265
The big announcement, too, is
另一个重要的宣布是，我们第一次有了两名教员。杰什·帕特尔坐在这里的前排。

13
00:01:00,285 --> 00:01:01,250
0,210 210,375 375,465 465,645 645,965
that for the first time

14
00:01:01,270 --> 00:01:02,540
0,290 290,485 485,725 725,965 965,1270
we now have two faculty

15
00:01:02,590 --> 00:01:05,385
0,400 1800,2210 2210,2555 2555,2705 2705,2795
teaching. Jesh Patel is in

16
00:01:05,385 --> 00:01:08,640
0,105 105,255 255,435 435,725
the front row here.|
|

17
00:01:12,070 --> 00:01:16,260
0,850 930,1330 3480,3815 3815,4010 4010,4190
Wisconsin. Ah, we're happy that
威斯康星州。啊，我们很高兴他在这里，所以他将在整个讲座中帮助我。好的，所以。

18
00:01:16,260 --> 00:01:16,935
0,165 165,330 330,495 495,615 615,675
he's here, so he'll be

19
00:01:16,935 --> 00:01:18,590
0,120 120,395 985,1260 1260,1395 1395,1655
help me throughout the lecture.

20
00:01:18,910 --> 00:01:21,060
0,400 750,1150
Okay, so.|
|

21
00:01:21,320 --> 00:01:23,130
0,260 260,425 425,730 780,1115 1115,1810
As I post on piazza,
正如我在Piazza上发布的那样，我们还有另一门课程。

22
00:01:23,210 --> 00:01:25,440
0,520 540,940 960,1360 1440,1835 1835,2230
there's another course lecture we.|
|

23
00:01:26,680 --> 00:01:27,520
0,225 225,330 330,525 525,720 720,840
They get m out of
他们让我出狱了。

24
00:01:27,520 --> 00:01:28,640
0,260
jail.|
|

25
00:01:29,450 --> 00:01:30,895
0,260 260,395 395,670 1110,1340 1340,1445
Of the course. So we're
当然了。所以我们不会像一堆这样的事情再来一次。我只想报道一些你可能会错过的事情。

26
00:01:30,895 --> 00:01:31,450
0,60 60,135 135,210 210,330 330,555
not going to go over

27
00:01:31,450 --> 00:01:32,200
0,240 240,375 375,495 495,615 615,750
like a bunch of those

28
00:01:32,200 --> 00:01:33,565
0,285 285,555 555,750 750,1070 1120,1365
things all over again. I

29
00:01:33,565 --> 00:01:34,105
0,75 75,135 135,195 195,330 330,540
just want to cover some

30
00:01:34,105 --> 00:01:34,945
0,225 225,465 465,645 645,750 750,840
things that if you might

31
00:01:34,945 --> 00:01:35,820
0,90 90,335
have missed.|
|

32
00:01:35,820 --> 00:01:36,570
0,90 90,210 210,360 360,525 525,750
That are important to understand
在整堂课中要理解的重要内容，然后我们将直接进入材料。

33
00:01:36,570 --> 00:01:37,470
0,210 210,375 375,600 600,810 810,900
throughout this lecture, and then

34
00:01:37,470 --> 00:01:38,745
0,255 255,510 510,660 660,920 970,1275
we'll jump right into the

35
00:01:38,745 --> 00:01:39,800
0,305
material.|
|

36
00:01:39,840 --> 00:01:40,610
0,275 275,440 440,560 560,635 635,770
All right, so the first
好的，那么第一件事，我们有一个课程赞助商，单一商店。

37
00:01:40,610 --> 00:01:41,270
0,165 165,285 285,375 375,480 480,660
thing, we have a course

38
00:01:41,270 --> 00:01:43,860
0,560 790,1170 1170,1550
sponsor, single store.|
|

39
00:01:44,700 --> 00:01:46,115
0,305 305,515 515,785 785,1115 1115,1415
Cloud based database system that
基于云的数据库系统支持混合工作负载事务分析，正如我在第一节课中所说，它是一个内存中的列存储，使用跳过列表和即时查询。

40
00:01:46,115 --> 00:01:47,570
0,335 415,645 645,720 720,990 990,1455
supports sort of hybrid workloads

41
00:01:47,570 --> 00:01:49,490
0,290 430,1160 1420,1665 1665,1800 1800,1920
transactions analytics as I said

42
00:01:49,490 --> 00:01:50,705
0,75 75,165 165,330 330,650 970,1215
in the first lecture, it

43
00:01:50,705 --> 00:01:52,040
0,105 105,330 330,615 615,935 955,1335
is a in memory column

44
00:01:52,040 --> 00:01:53,180
0,270 270,420 420,660 660,960 960,1140
store that uses skip list

45
00:01:53,180 --> 00:01:54,700
0,225 225,435 435,570 570,830 1090,1520
with just in time query.|
|

46
00:01:56,245 --> 00:01:57,925
0,420 420,630 630,905 1285,1560 1560,1680
Distribute, share nothing. If none
分发，什么都不分享。如果现在这些对你来说没有任何意义，那也没关系。

47
00:01:57,925 --> 00:01:58,660
0,75 75,165 165,375 375,615 615,735
of that means anything to

48
00:01:58,660 --> 00:01:59,880
0,90 90,225 225,500 580,960 960,1220
you right now, that's fine.|
|

49
00:02:00,590 --> 00:02:02,650
0,400 1500,1790 1790,1925 1925,2000 2000,2060
Things coming at the end
本学期末有一场客座讲座。

50
00:02:02,650 --> 00:02:03,295
0,60 60,135 135,390 390,555 555,645
of the semester to give

51
00:02:03,295 --> 00:02:04,840
0,105 105,270 270,575
a guest lecture.|
|

52
00:02:05,410 --> 00:02:07,100
0,230 230,460 840,1130 1130,1355 1355,1690
For ah, a long time.
啊，很久了。你可以称它为Man SQL，然后他们将其更名为Single Store。因此，这是一个最先进的数据库系统，它将涵盖我们将在整个学期讨论的大量图像。

53
00:02:08,230 --> 00:02:09,780
0,400 870,1130 1130,1250 1250,1355 1355,1550
The, you can call it

54
00:02:09,780 --> 00:02:10,800
0,285 285,660 660,765 765,870 870,1020
men sql and then they

55
00:02:10,800 --> 00:02:11,565
0,165 165,285 285,405 405,555 555,765
change the name to single

56
00:02:11,565 --> 00:02:13,155
0,335 715,1005 1005,1095 1095,1350 1350,1590
store it. So it's, it's

57
00:02:13,155 --> 00:02:13,620
0,90 90,225 225,315 315,375 375,465
a state of the art

58
00:02:13,620 --> 00:02:14,460
0,195 195,450 450,690 690,750 750,840
database system that's going to

59
00:02:14,460 --> 00:02:15,600
0,260 370,690 690,765 765,885 885,1140
cover that's going to incorporate

60
00:02:15,600 --> 00:02:16,190
0,90 90,180 180,285 285,360 360,590
a lot of the images

61
00:02:16,390 --> 00:02:18,300
0,400 600,980 980,1300 1320,1655 1655,1910
that we'll discuss throughout the

62
00:02:18,300 --> 00:02:19,420
0,380
semester.|
|

63
00:02:19,850 --> 00:02:21,085
0,260 260,410 410,575 575,850 900,1235
The crowd is huge, obviously
人群很多，显然不是每个人。如果你听说你想要得到等待名单，坏消息是，等待名单太大了，部门把它从我们手中拿走了，我们无法控制它。

64
00:02:21,085 --> 00:02:22,950
0,255 255,575 1285,1530 1530,1620 1620,1865
not everyone. If you hear

65
00:02:23,030 --> 00:02:23,635
0,290 290,350 350,410 410,500 500,605
you're trying to got the

66
00:02:23,635 --> 00:02:25,315
0,425 805,1065 1065,1245 1245,1455 1455,1680
waitlist, the bad news is

67
00:02:25,315 --> 00:02:26,275
0,270 270,450 450,690 690,795 795,960
because the waitlist is so

68
00:02:26,275 --> 00:02:28,090
0,305 805,1205 1255,1560 1560,1710 1710,1815
huge, the department took it

69
00:02:28,090 --> 00:02:29,110
0,135 135,255 255,500 670,930 930,1020
away from us and we

70
00:02:29,110 --> 00:02:30,270
0,105 105,375 375,660 660,855 855,1160
have no control over it.|
|

71
00:02:31,230 --> 00:02:32,225
0,335 335,440 440,575 575,755 755,995
They're trying to figure out
他们正在试图弄清楚，比如谁需要毕业，谁将获得系统选修课，以及所有这些新兴市场的东西。所以如果你来问我们，嘿，他们能从等待名单上除名吗？坏消息是我们我们不再控制它了。好消息是，因为我们现在有了jesh，它将每学期教一次这门课。因此，如果你这学期进不去，下个学期你就能拿到，然后管理员会把人们从等待名单上移走，因为人们下降了。

72
00:02:32,225 --> 00:02:33,340
0,285 285,525 525,690 690,840 840,1115
like who needs to graduate,

73
00:02:33,390 --> 00:02:34,040
0,230 230,320 320,425 425,530 530,650
who is to get the

74
00:02:34,040 --> 00:02:35,000
0,210 210,585 585,660 660,780 780,960
system elective and all that

75
00:02:35,000 --> 00:02:36,815
0,290 490,890 1180,1515 1515,1695 1695,1815
stuff EM. So if you

76
00:02:36,815 --> 00:02:37,565
0,165 165,285 285,405 405,585 585,750
come and ask us, hey,

77
00:02:37,565 --> 00:02:38,030
0,120 120,210 210,285 285,375 375,465
can they get off the

78
00:02:38,030 --> 00:02:38,780
0,105 105,285 285,450 450,600 600,750
wait list? The bad news

79
00:02:38,780 --> 00:02:39,965
0,120 120,315 315,650 670,930 930,1185
is that we we don't

80
00:02:39,965 --> 00:02:41,930
0,165 165,360 360,695 1585,1845 1845,1965
control it anymore. The good

81
00:02:41,930 --> 00:02:42,905
0,135 135,345 345,615 615,810 810,975
news is because we have

82
00:02:42,905 --> 00:02:44,570
0,375 375,695 1045,1365 1365,1530 1530,1665
jesh now, that will be

83
00:02:44,570 --> 00:02:46,160
0,225 225,450 450,740 910,1275 1275,1590
teaching this class once every

84
00:02:46,160 --> 00:02:47,150
0,270 270,630 630,840 840,900 900,990
every semester. So if you

85
00:02:47,150 --> 00:02:48,130
0,225 225,330 330,435 435,585 585,980
can't get in this semester,

86
00:02:48,870 --> 00:02:49,430
0,305 305,335 335,395 395,485 485,560
you'll be able to get

87
00:02:49,430 --> 00:02:50,690
0,135 135,330 330,650 880,1140 1140,1260
it next semester and then

88
00:02:50,690 --> 00:02:51,695
0,120 120,510 510,675 675,840 840,1005
the admins will move people

89
00:02:51,695 --> 00:02:52,690
0,135 135,255 255,420 420,660 660,995
off the wait list as

90
00:02:52,830 --> 00:02:54,700
0,305 305,530 530,800 800,1150
as people drop and.|
|

91
00:02:55,330 --> 00:02:58,540
0,275 275,455 455,760
S become available.|
S可以上场了。|

92
00:03:08,320 --> 00:03:10,320
0,400 990,1390
Different where?|
不同的地方？|

93
00:03:11,640 --> 00:03:13,490
0,550 1140,1415 1415,1565 1565,1715 1715,1850
Apartments, things I found out
公寓，我从维京教员那里发现的东西。因此，第一个坏消息是，如果你现在没有注册，你就会再次变得不同。

94
00:03:13,490 --> 00:03:14,780
0,120 120,210 210,435 435,710 1000,1290
since the viking faculty. So

95
00:03:14,780 --> 00:03:15,665
0,285 285,540 540,690 690,810 810,885
again, the first of the

96
00:03:15,665 --> 00:03:16,295
0,120 120,270 270,420 420,525 525,630
bad news is if you're

97
00:03:16,295 --> 00:03:17,705
0,75 75,330 330,575 865,1230 1230,1410
not enrolled now, you're unlike

98
00:03:17,705 --> 00:03:18,740
0,210 210,545
it again.|
|

99
00:03:19,160 --> 00:03:20,700
0,260 260,410 410,700
In the spring.|
在春天。|

100
00:03:21,430 --> 00:03:23,025
0,400 570,815 815,980 980,1250 1250,1595
Right, for all this, the
是的，尽管如此，重要的公告，一切都将在零号广场项目中。我们应该在第一堂课中少讲一些，现在可以在年级范围和网站上看到。我们通过画布展示的期末成绩。嗯，所有的东西都将再次通过研究生的范围提交，因为人们在外面观看这些不在CMU的讲座。

101
00:03:23,025 --> 00:03:24,750
0,395 505,840 840,1425 1425,1650 1650,1725
the important announcements, everything will

102
00:03:24,750 --> 00:03:26,720
0,60 60,165 165,740 1240,1605 1605,1970
be in piazza project zero.

103
00:03:27,310 --> 00:03:28,110
0,260 260,365 365,485 485,620 620,800
We should talk about less

104
00:03:28,110 --> 00:03:29,565
0,210 210,405 405,600 600,890 1060,1455
in the first lecture that's

105
00:03:29,565 --> 00:03:31,170
0,245 535,885 885,1140 1140,1365 1365,1605
now available on grade scope

106
00:03:31,170 --> 00:03:32,640
0,240 240,420 420,525 525,770 1210,1470
and on the website. The

107
00:03:32,640 --> 00:03:33,660
0,210 210,480 480,645 645,825 825,1020
final grades we show through

108
00:03:33,660 --> 00:03:36,360
0,500 790,1190 1690,2090 2320,2580 2580,2700
canvas. Um, and everything will

109
00:03:36,360 --> 00:03:37,490
0,120 120,390 390,630 630,825 825,1130
be submitted through grad scope

110
00:03:37,720 --> 00:03:39,480
0,400 720,1010 1010,1175 1175,1450 1470,1760
again because people watch these

111
00:03:39,480 --> 00:03:40,850
0,360 360,525 525,720 720,855 855,1370
lectures that aren't at cmu

112
00:03:40,930 --> 00:03:42,940
0,400 1110,1510
they outside.|
|

113
00:03:43,130 --> 00:03:45,535
0,400 630,980 980,1330 2010,2285 2285,2405
Of our university, if you
在我们大学，如果你想用和CU学生一样的方式测试你的项目，你可以去一个单独的年级范围账户，使用那里的代码，你可以开始测试，然后测试，我们会发布这些项目。

114
00:03:45,535 --> 00:03:46,320
0,90 90,195 195,345 345,510 510,785
want to test your projects

115
00:03:46,610 --> 00:03:48,060
0,400 690,950 950,1085 1085,1205 1205,1450
beyond the same way that

116
00:03:48,200 --> 00:03:49,500
0,245 245,425 425,815 815,1010 1010,1300
the way cu students are,

117
00:03:49,700 --> 00:03:50,880
0,290 290,395 395,605 605,860 860,1180
there's a separate grade scope

118
00:03:51,320 --> 00:03:52,255
0,350 350,545 545,635 635,770 770,935
account you can go to

119
00:03:52,255 --> 00:03:54,100
0,195 195,420 420,630 630,935 1585,1845
using that code there and

120
00:03:54,100 --> 00:03:54,870
0,90 90,180 180,285 285,450 450,770
you can start them and,

121
00:03:54,920 --> 00:03:56,425
0,400 420,695 695,860 860,1150 1260,1505
and test things out and

122
00:03:56,425 --> 00:03:57,780
0,180 180,345 345,555 555,875 955,1355
we'll release those projects as.|
|

123
00:04:01,350 --> 00:04:04,100
0,260 260,485 485,850 930,1330
So in exchange for.|
所以作为交换。|

124
00:04:04,840 --> 00:04:06,120
0,245 245,335 335,470 470,760
He would watch this.|
他会看这个。|

125
00:04:06,510 --> 00:04:08,255
0,400 870,1175 1175,1325 1325,1475 1475,1745
In making this all available
在向您提供这一切的过程中，我们需要一些。

126
00:04:08,255 --> 00:04:10,150
0,195 195,425 1165,1440 1440,1605 1605,1895
to you, we need some.|
|

127
00:04:11,360 --> 00:04:12,040
0,230 230,365 365,440 440,560 560,680
I don't think you have
我想你还没有，是吗？妈妈被禁了，因为孩子在那里。这在某种程度上是真的。但他们说我出生在巴尔的摩的街头。我来自巴尔的摩。

128
00:04:12,040 --> 00:04:13,330
0,135 135,285 285,405 405,650 970,1290
one yet, do you? Mom

129
00:04:13,330 --> 00:04:15,100
0,240 240,690 690,1010 1330,1620 1620,1770
got banned because kid about

130
00:04:15,100 --> 00:04:16,045
0,165 165,345 345,540 540,750 750,945
there. That is sort of

131
00:04:16,045 --> 00:04:18,355
0,305 1735,1980 1980,2100 2100,2220 2220,2310
true. But they said I

132
00:04:18,355 --> 00:04:19,045
0,120 120,285 285,405 405,525 525,690
was born in the streets

133
00:04:19,045 --> 00:04:20,350
0,135 135,585 585,870 870,1095 1095,1305
of Baltimore. I am from

134
00:04:20,350 --> 00:04:24,940
0,590
Baltimore.|
|

135
00:04:27,350 --> 00:04:31,480
0,400 870,1270 1500,1900 2130,2530 3840,4130
Um, so whatever, and someone
嗯，不管怎样，总有人能把它做完。那太好了。我做到了，对吧？我评论说，嘿，我是我不是从街头来的。

136
00:04:31,480 --> 00:04:32,290
0,180 180,390 390,600 600,735 735,810
could finish that. That would

137
00:04:32,290 --> 00:04:34,090
0,120 120,410 1300,1545 1545,1650 1650,1800
be great. And I did,

138
00:04:34,090 --> 00:04:35,140
0,210 210,450 450,705 705,915 915,1050
right? I comment, hey, I

139
00:04:35,140 --> 00:04:36,790
0,180 180,330 330,420 420,680 1390,1650
am. I am from just

140
00:04:36,790 --> 00:04:38,340
0,120 120,225 225,345 345,620
not from the streets.|
|

141
00:04:38,710 --> 00:04:39,880
0,400
So.|
所以。|

142
00:04:40,250 --> 00:04:42,460
0,245 245,455 455,680 680,1210 1950,2210
To cover for logistics, this
为了掩饰后勤，这是一个大班。显然，这里有很多人可能有不同的背景。所以我们希望你们能打断我们，因为我们整个学期都在学习。

143
00:04:42,460 --> 00:04:43,720
0,90 90,180 180,375 375,710 940,1260
is a big class. Obviously,

144
00:04:43,720 --> 00:04:44,260
0,195 195,240 240,300 300,375 375,540
there's a lot of people

145
00:04:44,260 --> 00:04:45,685
0,320 490,870 870,1110 1110,1245 1245,1425
here that may have different

146
00:04:45,685 --> 00:04:47,215
0,725 805,1080 1080,1230 1230,1380 1380,1530
backgrounds. And so we want

147
00:04:47,215 --> 00:04:48,085
0,120 120,300 300,510 510,690 690,870
you to interrupt us as

148
00:04:48,085 --> 00:04:49,050
0,165 165,300 300,480 480,630 630,965
we're going throughout the semester.|
|

149
00:04:50,430 --> 00:04:52,810
0,400 480,880 900,1300 1740,2060 2060,2380
If questions about talking about.|
如果有关于谈论的问题。|

150
00:04:56,820 --> 00:04:58,970
0,455 455,760 1170,1570 1650,1985 1985,2150
Terrififying question. Um, I also
令人毛骨悚然的问题。嗯，再谈到我的生活，我的生活，我的亲生女儿，我也很兴奋。首先是数据库，然后什么都不做。就像我不谈论爱好一样。从字面上看，这只是一只数据库鸡。确认这只是数据库。是的，我的父母是特朗普的支持者。我们与他们交谈时，不会把这当做是生意。你觉得很好笑，对吧？

151
00:04:58,970 --> 00:04:59,810
0,105 105,315 315,585 585,750 750,840
get very excited when I

152
00:04:59,810 --> 00:05:01,540
0,105 105,350 970,1260 1260,1440 1440,1730
talk about again, my life,

153
00:05:01,830 --> 00:05:03,760
0,400 660,1055 1055,1385 1385,1625 1625,1930
life, biological daughter. Number one

154
00:05:04,020 --> 00:05:05,540
0,275 275,860 860,1055 1055,1250 1250,1520
is databases and then nothing

155
00:05:05,540 --> 00:05:06,800
0,320 370,720 720,930 930,1125 1125,1260
else. Like I don't talk

156
00:05:06,800 --> 00:05:09,080
0,290 910,1380 1380,1670 1810,2115 2115,2280
about hobbies. It literally is

157
00:05:09,080 --> 00:05:11,780
0,120 120,680 700,1100 1360,1760 2440,2700
just databases chicken. Confirm it

158
00:05:11,780 --> 00:05:13,310
0,135 135,270 270,705 705,980 1210,1530
is just databases. Yes, my

159
00:05:13,310 --> 00:05:14,435
0,240 240,420 420,570 570,930 930,1125
parents are Trump supporters. We

160
00:05:14,435 --> 00:05:15,200
0,150 150,300 300,435 435,555 555,765
don't talk to them like

161
00:05:15,200 --> 00:05:17,320
0,320 1030,1305 1305,1485 1485,1755 1755,2120
like it is just business.

162
00:05:19,790 --> 00:05:21,070
0,105 105,315 315,495 495,740 880,1280
It's funny to you, right?|
|

163
00:05:22,360 --> 00:05:24,830
0,260 260,440 440,710 710,1060 2070,2470
So again, so if fast
再说一次，如果速度快，或者如果你有问题打断我们，我们不会做的是，在课程结束时，让大家排成一排，问，幻灯片5怎么样？

164
00:05:25,150 --> 00:05:26,300
0,260 260,350 350,425 425,670 750,1150
or if you have questions

165
00:05:27,010 --> 00:05:28,440
0,275 275,550 840,1100 1100,1265 1265,1430
interrupt us, what we're not

166
00:05:28,440 --> 00:05:29,715
0,165 165,270 270,530 670,1020 1020,1275
going to do is that

167
00:05:29,715 --> 00:05:30,660
0,255 255,480 480,630 630,795 795,945
at at the end of

168
00:05:30,660 --> 00:05:32,115
0,150 150,440 730,1005 1005,1215 1215,1455
the class, have people line

169
00:05:32,115 --> 00:05:32,940
0,165 165,285 285,450 450,630 630,825
up and say, what about

170
00:05:32,940 --> 00:05:35,060
0,320 1030,1430
slide five?|
|

171
00:05:36,670 --> 00:05:37,605
0,305 305,470 470,620 620,785 785,935
The material we discussed during
我们在讲课中讨论的材料，因为我想让你们打断我们，因为如果你们有问题，其他人也可能有问题，让我们来讨论这些事情。从教育学的角度来看，这对我们也更好，因为我会回去看。

172
00:05:37,605 --> 00:05:38,490
0,135 135,375 375,630 630,750 750,885
the lecture as we go

173
00:05:38,490 --> 00:05:40,305
0,270 270,650 1300,1575 1575,1680 1680,1815
along because want you to

174
00:05:40,305 --> 00:05:41,520
0,255 255,495 495,705 705,900 900,1215
interrupt as, as, as we're

175
00:05:41,520 --> 00:05:42,810
0,350 670,915 915,1020 1020,1140 1140,1290
talking, because if you have

176
00:05:42,810 --> 00:05:43,725
0,255 255,480 480,615 615,765 765,915
questions and somebody else is

177
00:05:43,725 --> 00:05:45,765
0,195 195,390 390,630 630,995 1795,2040
likely have questions too for

178
00:05:45,765 --> 00:05:47,685
0,135 135,425 1045,1320 1320,1575 1575,1920
us to these things and

179
00:05:47,685 --> 00:05:48,840
0,240 240,515 655,930 930,1050 1050,1155
discuss it. And from a

180
00:05:48,840 --> 00:05:50,505
0,675 675,1005 1005,1320 1320,1500 1500,1665
pedagogical standpoint, it's better for

181
00:05:50,505 --> 00:05:51,810
0,120 120,285 285,525 525,875 1015,1305
us as well because I

182
00:05:51,810 --> 00:05:53,000
0,165 165,345 345,495 495,740
go back and watch.|
|

183
00:05:53,000 --> 00:05:53,690
0,150 150,255 255,405 405,540 540,690
And I see where people
我看到人们在哪里提问，我看到，哦，这不太对劲，去解决问题，所以有问题。

184
00:05:53,690 --> 00:05:55,160
0,195 195,500 1030,1260 1260,1350 1350,1470
ask questions and I see,

185
00:05:55,160 --> 00:05:56,510
0,120 120,470 610,945 945,1125 1125,1350
oh, that didn't get quite

186
00:05:56,510 --> 00:05:57,790
0,290 430,690 690,840 840,1005 1005,1280
right, go fix the lot,

187
00:05:57,900 --> 00:06:01,740
0,245 245,425 425,620 620,880
so having the questions.|
|

188
00:06:03,420 --> 00:06:04,595
0,275 275,470 470,695 695,905 905,1175
All right. Any questions about
好的。对这些后勤有什么问题吗？

189
00:06:04,595 --> 00:06:06,140
0,225 225,755
these logistics?|
|

190
00:06:08,390 --> 00:06:09,625
0,400 690,935 935,1055 1055,1145 1145,1235
Boom. So let go right
砰的一声。所以，让我们直奔主题吧。好的，所以我们要谈的是。

191
00:06:09,625 --> 00:06:11,770
0,120 120,315 315,635 1165,1565 1855,2145
into it. Okay, so we

192
00:06:11,770 --> 00:06:12,810
0,75 75,300 300,630 630,810 810,1040
gonna talk about sort of.|
|

193
00:06:13,660 --> 00:06:14,955
0,305 305,485 485,920 920,1130 1130,1295
Around what databaseases are, why
围绕什么是数据库，为什么它很重要，为什么我们需要数据库分钟系统。为什么这门课会存在，嗯，不仅仅是因为我们做了愚蠢的利基课程，这是一个非常重要的话题，然后我们会讨论。

194
00:06:14,955 --> 00:06:15,855
0,210 210,450 450,660 660,780 780,900
it's important, why we need

195
00:06:15,855 --> 00:06:17,370
0,225 225,465 465,755 1045,1320 1320,1515
database minute systems. Why this

196
00:06:17,370 --> 00:06:19,740
0,315 315,710 1180,1580 1960,2235 2235,2370
course exists, um, not just

197
00:06:19,740 --> 00:06:20,685
0,135 135,270 270,420 420,615 615,945
because we do stupid niche

198
00:06:20,685 --> 00:06:22,620
0,395 955,1425 1425,1635 1635,1740 1740,1935
with it's, it's a super

199
00:06:22,620 --> 00:06:24,090
0,240 240,560 850,1140 1140,1305 1305,1470
important topic and then we'll

200
00:06:24,090 --> 00:06:25,100
0,90 90,210 210,470
talk about the.|
|

201
00:06:25,490 --> 00:06:26,875
0,260 260,440 440,755 755,1130 1130,1385
In my opinion, the the
在我看来，在数据库中如何构建或使用的主要模型。然后让我们讨论关系代数，我们用来与关系模型数据库交互的机制或运算符，我们结束了，因为我们必须讨论人们所使用的替代模型。

202
00:06:26,875 --> 00:06:28,480
0,435 435,725 1045,1320 1320,1470 1470,1605
dominant model for how you

203
00:06:28,480 --> 00:06:29,620
0,105 105,330 330,630 630,900 900,1140
want to build or use

204
00:06:29,620 --> 00:06:31,195
0,165 165,285 285,375 375,620 1330,1575
in in a database. Then

205
00:06:31,195 --> 00:06:32,170
0,150 150,210 210,285 285,495 495,975
let's talk about relational algebra,

206
00:06:32,170 --> 00:06:33,415
0,135 135,380 460,735 735,885 885,1245
the mechanism or the operators

207
00:06:33,415 --> 00:06:35,460
0,195 195,405 405,725 1405,1725 1725,2045
we use to interact with

208
00:06:35,630 --> 00:06:37,810
0,400 420,860 860,1115 1115,1420 1860,2180
a relational model database and

209
00:06:37,810 --> 00:06:38,710
0,210 210,405 405,615 615,780 780,900
we finish up because we

210
00:06:38,710 --> 00:06:39,565
0,165 165,285 285,360 360,555 555,855
have to be talking about

211
00:06:39,565 --> 00:06:42,020
0,365 385,785 1315,1620 1620,1925
alternative models that people.|
|

212
00:06:42,510 --> 00:06:44,195
0,335 335,670 1020,1355 1355,1550 1550,1685
Ational model and I have
国家模特和我对为什么他们错了有强烈的看法，好吗？

213
00:06:44,195 --> 00:06:45,080
0,195 195,420 420,570 570,690 690,885
strong opinions of why they're

214
00:06:45,080 --> 00:06:46,600
0,230 490,890
wrong, okay?|
|

215
00:06:47,200 --> 00:06:49,000
0,275 275,515 515,880
All right, so.|
好吧，那么。|

216
00:06:50,620 --> 00:06:51,405
0,260 260,395 395,545 545,695 695,785
The second most important thing
我生命中第二重要的事情。

217
00:06:51,405 --> 00:06:54,120
0,45 45,135 135,395
in my life.|
|

218
00:07:01,030 --> 00:07:02,180
0,400
Yes.|
是。|

219
00:07:04,050 --> 00:07:05,345
0,305 305,610 660,965 965,1145 1145,1295
Yes, the question is, if
是的，问题是，如果你在等待名单上，你能进入广场吗？是的，我们会张贴的。

220
00:07:05,345 --> 00:07:05,840
0,150 150,195 195,240 240,330 330,495
you're on the wait list,

221
00:07:05,840 --> 00:07:06,575
0,120 120,195 195,405 405,630 630,735
can you get access to

222
00:07:06,575 --> 00:07:08,020
0,390 390,600 600,855 855,1080 1080,1445
piazza? Yes, we'll post the.|
|

223
00:07:09,570 --> 00:07:10,570
0,260 260,380 380,515 515,695 695,1000
We make that available, yes.|
是的，我们让它变得可用。|

224
00:07:11,645 --> 00:07:12,365
0,75 75,135 135,255 255,525 525,720
So he's a SEL server
所以他是后面的SEL服务器。

225
00:07:12,365 --> 00:07:13,440
0,180 180,255 255,485
in the back.|
|

226
00:07:15,540 --> 00:07:17,520
0,290 290,760
My sql.|
我的SQL。|

227
00:07:17,950 --> 00:07:19,080
0,400
Yes.|
是。|

228
00:07:19,530 --> 00:07:23,060
0,400 930,1190 1190,1450 1470,1870 2910,3530
Anybody one more? Anybody cassandra?
有没有人再来一杯？有人叫卡桑德拉吗？好吧。

229
00:07:23,060 --> 00:07:24,640
0,320
Okay.|
|

230
00:07:25,860 --> 00:07:27,545
0,335 335,695 695,970 1080,1490 1490,1685
Thing everybody listed sql server
所有人都列出了SQL SERVER POSTGRES MOGO那里的所有数据库系统。

231
00:07:27,545 --> 00:07:29,260
0,390 390,815 895,1230 1230,1395 1395,1715
postgres mongo there, all database

232
00:07:29,700 --> 00:07:31,280
0,400
systems.|
|

233
00:07:32,250 --> 00:07:33,550
0,230 230,305 305,380 380,530 530,1300
Right. We're talking about databases.|
正确的。我们谈论的是数据库。|

234
00:07:34,220 --> 00:07:35,555
0,290 430,735 735,885 885,1065 1065,1335
And don't feel bad that
不要因为不是唯一一个犯这个错误的人而感到难过。这是杰夫。啊，但我想今年。

235
00:07:35,555 --> 00:07:36,350
0,255 255,345 345,465 465,630 630,795
not the only one making

236
00:07:36,350 --> 00:07:38,020
0,225 225,560 970,1230 1230,1380 1380,1670
this mistake. This is Jeff.

237
00:07:38,250 --> 00:07:39,935
0,400 750,1130 1130,1355 1355,1505 1505,1685
Ah, but I think this

238
00:07:39,935 --> 00:07:41,000
0,275
year.|
|

239
00:07:41,800 --> 00:07:43,260
0,215 215,260 260,365 365,640
See if it plays.|
看看它能不能发挥作用。|

240
00:07:43,950 --> 00:07:45,950
0,350 350,575 575,755 755,1060 1740,2000
Tech for four place a
Tech for Four Place这些系统中的一个关系型系统以行和列的形式提供要存储和检索的信息。贾斯汀，矩阵是什么？不是的。

241
00:07:45,950 --> 00:07:47,320
0,380 430,705 705,840 840,1035 1035,1370
relational one of these systems

242
00:07:47,460 --> 00:07:48,920
0,380 380,755 755,1115 1115,1325 1325,1460
presents the information to be

243
00:07:48,920 --> 00:07:50,510
0,240 240,435 435,1050 1050,1230 1230,1590
stored and retrieved in rows

244
00:07:50,510 --> 00:07:52,580
0,210 210,710 1390,1890 1890,2010 2010,2070
and columns. Justin, what is

245
00:07:52,580 --> 00:07:58,880
0,75 75,560 1150,1550
the matrix? No.|
|

246
00:08:01,010 --> 00:08:03,280
0,105 105,225 225,500 640,1040 1870,2270
It'll get worse. Okay, right?|
情况会变得更糟。好的，对吧？|

247
00:08:04,110 --> 00:08:06,470
0,400 870,1220 1220,1570 1620,1910 1910,2360
Base not, again being pedantic
基础不是，这里又是迂腐的，但理解两者之间的区别是很好的，因为当我们只谈论数据模型时，你不会理解，就像，好吧，我们还不关心系统实现，数据实际上是什么，以及我们将如何与它交互，所以。

248
00:08:06,470 --> 00:08:07,055
0,150 150,255 255,375 375,435 435,585
here, but it's good to

249
00:08:07,055 --> 00:08:07,970
0,180 180,285 285,570 570,765 765,915
understand the distinction between the

250
00:08:07,970 --> 00:08:09,575
0,290 910,1170 1170,1290 1290,1440 1440,1605
two, because when we just

251
00:08:09,575 --> 00:08:10,280
0,105 105,195 195,315 315,480 480,705
talk about the data models,

252
00:08:10,280 --> 00:08:11,230
0,135 135,285 285,420 420,615 615,950
you don't understand, like, okay,

253
00:08:11,610 --> 00:08:12,500
0,230 230,380 380,455 455,620 620,890
we don't care about system

254
00:08:12,500 --> 00:08:14,960
0,350 790,1190 1570,1875 1875,2145 2145,2460
implement yet about what data

255
00:08:14,960 --> 00:08:15,875
0,210 210,450 450,690 690,795 795,915
actually is and how we're

256
00:08:15,875 --> 00:08:16,570
0,45 45,150 150,315 315,450 450,695
going to interact with it,

257
00:08:16,830 --> 00:08:17,700
0,400
so.|
|

258
00:08:18,060 --> 00:08:21,280
0,400 660,1060 1080,1480 2100,2500 2820,3220
Um, organized collection of data
嗯，有组织的相互关联的数据集合，这意味着对某些方面进行建模。

259
00:08:21,720 --> 00:08:22,940
0,455 455,695 695,875 875,980 980,1220
that's related to each other,

260
00:08:22,940 --> 00:08:24,430
0,345 345,510 510,705 705,1010 1090,1490
that's meant to model some

261
00:08:24,540 --> 00:08:25,420
0,400
aspects.|
|

262
00:08:26,420 --> 00:08:28,990
0,290 290,580 1170,1570 2040,2360 2360,2570
Everybody lives systems an example
Everyone Living系统是一个数据库的例子，它将成为大学的数据库，跟踪哪些学生注册了哪些班级和您的成绩。

263
00:08:28,990 --> 00:08:30,145
0,135 135,285 285,590 730,1005 1005,1155
of a database that would

264
00:08:30,145 --> 00:08:32,230
0,275 775,1110 1110,1440 1440,1830 1830,2085
be the university database that

265
00:08:32,230 --> 00:08:33,055
0,150 150,315 315,450 450,615 615,825
keeps track of what students

266
00:08:33,055 --> 00:08:34,230
0,225 225,690 690,780 780,900 900,1175
are enrolled in what classes

267
00:08:34,520 --> 00:08:36,060
0,260 260,410 410,730
and your grades.|
|

268
00:08:36,060 --> 00:08:36,840
0,225 225,345 345,540 540,645 645,780
Right, because that's trying to
是的，因为这是在试图模拟，你知道，学生们正在上课并获得报酬的真实的大学互动。

269
00:08:36,840 --> 00:08:38,970
0,290 1270,1515 1515,1695 1695,1890 1890,2130
model, you know, the real

270
00:08:38,970 --> 00:08:41,520
0,380 430,1010 1180,1500 1500,1820 2260,2550
university interactions that that students

271
00:08:41,520 --> 00:08:42,555
0,135 135,270 270,510 510,780 780,1035
are taking classes and getting

272
00:08:42,555 --> 00:08:43,440
0,335
paid.|
|

273
00:08:44,500 --> 00:08:45,620
0,400
Um.|
恩。|

274
00:08:47,620 --> 00:08:48,565
0,135 135,285 285,435 435,630 630,945
This course is so important
这门课程非常重要，因为数据库，一个数据库，将是基础组件。

275
00:08:48,565 --> 00:08:51,180
0,395 625,915 915,1205 1915,2265 2265,2615
because the database, a database,

276
00:08:51,650 --> 00:08:52,345
0,290 290,410 410,470 470,545 545,695
is going to be the

277
00:08:52,345 --> 00:08:54,380
0,305 1165,1565
fundamental component.|
|

278
00:08:55,330 --> 00:08:56,835
0,245 245,470 470,740 740,1030 1170,1505
The underlying of any application
任何应用程序的基础，或者任何你将在你的余生中做的事情。所以，如果你是一名CS学生，问题是你是否去做了一份与CS相关的事情，你知道你不是程序员吗？归根结底，您将始终与数据库交互，即使它是Excel电子表格。

279
00:08:56,835 --> 00:08:57,690
0,315 315,570 570,735 735,795 795,855
or anything you're going to

280
00:08:57,690 --> 00:08:58,320
0,90 90,285 285,465 465,555 555,630
do with the rest of

281
00:08:58,320 --> 00:08:59,565
0,90 90,350 730,975 975,1110 1110,1245
your life. So matter of

282
00:08:59,565 --> 00:09:00,240
0,105 105,210 210,360 360,435 435,675
like if you're a CS

283
00:09:00,240 --> 00:09:01,020
0,210 210,360 360,510 510,675 675,780
student, a matter if you

284
00:09:01,020 --> 00:09:01,545
0,90 90,180 180,285 285,375 375,525
go off and get a

285
00:09:01,545 --> 00:09:03,465
0,240 240,575 1225,1515 1515,1695 1695,1920
job doing and in doing

286
00:09:03,465 --> 00:09:04,485
0,285 285,480 480,645 645,810 810,1020
CS related things or you

287
00:09:04,485 --> 00:09:05,520
0,195 195,375 375,635 655,885 885,1035
you don't. Do, you know

288
00:09:05,520 --> 00:09:06,650
0,195 195,345 345,525 525,630 630,1130
you're not not a programmer?

289
00:09:06,820 --> 00:09:07,500
0,245 245,365 365,485 485,575 575,680
At the end of the

290
00:09:07,500 --> 00:09:08,295
0,150 150,450 450,660 660,750 750,795
day, you're always going to

291
00:09:08,295 --> 00:09:09,320
0,180 180,585 585,690 690,780 780,1025
be interacting with the database,

292
00:09:10,000 --> 00:09:10,980
0,335 335,560 560,695 695,830 830,980
even if if it's an

293
00:09:10,980 --> 00:09:12,460
0,255 255,740
Excel spreadsheet.|
|

294
00:09:12,460 --> 00:09:13,500
0,165 165,440
It bit.|
它咬人了。|

295
00:09:14,950 --> 00:09:18,645
0,290 290,580 1980,2380 3180,3485 3485,3695
Is one, and this course
是其中之一，这门课程很重要，因为您最终将与数据库系统交互，您需要了解其中实际包含的内容。

296
00:09:18,645 --> 00:09:21,285
0,255 255,605 625,1025 2185,2475 2475,2640
is important because because you're

297
00:09:21,285 --> 00:09:21,975
0,45 45,105 105,180 180,375 375,690
going to end up interacting

298
00:09:21,975 --> 00:09:23,220
0,105 105,315 315,665 895,1140 1140,1245
with database systems, you need

299
00:09:23,220 --> 00:09:24,525
0,165 165,345 345,525 525,740 1000,1305
to understand what's actually get

300
00:09:24,525 --> 00:09:25,380
0,305
inside.|
|

301
00:09:25,690 --> 00:09:26,655
0,260 260,425 425,635 635,800 800,965
Even if, if, if it's
即使是在手机上运行的小应用程序，或者有大量数据的应用程序，理解查询也是很重要的。或者当你使用数据库系统时，它实际上是做什么的？

302
00:09:26,655 --> 00:09:27,825
0,135 135,455 505,825 825,1020 1020,1170
a small application like running

303
00:09:27,825 --> 00:09:28,965
0,120 120,240 240,405 405,695 805,1140
in your cell phone or

304
00:09:28,965 --> 00:09:31,250
0,335 745,1080 1080,1935 1935,2025 2025,2285
a application withabytes of data,

305
00:09:31,660 --> 00:09:33,990
0,410 410,620 620,830 830,1150 1860,2330
it's important to understand queries.

306
00:09:33,990 --> 00:09:35,540
0,135 135,225 225,435 435,800 1150,1550
Or when you database system,

307
00:09:35,860 --> 00:09:37,280
0,275 275,410 410,620 620,970
what does it actually?|
|

308
00:09:38,040 --> 00:09:39,320
0,320 320,575 575,785 785,950 950,1280
And what are the tradeoffs
在使用一种数据模型与另一种数据模型或一种数据库方法与另一种数据库方法的方式上，您会做出哪些权衡？

309
00:09:39,320 --> 00:09:40,130
0,75 75,195 195,405 405,630 630,810
you would make for how

310
00:09:40,130 --> 00:09:41,075
0,165 165,345 345,525 525,720 720,945
you use one data model

311
00:09:41,075 --> 00:09:42,650
0,270 270,635 715,1005 1005,1245 1245,1575
versus another, or one database

312
00:09:42,650 --> 00:09:44,520
0,300 300,620 790,1190
approach versus another?|
|

313
00:09:45,700 --> 00:09:46,815
0,320 320,395 395,530 530,815 815,1115
What's the most widely deployed
世界上部署最广泛的数据库系统是什么？我能猜猜吗？

314
00:09:46,815 --> 00:09:47,655
0,180 180,405 405,525 525,600 600,840
database system in the world?

315
00:09:47,655 --> 00:09:48,380
0,225 225,300 300,390 390,480 480,725
Can I take a guess?|
|

316
00:09:51,970 --> 00:09:52,695
0,230 230,305 305,410 410,560 560,725
Everyone has a cell phone,
每个人都有一部手机，对吗？

317
00:09:52,695 --> 00:09:53,720
0,275
right?|
|

318
00:09:53,880 --> 00:09:54,905
0,425 425,605 605,755 755,860 860,1025
Sql light is on every
每一部手机上都有SQL Light，它是由北卡罗来纳州的一个家伙写的。很好，但帮手没有地址。他就像，啊，他就像一个游牧民族。

319
00:09:54,905 --> 00:09:57,080
0,225 225,695 1675,1920 1920,2055 2055,2175
single cellphone and it's written

320
00:09:57,080 --> 00:09:58,685
0,225 225,450 450,740 1210,1485 1485,1605
by one dude down in

321
00:09:58,685 --> 00:10:01,240
0,135 135,425 1255,1655 2035,2295 2295,2555
north Carolina. Kind, but like

322
00:10:01,260 --> 00:10:02,315
0,395 395,590 590,695 695,845 845,1055
helper doesn't have an address.

323
00:10:02,315 --> 00:10:02,945
0,195 195,255 255,390 390,570 570,630
He's like, ah, he's like

324
00:10:02,945 --> 00:10:04,120
0,105 105,485
a nomad.|
|

325
00:10:05,510 --> 00:10:06,385
0,245 245,455 455,590 590,770 770,875
So let's an example of
让我们举一个数据库的例子。我们和大学申请者谈过了。我们谈论的是一些与这里的每个人更相关的事情。与Spotify、乐队营、iTunes或Keep Music一样。

326
00:10:06,385 --> 00:10:07,285
0,60 60,285 285,540 540,675 675,900
a database. We talk to

327
00:10:07,285 --> 00:10:09,720
0,365 1435,1770 1770,1995 1995,2160 2160,2435
university application. We talk about

328
00:10:10,880 --> 00:10:11,950
0,305 305,485 485,680 680,905 905,1070
something more relevant to everyone

329
00:10:11,950 --> 00:10:14,520
0,260 1270,1545 1545,1710 1710,1920 1920,2570
here. Same thing like Spotify

330
00:10:14,690 --> 00:10:15,940
0,245 245,365 365,590 590,935 935,1250
or like band camp or

331
00:10:15,940 --> 00:10:18,500
0,525 525,645 645,920 1540,1940
itunes or keep music.|
|

332
00:10:18,510 --> 00:10:19,310
0,230 230,305 305,455 455,620 620,800
So we can create a
所以我们可以创建一个非常简单的数据库，它基本上有两个实体。有艺人出现在专辑中。

333
00:10:19,310 --> 00:10:21,040
0,300 300,630 630,980 1150,1440 1440,1730
really simple database that has

334
00:10:21,270 --> 00:10:24,970
0,400 420,680 680,1180 1440,1990 3300,3700
basically two entities. There's artists

335
00:10:25,080 --> 00:10:26,560
0,275 275,395 395,820
appear on albums.|
|

336
00:10:26,560 --> 00:10:27,280
0,210 210,360 360,495 495,615 615,720
So the thing we need
所以我们需要存储在我们的数据中的东西就像每个艺术家的名字一样，是的，他们的名字是什么？他们是从哪个国家起步的？这张专辑可能是这样的，专辑的名字是什么，它是什么时候推出的，有哪些艺术家出现在里面？

337
00:10:27,280 --> 00:10:27,880
0,135 135,255 255,330 330,420 420,600
to store in our data

338
00:10:27,880 --> 00:10:28,975
0,195 195,315 315,420 420,680 850,1095
is gonna be like for

339
00:10:28,975 --> 00:10:30,565
0,195 195,435 435,725 1075,1350 1350,1590
every single artist, yeah, what's

340
00:10:30,565 --> 00:10:31,830
0,120 120,390 390,675 675,915 915,1265
their name? What country did

341
00:10:32,390 --> 00:10:34,015
0,320 320,640 1050,1310 1310,1430 1430,1625
they start? And the album

342
00:10:34,015 --> 00:10:34,720
0,165 165,270 270,405 405,600 600,705
could be like, what's the

343
00:10:34,720 --> 00:10:35,695
0,165 165,315 315,420 420,680 700,975
name of the album, when

344
00:10:35,695 --> 00:10:36,850
0,120 120,225 225,330 330,575 865,1155
did it come out, what

345
00:10:36,850 --> 00:10:38,400
0,290 310,570 570,690 690,950
artists appear on it?|
|

346
00:10:38,810 --> 00:10:39,980
0,290 290,580
And so.|
所以。|

347
00:10:41,170 --> 00:10:42,200
0,275 275,440 440,590 590,740 740,1030
What we talk about now
我们现在讨论的是一个数据库的稻草人实现。

348
00:10:42,340 --> 00:10:43,605
0,365 365,605 605,860 860,1085 1085,1265
we do a sort of

349
00:10:43,605 --> 00:10:44,880
0,270 270,555 555,905 925,1170 1170,1275
straw man implementation of a

350
00:10:44,880 --> 00:10:45,860
0,260
database.|
|

351
00:10:46,110 --> 00:10:47,975
0,400 1110,1355 1355,1520 1520,1685 1685,1865
Database and we'll see why
数据库，我们将看到为什么它是愚蠢的，我们会看到它将会有的所有问题。然后，这将有助于激励我们为什么真正想要建立一个成熟的数据库。我依赖于一个成熟的数据库。

352
00:10:47,975 --> 00:10:49,235
0,270 270,540 540,750 750,995 1015,1260
it's stupid and we see

353
00:10:49,235 --> 00:10:49,940
0,105 105,240 240,420 420,570 570,705
all the problems that it's

354
00:10:49,940 --> 00:10:51,425
0,60 60,150 150,410 1030,1290 1290,1485
going to have. And then

355
00:10:51,425 --> 00:10:52,850
0,270 270,525 525,840 840,990 990,1425
that again that'll help motivate

356
00:10:52,850 --> 00:10:53,600
0,225 225,420 420,570 570,660 660,750
why we actually want to

357
00:10:53,600 --> 00:10:54,640
0,150 150,315 315,495 495,780 780,1040
build a full fledged database.

358
00:10:54,720 --> 00:10:55,670
0,335 335,575 575,710 710,800 800,950
I rely on a full

359
00:10:55,670 --> 00:10:56,900
0,240 240,500
fledged database.|
|

360
00:10:58,520 --> 00:10:59,440
0,260 260,365 365,635 635,770 770,920
So the easiest way to
因此，实现管理数据的数据库系统的最简单方法是只使用磁盘上的文件。

361
00:10:59,440 --> 00:11:00,745
0,210 210,390 390,650 790,1125 1125,1305
implement a database system that

362
00:11:00,745 --> 00:11:02,710
0,315 315,635 1075,1475 1555,1815 1815,1965
manages data is to just

363
00:11:02,710 --> 00:11:05,200
0,210 210,530 1150,1440 1440,1940
use files on disk.|
|

364
00:11:05,610 --> 00:11:06,940
0,380 380,650 650,785 785,980 980,1330
Right. So for every single,
正确的。所以对于每首单曲，对于我的两个实体，我有一张专辑，我有一位艺术家，我有一个CSV文件，逗号分隔值文件。

365
00:11:07,470 --> 00:11:08,465
0,245 245,365 365,485 485,845 845,995
for my two entities, I

366
00:11:08,465 --> 00:11:09,140
0,90 90,195 195,405 405,600 600,675
have an album, I have

367
00:11:09,140 --> 00:11:10,460
0,75 75,320 730,1005 1005,1125 1125,1320
an artist, I have a

368
00:11:10,460 --> 00:11:11,990
0,465 465,705 705,1050 1050,1245 1245,1530
csv file, comma separated value

369
00:11:11,990 --> 00:11:13,040
0,350
file.|
|

370
00:11:13,040 --> 00:11:14,375
0,240 240,420 420,740 940,1185 1185,1335
And every single in that
以及那份文件里的每一个人。

371
00:11:14,375 --> 00:11:15,480
0,305
file.|
|

372
00:11:15,630 --> 00:11:17,180
0,305 305,515 515,725 725,1030
Tax every single line.|
对每一行都征税。|

373
00:11:19,180 --> 00:11:20,340
0,400
Right.|
正确的。|

374
00:11:21,320 --> 00:11:24,200
0,360 360,675 675,1010 1390,1790
I want to find.|
我想要找到。|

375
00:11:24,350 --> 00:11:25,900
0,320 320,640
In my.|
在我的。|

376
00:11:26,090 --> 00:11:26,815
0,320 320,380 380,500 500,635 635,725
I'm going to open it
我要打开它，你知道，解析它，排成一行，试着找到我正在寻找的数据。

377
00:11:26,815 --> 00:11:29,190
0,245 895,1140 1140,1385 1795,2130 2130,2375
up, you know, parse it,

378
00:11:29,510 --> 00:11:30,415
0,275 275,440 440,635 635,800 800,905
line my line and try

379
00:11:30,415 --> 00:11:31,375
0,120 120,270 270,405 405,665 715,960
to find the data that

380
00:11:31,375 --> 00:11:32,420
0,150 150,285 285,605
I'm looking for.|
|

381
00:11:32,700 --> 00:11:33,780
0,400
Right.|
正确的。|

382
00:11:33,920 --> 00:11:34,525
0,275 275,395 395,485 485,560 560,605
So say I want to
所以说我想做一件事。

383
00:11:34,525 --> 00:11:35,940
0,60 60,305
do something.|
|

384
00:11:45,360 --> 00:11:47,360
0,365 365,590 590,1090 1380,1730 1730,2000
Versus the csv magic word
与CSV魔法词的对决。基本上就是用逗号分开。

385
00:11:47,360 --> 00:11:49,805
0,270 270,620 1450,1850 1990,2355 2355,2445
parts. Basically just splitting on

386
00:11:49,805 --> 00:11:51,540
0,245 475,1025
the commas.|
|

387
00:11:51,610 --> 00:11:52,545
0,260 260,350 350,470 470,710 710,935
Then if I find that
那么如果我发现这个名字是。

388
00:11:52,545 --> 00:11:55,430
0,275 1255,1655 2065,2415 2415,2625 2625,2885
the the name of the.|
|

389
00:11:56,860 --> 00:11:57,690
0,225 225,360 360,495 495,585 585,830
Then I print it out.|
然后我把它打印出来。|

390
00:12:01,130 --> 00:12:02,340
0,400
Right.|
正确的。|

391
00:12:02,650 --> 00:12:04,160
0,275 275,550
It works.|
它起作用了。|

392
00:12:06,250 --> 00:12:07,640
0,245 245,305 305,395 395,670 990,1390
But this is bad. Why?|
但这很糟糕。为什么？|

393
00:12:11,090 --> 00:12:12,220
0,320 320,545 545,740 740,905 905,1130
Yes, it can become really
是的，随着行数的增加，它会变得非常慢。

394
00:12:12,220 --> 00:12:13,015
0,240 240,390 390,495 495,630 630,795
slow as the number of

395
00:12:13,015 --> 00:12:13,200
0,135
rows.|
|

396
00:12:13,900 --> 00:12:15,000
0,275 275,515 515,680 680,860 860,1100
Says it's gone. Really, really
说它不见了。增长非常非常缓慢。是的，所以在软件中总是要考虑极端的情况。

397
00:12:15,000 --> 00:12:17,085
0,350 850,1250 1390,1695 1695,1905 1905,2085
slow increases. Yeah, so always

398
00:12:17,085 --> 00:12:18,585
0,135 135,345 345,645 645,855 855,1500
to think of in extremes

399
00:12:18,585 --> 00:12:21,040
0,300 300,665 835,1235
in, in software.|
|

400
00:12:21,140 --> 00:12:22,795
0,290 290,530 530,880 1020,1400 1400,1655
Three records here. Yeah, I
这里有三张唱片。是的，我可以将它加载到一个页面中，并很快进行解析。但如果我有30亿张唱片。

401
00:12:22,795 --> 00:12:23,410
0,135 135,285 285,420 420,525 525,615
can load that up in

402
00:12:23,410 --> 00:12:24,265
0,90 90,255 255,495 495,690 690,855
a single page and parse

403
00:12:24,265 --> 00:12:25,435
0,120 120,285 285,575 835,1080 1080,1170
that pretty quickly. But if

404
00:12:25,435 --> 00:12:26,730
0,120 120,345 345,630 630,930 930,1295
I have 3 billion records.|
|

405
00:12:27,950 --> 00:12:28,930
0,275 275,470 470,650 650,800 800,980
Then yeah, and if jizz
是的，如果jizz是最后一个条目，那么我必须逐行解析每一个条目。

406
00:12:28,930 --> 00:12:29,880
0,150 150,300 300,495 495,690 690,950
is the last, the last

407
00:12:30,080 --> 00:12:31,120
0,320 320,485 485,590 590,755 755,1040
entry, then I gotta parse

408
00:12:31,120 --> 00:12:32,100
0,165 165,375 375,570 570,720 720,980
every single line by line.|
|

409
00:12:33,330 --> 00:12:35,240
0,400
Yes.|
是。|

410
00:12:38,320 --> 00:12:40,080
0,610 630,1175 1175,1325 1325,1505 1505,1760
Insert deletion would be really
删除插入内容真的很难。

411
00:12:40,080 --> 00:12:40,380
0,270
hard.|
|

412
00:12:41,430 --> 00:12:43,560
0,400 630,1030 1200,1780
Consider system restrictions.|
考虑一下系统限制。|

413
00:12:43,750 --> 00:12:44,940
0,260 260,425 425,590 590,740 740,1190
She says that the insertion
她说，考虑到系统的限制，插入删除将非常可怕。所以插入不会那么糟糕，对吧？因为如果我只是附加到它的末尾，谁会在乎呢，对吗？

414
00:12:44,940 --> 00:12:45,795
0,315 315,390 390,465 465,600 600,855
deletion would be really horrible

415
00:12:45,795 --> 00:12:47,990
0,345 345,675 675,990 990,1475 1795,2195
given the system restrictions. So

416
00:12:48,790 --> 00:12:50,100
0,665 665,830 830,920 920,1070 1070,1310
insertion wouldn't be that bad,

417
00:12:50,100 --> 00:12:50,745
0,270 270,420 420,480 480,555 555,645
right? Because if I just

418
00:12:50,745 --> 00:12:51,375
0,255 255,360 360,435 435,525 525,630
append to the end of

419
00:12:51,375 --> 00:12:53,200
0,105 105,210 210,605 775,1175
it, who cares, right?|
|

420
00:13:00,200 --> 00:13:01,195
0,290 290,455 455,605 605,815 815,995
Right. So she said, what
正确的。所以她说，如果我按发行年份分类，会怎么样？

421
00:13:01,195 --> 00:13:02,260
0,90 90,300 300,555 555,765 765,1065
if I keep things sorted

422
00:13:02,260 --> 00:13:03,560
0,165 165,375 375,680
by release year?|
|

423
00:13:03,560 --> 00:13:04,700
0,240 240,555 555,795 795,990 990,1140
Then, yeah, I have to
那么，是的，我得去找它应该在哪里。

424
00:13:04,700 --> 00:13:06,215
0,260 700,1035 1035,1230 1230,1365 1365,1515
go find where it should

425
00:13:06,215 --> 00:13:07,120
0,275
be.|
|

426
00:13:07,850 --> 00:13:10,255
0,275 275,410 410,670 1920,2240 2240,2405
That would suck. You also
那会很糟糕的。你也说过更新或删除，对吗？如果我想删除条目，我会得到与查找相同的问题，我必须找到我正在寻找的东西并将其删除。

427
00:13:10,255 --> 00:13:12,240
0,210 210,575 985,1305 1305,1605 1605,1985
said update or delete, right?

428
00:13:12,380 --> 00:13:13,135
0,245 245,350 350,455 455,560 560,755
If I want to delete

429
00:13:13,135 --> 00:13:13,765
0,210 210,345 345,435 435,570 570,630
entry I get it's the

430
00:13:13,765 --> 00:13:14,515
0,135 135,285 285,405 405,585 585,750
same problem as looking for

431
00:13:14,515 --> 00:13:14,995
0,60 60,135 135,225 225,330 330,480
and I got to find

432
00:13:14,995 --> 00:13:15,610
0,120 120,210 210,375 375,495 495,615
the thing I'm looking for

433
00:13:15,610 --> 00:13:16,640
0,105 105,240 240,500
and delete it.|
|

434
00:13:17,350 --> 00:13:20,055
0,275 275,550 810,1210 2370,2630 2630,2705
Those are issues, but there
这些都是问题，但还有一些其他问题。

435
00:13:20,055 --> 00:13:20,805
0,75 75,180 180,330 330,555 555,750
are some other problems as

436
00:13:20,805 --> 00:13:21,720
0,275
well.|
|

437
00:13:27,580 --> 00:13:29,460
0,290 290,580 660,1040 1040,1420 1500,1880
Record one that is a
如果存在流，请记录该流。

438
00:13:29,460 --> 00:13:30,800
0,360 360,630 630,920
stream if there.|
|

439
00:13:31,640 --> 00:13:33,310
0,300 300,620 640,1035 1035,1395 1395,1670
In that, then it'll turn.|
穿上它，它就会转弯。|

440
00:13:33,910 --> 00:13:34,905
0,335 335,545 545,710 710,860 860,995
So your statement is that
所以你的说法是，我把所有的东西都表示为，比如说，字符串，然后如果有什么。

441
00:13:34,905 --> 00:13:36,375
0,225 225,720 720,870 870,1115 1135,1470
I'm representing everything as, say,

442
00:13:36,375 --> 00:13:37,395
0,365 385,645 645,750 750,855 855,1020
strings, and then if there's

443
00:13:37,395 --> 00:13:39,620
0,75 75,335
a what.|
|

444
00:13:40,350 --> 00:13:42,940
0,260 260,520 720,1100 1100,1840
We are in 1990.|
我们是在1990年。|

445
00:13:43,270 --> 00:13:45,285
0,365 365,730 870,1445 1445,1715 1715,2015
So if accidentally, somebody would
所以如果不小心，就会有人发动。

446
00:13:45,285 --> 00:13:46,040
0,305
start.|
|

447
00:13:49,170 --> 00:13:50,150
0,305 305,500 500,680 680,830 830,980
Yeah, correct. Yeah, so her
是啊，没错。所以她的评论是我是。

448
00:13:50,150 --> 00:13:52,220
0,195 195,500 880,1400
comment is I'm.|
|

449
00:13:52,450 --> 00:13:53,805
0,400 780,1115 1115,1190 1190,1265 1265,1355
Uh, I'm so in the
呃，我在这种情况下是文本文件，所以它是ASCII文本，但我的魔术解析函数，我还没有定义，不知何故知道，哦，这应该是一个整数，它将调用a to i，它将把VR转换成字符串到一个整数。

450
00:13:53,805 --> 00:13:54,900
0,245 415,660 660,780 780,930 930,1095
years in this case is

451
00:13:54,900 --> 00:13:56,030
0,210 210,435 435,570 570,690 690,1130
text file, so it's ascii

452
00:13:56,380 --> 00:13:58,275
0,400 750,1010 1010,1220 1220,1550 1550,1895
text, but my magic parse

453
00:13:58,275 --> 00:13:59,240
0,195 195,360 360,450 450,660 660,965
function, which I haven't defined,

454
00:13:59,440 --> 00:14:00,975
0,290 290,560 560,920 920,1265 1265,1535
is somehow knowing, oh, this

455
00:14:00,975 --> 00:14:02,790
0,210 210,515 685,945 945,1445 1555,1815
should be an integer and

456
00:14:02,790 --> 00:14:03,825
0,150 150,225 225,330 330,590 730,1035
it's going to call a

457
00:14:03,825 --> 00:14:05,535
0,135 135,365 1225,1530 1530,1590 1590,1710
to I, it's going to

458
00:14:05,535 --> 00:14:07,100
0,210 210,545 565,855 855,1290 1290,1565
cast the, the VR into

459
00:14:07,480 --> 00:14:08,780
0,305 305,530 530,695 695,800 800,1300
the string to an integer.|
|

460
00:14:09,470 --> 00:14:11,320
0,350 350,700 840,1085 1085,1330
And it the best.|
而且它是最好的。|

461
00:14:12,235 --> 00:14:12,760
0,60 60,105 105,240 240,405 405,525
If it's just a bunch
如果这只是甲板上的一堆文件。

462
00:14:12,760 --> 00:14:14,040
0,120 120,285 285,465 465,740
of files on deck.|
|

463
00:14:14,740 --> 00:14:16,960
0,260 260,515 515,760 1230,1660
A parsing error? Corrupt.|
分析错误？腐败。|

464
00:14:17,170 --> 00:14:18,180
0,60 60,120 120,195 195,440
That's a good one.|
这是个好主意。|

465
00:14:21,930 --> 00:14:22,660
0,230 230,290 290,350 350,455 455,730
What are some other problems?|
还有其他一些问题吗？|

466
00:14:23,480 --> 00:14:24,560
0,330 330,495 495,750 750,945 945,1080
3D and writing to the
3D和写入文件，它的速度很慢。

467
00:14:24,560 --> 00:14:25,880
0,225 225,540 540,920
file, it slow.|
|

468
00:14:26,110 --> 00:14:27,060
0,245 245,380 380,590 590,815 815,950
You say reading, writing the
你说阅读，写文件，我们在某种程度上涵盖了这些，对吗？

469
00:14:27,060 --> 00:14:28,200
0,230 520,795 795,915 915,1005 1005,1140
file, we sort of covered

470
00:14:28,200 --> 00:14:29,500
0,180 180,470
that, right?|
|

471
00:14:30,310 --> 00:14:30,985
0,75 75,120 120,435 435,540 540,675
If you're inserting the end,
如果你要插入尾部，没什么大不了的。

472
00:14:30,985 --> 00:14:32,340
0,165 165,300 300,575
no big deal.|
|

473
00:14:33,210 --> 00:14:34,800
0,400
Reading.|
阅读。|

474
00:14:34,810 --> 00:14:36,110
0,245 245,365 365,515 515,790 900,1300
Could it could me well.|
它能很好地帮助我吗？|

475
00:14:40,760 --> 00:14:42,055
0,260 260,520 690,965 965,1145 1145,1295
We said a comment in
我们说过，名字中的一条评论可能会破坏这一点的类似的Python包。

476
00:14:42,055 --> 00:14:43,650
0,90 90,255 255,480 480,785 1195,1595
the name might break the

477
00:14:44,180 --> 00:14:46,680
0,320 320,650 650,1040 1040,1330 2100,2500
like python packages for that.|
|

478
00:14:47,020 --> 00:14:48,320
0,400
Yes.|
是。|

479
00:14:51,110 --> 00:14:52,075
0,335 335,545 545,695 800,860 860,965
Yeah, you said you're not
是啊，你说过你现在不能使用这份文件。

480
00:14:52,075 --> 00:14:52,705
0,105 105,165 165,285 285,465 465,630
allowed to have current use

481
00:14:52,705 --> 00:14:54,580
0,120 120,225 225,485
of the file.|
|

482
00:14:55,260 --> 00:14:56,195
0,275 275,470 470,650 650,800 800,935
The writer as things get
当事情变得有点危险时，编剧，是的。

483
00:14:56,195 --> 00:14:57,960
0,60 60,135 135,665 715,1115
a little dicey, yeah.|
|

484
00:15:00,190 --> 00:15:01,500
0,380 380,635 635,860 860,1115 1115,1310
Showing the fact that the
证明了零点是。

485
00:15:01,500 --> 00:15:02,960
0,290 790,1190
zero is.|
|

486
00:15:04,360 --> 00:15:05,980
0,400
Yeah.|
嗯。|

487
00:15:28,610 --> 00:15:30,580
0,260 260,520
But it.|
但是它。|

488
00:15:30,590 --> 00:15:31,855
0,275 275,515 515,785 785,1040 1040,1265
Of the the file, the
文件中，数据库的关联方案是隐式的。

489
00:15:31,855 --> 00:15:33,565
0,135 135,255 255,515 835,1415 1435,1710
scheme of the correlation of

490
00:15:33,565 --> 00:15:36,120
0,135 135,395 865,1170 1170,1895
the database is implicitly.|
|

491
00:15:37,520 --> 00:15:40,020
0,400 1260,1505 1505,1625 1625,1900
That in the second.|
在第二种情况下。|

492
00:15:40,840 --> 00:15:42,720
0,260 260,380 380,640 930,1330
So we covered, right?|
所以我们掩饰了，对吧？|

493
00:15:43,380 --> 00:15:44,680
0,260 260,365 365,560 560,905 905,1300
So how to ensure that?|
那么，如何确保这一点呢？|

494
00:15:49,850 --> 00:15:51,560
0,305 305,500 500,665 665,940
Going back real quickly.|
很快就回来了。|

495
00:15:54,300 --> 00:15:55,420
0,380 380,605 605,695 695,815 815,1120
Right. So I have. Woo.|
正确的。我就是这么做的。哇哦。|

496
00:16:01,360 --> 00:16:02,310
0,120 120,315 315,435 435,645 645,950
But I'm gonna fix it.
但我会修好它的。我要确保我所拥有的每一个地方。

497
00:16:02,450 --> 00:16:03,220
0,260 260,350 350,410 410,560 560,770
I got to make sure

498
00:16:03,220 --> 00:16:04,330
0,135 135,345 345,630 630,855 855,1110
that every single place where

499
00:16:04,330 --> 00:16:05,820
0,210 210,470
I have.|
|

500
00:16:05,880 --> 00:16:07,280
0,400 540,785 785,935 935,1175 1175,1400
So it all gets updated
所以所有的更新都是在磁盘上进行的，操作系统或自由/开源软件不知道。

501
00:16:07,280 --> 00:16:10,060
0,165 165,440 1450,1850 2050,2340 2340,2780
the same these on disk,

502
00:16:10,560 --> 00:16:11,690
0,305 305,485 485,760 780,1025 1025,1130
the operating system or the

503
00:16:11,690 --> 00:16:13,120
0,270 270,600 600,860
foss doesn't know.|
|

504
00:16:14,090 --> 00:16:15,430
0,245 245,380 380,605 605,940 1080,1340
It just knows that, you
它只知道，你知道，你想读什么就读什么。

505
00:16:15,430 --> 00:16:16,855
0,260 940,1185 1185,1275 1275,1350 1350,1425
know, whatever you want to

506
00:16:16,855 --> 00:16:17,760
0,245
read.|
|

507
00:16:18,220 --> 00:16:19,395
0,400 480,770 770,905 905,995 995,1175
So we now in the
所以我们现在就在申请去吧。

508
00:16:19,395 --> 00:16:21,060
0,335 505,750 750,995
application to go.|
|

509
00:16:21,370 --> 00:16:22,740
0,365 365,605 605,880
We make sure.|
我们要确保。|

510
00:16:22,740 --> 00:16:24,150
0,135 135,210 210,620 940,1185 1185,1410
All the entries will we
所有的参赛作品都会让我们行动起来。

511
00:16:24,150 --> 00:16:25,500
0,380
actions.|
|

512
00:16:26,500 --> 00:16:27,435
0,275 275,410 410,560 560,725 725,935
She brought up the issue
她提出了一个问题，如果有人用它们写一年，有效的字符串。在我的示例中，我们会抛出一个解析错误。我只知道，我假设两者之间有一对一的通信。

513
00:16:27,435 --> 00:16:28,095
0,180 180,270 270,360 360,495 495,660
of what if someone ever

514
00:16:28,095 --> 00:16:28,815
0,195 195,375 375,495 495,600 600,720
writes a year with them,

515
00:16:28,815 --> 00:16:30,210
0,255 255,635 895,1215 1215,1290 1290,1395
valid string. We'd throw a

516
00:16:30,210 --> 00:16:32,190
0,300 300,560 1120,1395 1395,1635 1635,1980
parsing error in my example

517
00:16:32,190 --> 00:16:33,825
0,380 550,825 825,1035 1035,1335 1335,1635
here. I only have, I'm

518
00:16:33,825 --> 00:16:34,760
0,180 180,375 375,480 480,645 645,935
assuming there's a one one

519
00:16:34,870 --> 00:16:37,480
0,760 840,1240
correspondence between.|
|

520
00:16:38,120 --> 00:16:39,000
0,260 260,380 380,500 500,620 620,880
Could only have one artist
只能有一个艺术家，但显然我们知道情况并非如此，很多专辑都是如此。

521
00:16:39,650 --> 00:16:40,600
0,290 290,455 455,590 590,740 740,950
but obviously we know that's

522
00:16:40,600 --> 00:16:41,620
0,230 400,645 645,810 810,960 960,1020
not the case and a

523
00:16:41,620 --> 00:16:42,920
0,90 90,180 180,590
lot of albums.|
|

524
00:16:42,920 --> 00:16:43,580
0,165 165,285 285,360 360,465 465,660
So how do I go
那么，我现在如何更改我的文件以说明这一点呢？

525
00:16:43,580 --> 00:16:45,070
0,225 225,435 435,720 720,1095 1095,1490
change my files now to

526
00:16:45,990 --> 00:16:47,360
0,290 290,425 425,670
account for that?|
|

527
00:16:49,070 --> 00:16:50,850
0,320 320,640 930,1175 1175,1295 1295,1780
Lead artist who has albums.|
拥有专辑的首席艺人。|

528
00:16:53,680 --> 00:16:55,365
0,400 480,880 960,1250 1250,1460 1460,1685
Right. Well, in my example
正确的。在我的例子中，什么都不会发生。现在我有一堆专辑，其中有一个艺术家的名字，地图的结尾是。

529
00:16:55,365 --> 00:16:56,700
0,305 385,720 720,915 915,1125 1125,1335
here, nothing will happen. And

530
00:16:56,700 --> 00:16:57,240
0,150 150,285 285,375 375,450 450,540
now I got a bunch

531
00:16:57,240 --> 00:16:58,800
0,165 165,630 630,950 1210,1455 1455,1560
of albums that have an

532
00:16:58,800 --> 00:16:59,520
0,285 285,405 405,525 525,615 615,720
artist's name that has a

533
00:16:59,520 --> 00:17:00,720
0,135 135,360 360,710
map ending to.|
|

534
00:17:01,700 --> 00:17:04,045
0,365 365,730 900,1300 1830,2225 2225,2345
So the reference integrity gets
因此，基准完整性被破坏。

535
00:17:04,045 --> 00:17:05,060
0,275
broken.|
|

536
00:17:05,890 --> 00:17:06,675
0,260 260,410 410,545 545,635 635,785
We brought a lot of
我们已经带来了很多实现问题，比如你是如何发现的？

537
00:17:06,675 --> 00:17:08,115
0,300 300,695 715,1095 1095,1335 1335,1440
implementation issues already, like how

538
00:17:08,115 --> 00:17:09,020
0,60 60,135 135,395
do you find?|
|

539
00:17:09,310 --> 00:17:10,710
0,245 245,410 410,680 680,980 980,1400
In my example here, it's
在我的例子中，它是正确的，我必须对整个文件进行强力扫描，才能找到我正在寻找的东西。

540
00:17:10,710 --> 00:17:13,785
0,255 255,390 390,680 1090,2060 2800,3075
it's O N right, I

541
00:17:13,785 --> 00:17:14,610
0,150 150,270 270,450 450,660 660,825
have to do a brute

542
00:17:14,610 --> 00:17:16,290
0,260 460,1170 1170,1350 1350,1545 1545,1680
force scanot scan across the

543
00:17:16,290 --> 00:17:17,130
0,165 165,390 390,555 555,690 690,840
entire file to find the

544
00:17:17,130 --> 00:17:18,440
0,105 105,240 240,375 375,680
thing I'm looking for.|
|

545
00:17:18,600 --> 00:17:20,870
0,400 1260,1505 1505,1715 1715,2030 2030,2270
Now if I assume that
现在如果我假设在那里。

546
00:17:20,870 --> 00:17:22,080
0,440
there.|
|

547
00:17:22,090 --> 00:17:23,625
0,400 420,770 770,1100 1100,1385 1385,1535
Only one person that you
只有一个你认识的人是带着一个名字出去的。然后我就可以停下来了，因为我受够了。

548
00:17:23,625 --> 00:17:24,585
0,105 105,285 285,465 465,720 720,960
know only went out with

549
00:17:24,585 --> 00:17:25,890
0,90 90,255 255,575 925,1185 1185,1305
a given name. Then I

550
00:17:25,890 --> 00:17:27,110
0,255 255,615 615,810 810,975 975,1220
can stop because I'm done.|
|

551
00:17:28,570 --> 00:17:29,430
0,275 275,425 425,605 605,755 755,860
The same name all the
一直都是同一个名字。

552
00:17:29,430 --> 00:17:30,380
0,260
time.|
|

553
00:17:30,380 --> 00:17:31,820
0,465 465,770
Albums that.|
那张专辑。|

554
00:17:32,120 --> 00:17:32,885
0,60 60,120 120,285 285,630 630,765
I don't know jizo puts
我不知道吉佐把它拿出来了。

555
00:17:32,885 --> 00:17:33,900
0,275
out.|
|

556
00:17:34,000 --> 00:17:35,010
0,290 290,470 470,605 605,890 890,1010
Like boot lake jiza in
就像佛罗里达州的布尔特湖吉萨或类似的地方。我得继续扫描整个文件。

557
00:17:35,010 --> 00:17:35,900
0,210 210,375 375,495 495,630 630,890
Florida or something like that.

558
00:17:35,980 --> 00:17:36,855
0,260 260,350 350,440 440,605 605,875
I got to keep scanning

559
00:17:36,855 --> 00:17:38,160
0,105 105,285 285,605
the entire file.|
|

560
00:17:38,860 --> 00:17:39,250
0,90 90,165 165,240 240,300 300,390
And that's going to be
这将是n的n阶。

561
00:17:39,250 --> 00:17:41,400
0,260 760,1050 1050,1170 1170,1400
n order of n.|
|

562
00:17:42,780 --> 00:17:44,030
0,320 320,560 560,830 830,1070 1070,1250
My example here, again, I
我的例子，再一次，我有，那是在文件中运行的，但是假设我想重写它，现在运行。我想要编写一个使用相同数据库的新应用程序，但我想直接编写，因为这是最热门的东西。

563
00:17:44,030 --> 00:17:46,550
0,290 1390,1875 1875,2250 2250,2415 2415,2520
have that's, that's operating in

564
00:17:46,550 --> 00:17:48,245
0,90 90,350 1150,1410 1410,1605 1605,1695
the files, but let's say

565
00:17:48,245 --> 00:17:48,920
0,105 105,195 195,255 255,510 510,675
I want to rewrite it

566
00:17:48,920 --> 00:17:50,375
0,135 135,345 345,710 1090,1350 1350,1455
to now run. I want

567
00:17:50,375 --> 00:17:51,035
0,120 120,240 240,405 405,570 570,660
to want to write a

568
00:17:51,035 --> 00:17:51,890
0,195 195,450 450,600 600,720 720,855
new application that uses the

569
00:17:51,890 --> 00:17:52,595
0,150 150,375 375,555 555,630 630,705
same database, but I want

570
00:17:52,595 --> 00:17:53,230
0,90 90,180 180,255 255,360 360,635
to write it in rust

571
00:17:53,790 --> 00:17:54,730
0,245 245,425 425,515 515,650 650,940
because that's the hot thing.|
|

572
00:17:55,340 --> 00:17:55,955
0,195 195,315 315,495 495,540 540,615
So now I've got to
因此，现在我必须确保我的python代码中的任何信息或隐式方案现在都映射到了我的Ruust代码。但是现在，如果我的文件发生了更改，我必须确保同时更改了python代码和rust代码。

573
00:17:55,955 --> 00:17:57,610
0,135 135,330 330,540 540,845 1255,1655
go make sure that whatever

574
00:17:58,110 --> 00:17:59,315
0,320 320,500 500,905 905,1055 1055,1205
information or implicit scheme I

575
00:17:59,315 --> 00:18:00,370
0,165 165,300 300,435 435,765 765,1055
had in my python code

576
00:18:00,570 --> 00:18:01,970
0,320 320,530 530,755 755,1090 1110,1400
now maps over to my

577
00:18:01,970 --> 00:18:03,230
0,210 210,530 820,1065 1065,1155 1155,1260
rust code. But then now

578
00:18:03,230 --> 00:18:04,325
0,105 105,255 255,560 610,915 915,1095
if my files change, I've

579
00:18:04,325 --> 00:18:04,760
0,30 30,75 75,195 195,330 330,435
got to make sure I

580
00:18:04,760 --> 00:18:06,200
0,165 165,470 700,990 990,1140 1140,1440
go change both the python

581
00:18:06,200 --> 00:18:07,030
0,150 150,255 255,345 345,510 510,830
code and the rust code.|
|

582
00:18:07,610 --> 00:18:08,590
0,290 290,425 425,530 530,755 755,980
Maybe, say the guy, the
也许，比方说，这个家伙，巨蟒代码，你知道，在监狱里，我们无法更新它。

583
00:18:08,590 --> 00:18:10,330
0,285 285,560 880,1125 1125,1370 1480,1740
python code, you know, is

584
00:18:10,330 --> 00:18:12,370
0,135 135,410 850,1250 1450,1725 1725,2040
in jail and we can't

585
00:18:12,370 --> 00:18:13,540
0,195 195,470
update it.|
|

586
00:18:13,830 --> 00:18:15,140
0,400 450,850 900,1145 1145,1220 1220,1310
Right now, what do I
现在，我该怎么办？

587
00:18:15,140 --> 00:18:16,520
0,260
do?|
|

588
00:18:16,650 --> 00:18:18,040
0,230 230,305 305,550
Going to break.|
快要崩溃了。|

589
00:18:18,380 --> 00:18:19,640
0,260 260,380 380,485 485,730
What if the APP?|
如果这个应用程序呢？|

590
00:18:19,850 --> 00:18:20,920
0,260 260,380 380,500 500,740 740,1070
Even on the same machine
即使在同一台机器上，我的python代码运行权限就像一个单独的机器上的微服务一样运行，我如何访问另一个机器？我怎么才能访问那个文件？

591
00:18:20,920 --> 00:18:21,865
0,240 240,405 405,705 705,825 825,945
where my python code is

592
00:18:21,865 --> 00:18:23,125
0,275 415,885 885,1020 1020,1155 1155,1260
running rights running like a

593
00:18:23,125 --> 00:18:24,070
0,525 525,615 615,720 720,840 840,945
microservice on a on a

594
00:18:24,070 --> 00:18:25,360
0,165 165,470 850,1095 1095,1185 1185,1290
separate box, how do I

595
00:18:25,360 --> 00:18:26,610
0,240 240,555 555,765 765,945 945,1250
get access to that other?

596
00:18:27,140 --> 00:18:27,910
0,245 245,320 320,410 410,590 590,770
How do I get access

597
00:18:27,910 --> 00:18:29,280
0,75 75,195 195,500
to that file?|
|

598
00:18:30,730 --> 00:18:32,480
0,260 260,520
And then?|
后来怎么样了？|

599
00:18:32,670 --> 00:18:33,700
0,260 260,440 440,620 620,755 755,1030
What happens if you have?|
如果你做到了，会发生什么？|

600
00:18:35,270 --> 00:18:36,205
0,290 290,545 545,665 665,785 785,935
Two threads trying to write
两个线程试图写入相同的文件，相同。

601
00:18:36,205 --> 00:18:36,970
0,120 120,210 210,360 360,585 585,765
to the same file, the

602
00:18:36,970 --> 00:18:37,760
0,260
same.|
|

603
00:18:38,360 --> 00:18:39,535
0,365 365,590 590,815 815,1055 1055,1175
Well, you can rely on
好的，你可以依靠操作系统来做。

604
00:18:39,535 --> 00:18:40,590
0,150 150,345 345,570 570,780 780,1055
the operating system to do.|
|

605
00:18:42,470 --> 00:18:43,150
0,290 290,425 425,515 515,605 605,680
But again, if I have
但同样，如果我有10亿条记录，我想要更新其中的一条记录，不想锁定10亿条记录，只需更新这条记录。

606
00:18:43,150 --> 00:18:44,170
0,120 120,360 360,705 705,930 930,1020
a billion records and I

607
00:18:44,170 --> 00:18:44,845
0,90 90,210 210,390 390,555 555,675
want to update one of

608
00:18:44,845 --> 00:18:45,460
0,120 120,300 300,360 360,465 465,615
them, don't want to lock

609
00:18:45,460 --> 00:18:47,155
0,150 150,410 940,1230 1230,1470 1470,1695
a billion billion records, just

610
00:18:47,155 --> 00:18:48,220
0,120 120,210 210,315 315,575
do that one up.|
|

611
00:18:48,230 --> 00:18:49,435
0,605 605,695 695,830 830,1025 1025,1205
Ideally when I fill more
理想情况下，当我填充更多的细粒时，可以有多个线程。

612
00:18:49,435 --> 00:18:50,670
0,195 195,515 565,825 825,960 960,1235
fine grain that can have

613
00:18:50,960 --> 00:18:52,440
0,380 380,880
multiple threads.|
|

614
00:18:54,970 --> 00:18:58,120
0,400 540,815 815,1090 1680,2080
Not anybody really was.|
并不是每个人都是。|

615
00:18:58,120 --> 00:18:58,765
0,195 195,270 270,390 390,540 540,645
How to make sure that
如果发生崩溃，如何确保我们的数据安全？

616
00:18:58,765 --> 00:19:00,115
0,120 120,270 270,435 435,725 1105,1350
our data is safe if

617
00:19:00,190 --> 00:19:01,500
0,75 75,180 180,440
there's a crash?|
|

618
00:19:04,200 --> 00:19:05,320
0,400
Right.|
正确的。|

619
00:19:06,460 --> 00:19:09,000
0,395 395,790 900,1300 1980,2315 2315,2540
And then I crash before
然后我在F同步之前崩溃了。

620
00:19:09,000 --> 00:19:10,320
0,150 150,315 315,710
I F sync.|
|

621
00:19:10,480 --> 00:19:11,430
0,260 260,365 365,485 485,725 725,950
Some of that data actually
其中一些数据实际上可能已经得到了那张磁盘。所以当我的，我的。

622
00:19:11,430 --> 00:19:12,560
0,120 120,225 225,345 345,630 630,1130
might have gotten thata disk.

623
00:19:12,970 --> 00:19:15,220
0,245 245,350 350,610 1170,1570
So when my, my.|
|

624
00:19:15,350 --> 00:19:17,500
0,275 275,550 900,1300
I must twice.|
我必须再来一次。|

625
00:19:18,530 --> 00:19:19,450
0,260 260,485 485,710 710,815 815,920
Which is not what I
这不是我想要的，对吧？因为现在我破坏了数据。

626
00:19:19,450 --> 00:19:20,215
0,180 180,390 390,540 540,645 705,765
want, right? Because now I've

627
00:19:20,215 --> 00:19:21,440
0,300 300,545
corrupted data.|
|

628
00:19:22,760 --> 00:19:24,330
0,365 365,590 590,725 725,1000 1170,1570
Or now my database is
或者现在我的数据库真的很大，有很多人想访问它。我如何确保可以跨多台计算机进行复制和复制，以便它们可以同时为所有读取提供服务？

629
00:19:24,500 --> 00:19:25,645
0,290 290,515 515,815 815,1040 1040,1145
is really big and I

630
00:19:25,645 --> 00:19:26,455
0,245 295,540 540,630 630,705 705,810
have a lot of people

631
00:19:26,455 --> 00:19:27,775
0,120 120,285 285,480 480,755 1075,1320
want to access it. How

632
00:19:27,775 --> 00:19:28,680
0,75 75,165 165,345 345,585 585,905
do I make sure that

633
00:19:29,120 --> 00:19:30,685
0,275 275,550 600,1100 1100,1205 1205,1565
I can duplicate and replicate

634
00:19:30,685 --> 00:19:32,185
0,165 165,435 435,815 1165,1410 1410,1500
across multiple machines so they

635
00:19:32,185 --> 00:19:33,370
0,90 90,285 285,600 600,1050 1050,1185
can all service reads at

636
00:19:33,370 --> 00:19:34,140
0,120 120,380
the same?|
|

637
00:19:34,210 --> 00:19:35,415
0,245 245,470 470,785 785,1025 1025,1205
So my application can scale
这样我的应用程序就可以向上扩展了。

638
00:19:35,415 --> 00:19:36,240
0,275
up.|
|

639
00:19:37,160 --> 00:19:37,705
0,245 245,335 335,410 410,470 470,545
Files aren't going to do
文件不会帮我做到这一点。

640
00:19:37,705 --> 00:19:38,740
0,120 120,240 240,485
that for me.|
|

641
00:19:39,780 --> 00:19:40,775
0,245 245,365 365,485 485,695 695,995
So this is just a
所以这只是一小部分。

642
00:19:40,775 --> 00:19:42,580
0,315 315,795 795,1055
quick smattering of.|
|

643
00:19:43,060 --> 00:19:44,620
0,275 275,470 470,790
Is management system.|
是管理体制。|

644
00:19:44,620 --> 00:19:45,955
0,320 610,900 900,1065 1065,1200 1200,1335
Right. And why of course
正确的。当然，在我看来，为什么是这样。

645
00:19:45,955 --> 00:19:47,040
0,150 150,420 420,675 675,810 810,1085
like this, in my opinion.|
|

646
00:19:48,390 --> 00:19:50,135
0,320 320,500 500,760 900,1300 1380,1745
So as our agent, management
因此，作为我们的代理，管理系统将成为允许应用程序在数据库中存储和分析信息的软件。

647
00:19:50,135 --> 00:19:50,960
0,330 330,570 570,675 675,735 735,825
system is going to be

648
00:19:50,960 --> 00:19:52,550
0,225 225,590 850,1200 1200,1425 1425,1590
the the software that can

649
00:19:52,550 --> 00:19:54,830
0,290 1060,1460 1540,1890 1890,2130 2130,2280
allow applications to store and

650
00:19:54,830 --> 00:19:56,170
0,410 460,795 795,975 975,1080 1080,1340
analyze information in a database.|
|

651
00:19:57,040 --> 00:19:58,740
0,365 365,1115 1115,1385 1385,1580 1580,1700
And ideally not have to
理想情况下，不必担心我们刚刚谈到的所有事情。但情况并不总是这样。这其中有很多取舍。

652
00:19:58,740 --> 00:19:59,970
0,180 180,480 480,795 795,990 990,1230
worry about all the things

653
00:19:59,970 --> 00:20:01,220
0,375 375,615 615,720 720,915 915,1250
that we just talked about.

654
00:20:01,780 --> 00:20:02,685
0,350 350,485 485,650 650,770 770,905
That's not always been the

655
00:20:02,685 --> 00:20:04,080
0,275 445,780 780,930 930,1110 1110,1395
case. There's many trade offs

656
00:20:04,080 --> 00:20:06,200
0,290 1150,1550
to the.|
|

657
00:20:09,590 --> 00:20:11,245
0,245 245,490 660,1190 1190,1415 1415,1655
You know, guarantees in exchange
你知道，保证换来的是表现。

658
00:20:11,245 --> 00:20:12,680
0,225 225,545
for performance.|
|

659
00:20:13,210 --> 00:20:14,480
0,350 350,560 560,725 725,950 950,1270
And a general purpose system
而通用系统通常允许你调整，你知道，这些权衡实际上是什么。

660
00:20:14,560 --> 00:20:16,700
0,400 1170,1445 1445,1580 1580,1790 1790,2140
typically allow you to adjust,

661
00:20:17,140 --> 00:20:18,270
0,245 245,365 365,530 530,725 725,1130
you know, what those tradeoffs

662
00:20:18,270 --> 00:20:19,280
0,180 180,440
actually are.|
|

663
00:20:21,590 --> 00:20:23,380
0,275 275,500 500,850
And so a.|
所以。|

664
00:20:23,380 --> 00:20:25,300
0,285 285,585 585,980 1240,1635 1635,1920
The, the data system is
数据系统将定义或指定Inherentt，以及如何创建数据库、如何查询数据库、如何更改、如何管理数据库、进行语音更改以及其他事情。

665
00:20:25,300 --> 00:20:27,780
0,135 135,380 820,1220 1600,1920 1920,2480
going to define or specify

666
00:20:28,700 --> 00:20:30,790
0,500 500,730 1470,1790 1790,1970 1970,2090
inherentit and how you can

667
00:20:30,790 --> 00:20:31,990
0,180 180,390 390,930 930,1095 1095,1200
go create databases, how you

668
00:20:31,990 --> 00:20:33,355
0,105 105,330 330,650 850,1170 1170,1365
can query them, how you

669
00:20:33,355 --> 00:20:35,305
0,275 565,965 1135,1380 1380,1515 1515,1950
can changes, you can administer

670
00:20:35,305 --> 00:20:36,745
0,120 120,675 675,930 930,1200 1200,1440
the databases, making, making speech

671
00:20:36,745 --> 00:20:38,140
0,195 195,330 330,465 465,755
changes and other things.|
|

672
00:20:38,630 --> 00:20:40,600
0,425 425,530 530,1180 1320,1700 1700,1970
Insert a correspondence of some
插入某种数据模型的对应关系。

673
00:20:40,600 --> 00:20:42,240
0,120 120,255 255,495 495,830
kind of data model.|
|

674
00:20:42,610 --> 00:20:43,485
0,215 215,290 290,470 470,695 695,875
Well, I say also too
我也要说，不管你是否真的去构建数据库系统，这又是你，在你的日常工作中，这是很重要的，知道你去了哪里，因为在某个时候，你会成为一些构建一些应用程序的人。你必须决定我想要使用哪种数据库管理方式，这应该始终是你不想做我的选择的第一选择。

675
00:20:43,485 --> 00:20:44,880
0,150 150,300 300,525 525,875 1165,1395
that this is again you

676
00:20:44,880 --> 00:20:45,630
0,75 75,225 225,450 450,645 645,750
no matter whether you go

677
00:20:45,630 --> 00:20:46,515
0,90 90,300 300,510 510,660 660,885
off and actually build database

678
00:20:46,515 --> 00:20:48,480
0,335 1345,1560 1560,1650 1650,1830 1830,1965
systems, you know in in

679
00:20:48,480 --> 00:20:49,190
0,90 90,225 225,330 330,435 435,710
your day to day job,

680
00:20:49,720 --> 00:20:50,505
0,275 275,395 395,485 485,545 545,785
this is to be, its

681
00:20:50,505 --> 00:20:51,330
0,255 255,420 420,495 495,645 645,825
important again to know where

682
00:20:51,330 --> 00:20:52,395
0,120 120,330 330,615 615,855 855,1065
you go because at some

683
00:20:52,395 --> 00:20:53,235
0,210 210,390 390,450 450,600 600,840
point you're gonna be some

684
00:20:53,235 --> 00:20:54,180
0,210 210,435 435,705 705,855 855,945
build some application. You have

685
00:20:54,180 --> 00:20:55,890
0,225 225,590 790,1065 1065,1290 1290,1710
to decide what database managementception

686
00:20:55,890 --> 00:20:57,195
0,150 150,255 255,360 360,620 1060,1305
I want to use and

687
00:20:57,195 --> 00:20:57,855
0,120 120,255 255,375 375,525 525,660
that should always be sort

688
00:20:57,855 --> 00:20:58,995
0,105 105,285 285,605 745,1005 1005,1140
the first choice that like

689
00:20:58,995 --> 00:20:59,955
0,150 150,390 390,480 480,705 705,960
you don't want to do

690
00:20:59,955 --> 00:21:00,600
0,275
my.|
|

691
00:21:00,830 --> 00:21:02,840
0,275 275,550
But here.|
但在这里。|

692
00:21:04,520 --> 00:21:05,980
0,230 230,320 320,425 425,670
A lot of problems.|
有很多问题。|

693
00:21:06,410 --> 00:21:07,060
0,245 245,335 335,440 440,530 530,650
I was like, do you
我当时就想，你觉得你喜欢创业吗？

694
00:21:07,060 --> 00:21:07,765
0,135 135,255 255,390 390,540 540,705
think you like at a

695
00:21:07,765 --> 00:21:08,720
0,455
startup?|
|

696
00:21:08,730 --> 00:21:09,830
0,400 450,785 785,875 875,980 980,1100
And you're trying to build
你正在尝试构建一个应用程序，一个应用程序。

697
00:21:09,830 --> 00:21:11,960
0,225 225,495 495,800 970,1370
an application, a application.|
|

698
00:21:13,360 --> 00:21:14,040
0,320 320,470 470,530 530,590 590,680
Startup doesn't have a lot
初创公司没有很多钱，你没有压力，也没有时间试着把东西拿出来，把第一个版本推出。你真的想花时间确保你的数据是安全的，并且发生崩溃吗？

699
00:21:14,040 --> 00:21:15,375
0,105 105,315 315,615 615,950 1000,1335
of money your your your

700
00:21:15,375 --> 00:21:16,230
0,270 270,375 375,555 555,735 735,855
stressed or time to try

701
00:21:16,230 --> 00:21:16,935
0,150 150,315 315,450 450,585 585,705
to get things out the

702
00:21:16,935 --> 00:21:17,670
0,180 180,360 360,480 480,600 600,735
door to get the first

703
00:21:17,670 --> 00:21:18,840
0,180 180,330 330,435 435,680 940,1170
version out the door. Do

704
00:21:18,840 --> 00:21:19,335
0,90 90,240 240,360 360,405 405,495
you really want to be

705
00:21:19,335 --> 00:21:20,475
0,150 150,300 300,570 570,915 915,1140
spending your time making sure

706
00:21:20,475 --> 00:21:21,345
0,150 150,300 300,480 480,675 675,870
that your data is safe

707
00:21:21,345 --> 00:21:22,100
0,135 135,285 285,360 360,480 480,755
and there's is a crash?|
|

708
00:21:23,560 --> 00:21:24,450
0,245 245,350 350,455 455,605 605,890
Because in the end, that's
因为归根结底，这并不是您的业务或应用程序的一个显著特征。没有人关心，如果你真的丢失了数据，所以如果你崩溃了，你不会丢失被认为是这样的数据。

709
00:21:24,450 --> 00:21:25,815
0,135 135,330 330,750 750,1005 1005,1365
not a distinguishing feature of

710
00:21:25,815 --> 00:21:27,080
0,270 270,510 510,720 720,915 915,1265
your business or your application.

711
00:21:27,100 --> 00:21:28,310
0,365 365,770 770,875 875,965 965,1210
Nobody cares that if you

712
00:21:28,330 --> 00:21:29,690
0,260 260,410 410,700 870,1115 1115,1360
actually lose data that you

713
00:21:29,770 --> 00:21:30,750
0,320 320,500 500,635 635,815 815,980
so if you crash, you

714
00:21:30,750 --> 00:21:32,220
0,225 225,360 360,650 850,1230 1230,1470
don't lose data that's considered

715
00:21:32,220 --> 00:21:33,160
0,350
like.|
|

716
00:21:33,160 --> 00:21:34,040
0,105 105,350
You know.|
你知道。|

717
00:21:34,750 --> 00:21:36,855
0,290 290,530 530,875 875,1270 1740,2105
This point in in modern
在现代计算系统中，这一点是存在的，因此，与其花费所有时间试图租用您自己的定制数据库系统，您应该只是用完一些东西。

718
00:21:36,855 --> 00:21:38,655
0,315 315,575 1105,1365 1365,1515 1515,1800
computing systems and so rather

719
00:21:38,655 --> 00:21:40,050
0,395 685,960 960,1080 1080,1200 1200,1395
than spending all this time

720
00:21:40,050 --> 00:21:40,875
0,165 165,255 255,465 465,675 675,825
trying to rent your own

721
00:21:40,875 --> 00:21:42,720
0,390 390,660 660,1025 1525,1770 1770,1845
bespoke database system, you should

722
00:21:42,720 --> 00:21:44,000
0,105 105,270 270,450 450,740
just use something up.|
|

723
00:21:44,680 --> 00:21:46,190
0,335 335,530 530,665 665,940 1110,1510
Chances are, it po us
很有可能，它会让我们和。

724
00:21:46,810 --> 00:21:48,640
0,400
and.|
|

725
00:21:48,640 --> 00:21:49,870
0,150 150,210 210,270 270,500 790,1230
Out of a hundred that
在一百种情况下，这是你应该使用的第一选择，也许是强光。

726
00:21:49,870 --> 00:21:50,695
0,300 300,375 375,495 495,660 660,825
that's the first choice you

727
00:21:50,695 --> 00:21:52,650
0,135 135,395 955,1335 1335,1650 1650,1955
should use, maybe steep light.|
|

728
00:21:53,550 --> 00:21:54,395
0,275 275,440 440,605 605,725 725,845
But post cuts will get
但裁员会让你走得很远。

729
00:21:54,395 --> 00:21:58,160
0,210 210,545 1255,1655
you pretty far.|
|

730
00:21:59,835 --> 00:22:00,590
0,60 60,165 165,330 330,480 480,755
That I'm talking about here.|
我在这里说的就是。|

731
00:22:03,610 --> 00:22:05,250
0,400 750,1025 1025,1175 1175,1400 1400,1640
So again, a data model
同样，数据模型也将是我们将如何表示的。

732
00:22:05,250 --> 00:22:06,270
0,135 135,225 225,315 315,560 700,1020
is going to be, again,

733
00:22:06,270 --> 00:22:06,950
0,195 195,360 360,405 405,450 450,680
how we're going to represent

734
00:22:07,810 --> 00:22:09,120
0,400
a.|
|

735
00:22:09,120 --> 00:22:10,860
0,710 760,1125 1125,1365 1365,1560 1560,1740
Entities or the collection of
实体或我们数据库中的数据集合。

736
00:22:10,860 --> 00:22:12,840
0,260 340,600 600,735 735,1010
data in our database.|
|

737
00:22:12,970 --> 00:22:14,680
0,400
So.|
所以。|

738
00:22:15,910 --> 00:22:18,390
0,400 1470,1745 1745,1955 1955,2255 2255,2480
So the data model is
因此，数据模型就是这种高级抽象。

739
00:22:18,390 --> 00:22:20,540
0,165 165,390 390,710 760,1400
this high level abstraction.|
|

740
00:22:21,100 --> 00:22:23,145
0,545 545,785 785,980 980,1270 1710,2045
Specifies how we represent individual
指定我们如何表示各个实体以及可能与之相关的实体。

741
00:22:23,145 --> 00:22:25,310
0,605 865,1265 1315,1650 1650,1875 1875,2165
entities and potentially that relate

742
00:22:25,570 --> 00:22:26,440
0,400
to.|
|

743
00:22:26,670 --> 00:22:27,500
0,275 275,395 395,545 545,665 665,830
And again, we're trying to
再一次，我们试图对真实世界的某些方面进行建模。学生上课，学生拿到成绩。他们在自己的国内部门。

744
00:22:27,500 --> 00:22:28,565
0,270 270,615 615,840 840,960 960,1065
model some aspect of the

745
00:22:28,565 --> 00:22:29,830
0,135 135,390 390,705 705,960 960,1265
real world. Students take classes,

746
00:22:29,880 --> 00:22:31,925
0,290 290,580 600,920 920,1270 1770,2045
students are get grades. They're

747
00:22:31,925 --> 00:22:33,820
0,165 165,515 655,990 990,1325
in their home department.|
|

748
00:22:35,090 --> 00:22:36,460
0,260 260,395 395,650 650,1160 1160,1370
And then the schema is
然后，模式将表示、定义或描述。

749
00:22:36,460 --> 00:22:37,870
0,135 135,210 210,440 640,1040 1120,1410
going to represent the, the

750
00:22:37,870 --> 00:22:40,345
0,290 670,930 930,1155 1155,1520 2080,2475
definition or the description of

751
00:22:40,345 --> 00:22:41,540
0,395
the.|
|

752
00:22:41,540 --> 00:22:43,715
0,300 300,680 880,1185 1185,1820 1840,2175
Of what those entities in
我们的数据库数据模型中的这些实体是什么样子。

753
00:22:43,715 --> 00:22:45,710
0,335 655,975 975,1295 1615,1875 1875,1995
our data model of our

754
00:22:45,710 --> 00:22:47,140
0,255 255,540 540,830
database look like.|
|

755
00:22:47,770 --> 00:22:49,455
0,400 480,875 875,1175 1175,1430 1430,1685
Student names you have have
你的学生姓名有出生日期、电子邮件地址等等。您将在我们的模式中指定所有这些，然后我们，我们将根据该模式实例化基于数据模型的数据库实例。

756
00:22:49,455 --> 00:22:50,895
0,210 210,465 465,815 865,1140 1140,1440
birth dates, have email addresses

757
00:22:50,895 --> 00:22:52,290
0,135 135,270 270,545 985,1230 1230,1395
and so forth. You would

758
00:22:52,290 --> 00:22:53,700
0,405 405,570 570,735 735,1010 1030,1410
specify all of those in

759
00:22:53,700 --> 00:22:55,170
0,315 315,800 910,1155 1155,1260 1260,1470
our schema, and then we,

760
00:22:55,170 --> 00:22:56,880
0,180 180,345 345,890 970,1590 1590,1710
we would instantiate instances of

761
00:22:56,880 --> 00:22:58,470
0,105 105,350 1030,1335 1335,1485 1485,1590
a database based on a

762
00:22:58,470 --> 00:23:00,020
0,165 165,450 450,765 765,1100 1150,1550
data model according to the

763
00:23:00,100 --> 00:23:01,060
0,520
schema.|
|

764
00:23:02,730 --> 00:23:03,470
0,245 245,440 440,515 515,635 635,740
So there's a bunch of
因此，市场上有很多不同的数据模型。这就是说，这可以追溯到数据库的最开始。人们意识到，哦，我们需要一个在，在数据库中。

765
00:23:03,470 --> 00:23:04,460
0,230 280,570 570,780 780,930 930,990
different data models that are

766
00:23:04,460 --> 00:23:05,540
0,105 105,380 490,735 735,855 855,1080
out there. So this goes,

767
00:23:05,540 --> 00:23:06,455
0,270 270,495 495,705 705,840 840,915
this goes back to the

768
00:23:06,455 --> 00:23:08,000
0,195 195,480 480,720 720,1290 1290,1545
very beginning of databases. People

769
00:23:08,000 --> 00:23:09,110
0,180 180,410 550,825 825,975 975,1110
sort of realize, oh, we

770
00:23:09,110 --> 00:23:11,000
0,105 105,350 1030,1305 1305,1545 1545,1890
need a is in, is

771
00:23:11,000 --> 00:23:13,000
0,240 240,375 375,650
in a database.|
|

772
00:23:13,310 --> 00:23:16,560
0,400 870,1270 1620,2020 2040,2440
So most systems today?|
那么，今天的大多数系统？|

773
00:23:16,980 --> 00:23:17,975
0,305 305,485 485,635 635,815 815,995
Something that looks like like
有些东西看起来像关系数据库，关系关系数据模型，还有一种叫做对象关系Postgres的东西，它只是意味着你可以用用户定义的类型来扩展你的Rel关系。但在最高水平上，大多数数据系统都将是关系型的。我认为还有那个数据库引擎，那个排名。

774
00:23:17,975 --> 00:23:20,000
0,105 105,345 345,965 1225,1680 1680,2025
the relational databases, relational relational

775
00:23:20,000 --> 00:23:22,190
0,225 225,530 1270,1680 1680,1890 1890,2190
data model, there's things called

776
00:23:22,190 --> 00:23:24,185
0,240 240,560 1120,1590 1590,1815 1815,1995
object relational postgres is it

777
00:23:24,185 --> 00:23:24,845
0,120 120,285 285,420 420,510 510,660
just means you can have

778
00:23:24,845 --> 00:23:26,500
0,270 270,540 540,845 985,1320 1320,1655
user defined types to extend

779
00:23:26,550 --> 00:23:27,490
0,260 260,380 380,470 470,620 620,940
what your rel relations are.

780
00:23:29,580 --> 00:23:31,445
0,230 230,320 320,425 425,910 1500,1865
But at a higho most

781
00:23:31,445 --> 00:23:33,170
0,285 285,605 1195,1470 1470,1590 1590,1725
data systems are going be

782
00:23:33,170 --> 00:23:34,760
0,380 760,1035 1035,1185 1185,1395 1395,1590
relational. I think there's that

783
00:23:34,760 --> 00:23:36,250
0,330 330,590 640,900 900,1230 1230,1490
DB engines, the ranking that.|
|

784
00:23:36,860 --> 00:23:38,530
0,245 245,395 395,620 620,940 1410,1670
The most popular datab I
我认为五个最流行的数据库中有四个都将是关系型Mongo，其中最受欢迎的数据就是Fire。

785
00:23:38,530 --> 00:23:39,175
0,135 135,300 300,450 450,555 555,645
think the four out of

786
00:23:39,175 --> 00:23:40,540
0,135 135,420 420,690 690,885 885,1365
the five most popular databases

787
00:23:40,540 --> 00:23:41,230
0,120 120,210 210,285 285,465 465,690
are going to be all

788
00:23:41,230 --> 00:23:43,240
0,350 790,1365 1365,1605 1605,1785 1785,2010
relational mongo is, is the

789
00:23:43,240 --> 00:23:44,120
0,350
fire.|
|

790
00:23:45,320 --> 00:23:46,030
0,275 275,440 440,500 500,605 605,710
Then there's a bunch of
然后还有一堆其他的数据模型，在某种程度上属于这个总括术语。

791
00:23:46,030 --> 00:23:47,935
0,75 75,240 240,465 465,770 1600,1905
these other data models that

792
00:23:47,935 --> 00:23:48,760
0,135 135,240 240,435 435,660 660,825
sort of fall under this

793
00:23:48,760 --> 00:23:50,320
0,435 435,710
umbrella term.|
|

794
00:23:51,790 --> 00:23:52,815
0,365 365,560 560,635 635,755 755,1025
A thing or no sql
不管有没有SQL系统，它通常是文档、数据模型或json。

795
00:23:52,815 --> 00:23:54,090
0,240 240,510 510,705 705,1005 1005,1275
systems, it usually the document,

796
00:23:54,090 --> 00:23:56,400
0,225 225,530 550,840 840,1340
data model or json.|
|

797
00:23:56,680 --> 00:23:58,500
0,245 245,350 350,610 930,1565 1565,1820
One of these, cassandra, essentially
其中之一，卡桑德拉，本质上已经成为了其中之一，嗯，但有关键的价值商店，数据库，然后这种类型的家庭是什么？

798
00:23:58,500 --> 00:23:59,400
0,300 300,540 540,705 705,810 810,900
become, has become one of

799
00:23:59,400 --> 00:24:01,335
0,230 700,1100 1390,1635 1635,1800 1800,1935
these, um, but there's key

800
00:24:01,335 --> 00:24:04,125
0,225 225,575 1045,1805 2365,2625 2625,2790
value stores, databases, and then

801
00:24:04,125 --> 00:24:05,805
0,305 835,1200 1200,1410 1410,1545 1545,1680
what family is this sort

802
00:24:05,805 --> 00:24:07,180
0,120 120,695
of bestized?|
|

803
00:24:23,610 --> 00:24:25,400
0,455 455,760 840,1400 1400,1580 1580,1790
There's array matrix and vector
有数组矩阵和矢量数据数据模型。它们主要用于机器学习或科学应用。我想像是一颗卫星绕着我转，拍了一大堆照片。您可以将其存储为数组。

804
00:24:25,400 --> 00:24:26,960
0,290 310,600 600,890 1150,1425 1425,1560
data data models. These are

805
00:24:26,960 --> 00:24:29,290
0,260 280,680 760,1160 1720,2025 2025,2330
primarily used for machine learning

806
00:24:29,490 --> 00:24:32,390
0,290 290,580 1440,1840 2520,2780 2780,2900
or scientific applications. I think

807
00:24:32,390 --> 00:24:33,245
0,105 105,180 180,300 300,705 705,855
of like a satellite going

808
00:24:33,245 --> 00:24:33,770
0,135 135,255 255,360 360,435 435,525
around and taking a bunch

809
00:24:33,770 --> 00:24:34,865
0,120 120,380 550,795 795,930 930,1095
of photos. You could store

810
00:24:34,865 --> 00:24:37,700
0,210 210,390 390,540 540,845
that as an array.|
|

811
00:24:37,800 --> 00:24:40,025
0,590 590,860 860,1400 1400,1690 1980,2225
Tensors to trainsat model, you
训练模型的张量，你也会把它表示为a。所以有专门的数据库，可以表示本机表示的数组。

812
00:24:40,025 --> 00:24:41,255
0,105 105,360 360,755 775,1035 1035,1230
would represent that as a

813
00:24:41,255 --> 00:24:42,500
0,210 210,485 655,915 915,1035 1035,1245
as well. And so there's

814
00:24:42,500 --> 00:24:44,020
0,390 390,710 850,1125 1125,1260 1260,1520
specialized database that can represent

815
00:24:44,640 --> 00:24:46,700
0,470 470,730 960,1360
natively represent array.|
|

816
00:24:47,510 --> 00:24:48,580
0,245 245,485 485,770 770,935 935,1070
And then these ones at
然后这些最后的老年人，更高，更多的网络和多元的价值。

817
00:24:48,580 --> 00:24:49,440
0,105 105,270 270,435 435,570 570,860
the end for old people,

818
00:24:50,090 --> 00:24:51,250
0,260 260,485 485,725 725,950 950,1160
hier, toical network and multi

819
00:24:51,250 --> 00:24:52,400
0,320
value.|
|

820
00:24:53,970 --> 00:24:55,565
0,400 510,815 815,1010 1010,1475 1475,1595
These are considered obsolete at
在这一点上，这些被认为是过时的。

821
00:24:55,565 --> 00:24:57,700
0,135 135,425
this point.|
|

822
00:24:57,860 --> 00:24:58,615
0,245 245,365 365,485 485,605 605,755
Because I still make a
因为我每一次都能赚很多钱。

823
00:24:58,615 --> 00:24:59,760
0,150 150,285 285,545 565,855 855,1145
lot of money use each.|
|

824
00:25:01,740 --> 00:25:02,945
0,350 350,635 635,875 875,1040 1040,1205
The hi model is using
HI模型使用的是国际货币基金组织。

825
00:25:02,945 --> 00:25:04,080
0,545
IMF.|
|

826
00:25:05,240 --> 00:25:06,580
0,515 515,650 650,890 890,1160 1160,1340
IBM first database system that
IBM是他们建造的第一个数据库系统。

827
00:25:06,580 --> 00:25:07,960
0,150 150,440
they built.|
|

828
00:25:07,960 --> 00:25:09,280
0,195 195,315 315,495 495,800 1060,1320
Of all the parts for
在经济的所有组成部分中。

829
00:25:09,280 --> 00:25:10,680
0,260 340,740
the economy.|
|

830
00:25:12,440 --> 00:25:13,940
0,730
1960.|
1960年。|

831
00:25:18,050 --> 00:25:20,335
0,320 320,640 720,1100 1100,1480 2040,2285
Every ATM basically uses, I
当你与银行沟通时，每个自动取款机基本上都使用，我的意思是不，而不是盒子本身。

832
00:25:20,335 --> 00:25:21,115
0,105 105,255 255,420 420,555 555,780
mean not, not the box

833
00:25:21,115 --> 00:25:22,090
0,255 255,420 420,555 555,705 705,975
itself when when you communicate

834
00:25:22,090 --> 00:25:24,020
0,225 225,470 640,1040
to the bank.|
|

835
00:25:24,020 --> 00:25:24,725
0,195 195,270 270,360 360,540 540,705
All of these systems are
所有这些系统都在使用IMS。

836
00:25:24,725 --> 00:25:26,040
0,150 150,665
using ims.|
|

837
00:25:26,140 --> 00:25:28,680
0,380 380,760
So pretty.|
太漂亮了。|

838
00:25:28,680 --> 00:25:29,850
0,320 400,645 645,765 765,975 975,1170
And the us government still
美国政府仍在使用imax。

839
00:25:29,850 --> 00:25:30,960
0,195 195,650
uses imax.|
|

840
00:25:32,090 --> 00:25:33,280
0,320 320,560 560,770 770,950 950,1190
And so, so these things
所以，这些东西是存在的。但如果你是全新的，部分你不是，你不会说我会使用IMS或我会使用IDMS，就像。

841
00:25:33,280 --> 00:25:34,540
0,350 430,690 690,825 825,1065 1065,1260
exist. But if you're brand

842
00:25:34,540 --> 00:25:35,125
0,195 195,345 345,420 420,480 480,585
new, part of it you're

843
00:25:35,125 --> 00:25:35,740
0,90 90,285 285,375 375,480 480,615
not, you're not gonna say

844
00:25:35,740 --> 00:25:36,580
0,210 210,270 270,330 330,435 435,840
I'm going to use ims

845
00:25:36,580 --> 00:25:37,270
0,150 150,285 285,480 480,570 570,690
or I'm, I'm gonna use

846
00:25:37,270 --> 00:25:38,680
0,495 495,830
idms like.|
|

847
00:25:38,905 --> 00:25:39,535
0,45 45,195 195,405 405,540 540,630
You'd be insane to do
你要是那样做肯定是疯了，但是再来一次。

848
00:25:39,535 --> 00:25:41,300
0,245 355,630 630,905
that, but again.|
|

849
00:25:41,390 --> 00:25:42,900
0,245 245,335 335,580
Not at all.|
不用谢。|

850
00:25:42,945 --> 00:25:43,790
0,60 60,165 165,300 300,510 510,845
It's not really relevant here,
它在这里并不是真的相关，就在本课程中。

851
00:25:44,110 --> 00:25:45,820
0,290 290,425 425,590 590,910
right for this course.|
|

852
00:25:46,970 --> 00:25:47,995
0,260 260,665 665,740 740,800 800,1025
Some databases in the relational
关系数据模型中的一些数据库。

853
00:25:47,995 --> 00:25:49,260
0,195 195,485
data model.|
|

854
00:25:49,940 --> 00:25:50,605
0,245 245,350 350,470 470,575 575,665
And this is why I
这就是为什么我对危险的事情很生气，因为我们回到了贾斯汀。评委已经审查了你在科技节拍类别中对矩阵的反应，他们认为这是正确的。我们已经在你的分数上增加了800美元，你所有的赌注都是在调整后的分数上进行的。

855
00:25:50,605 --> 00:25:51,265
0,105 105,300 300,420 420,555 555,660
was pissed all about the

856
00:25:51,265 --> 00:25:52,075
0,315 315,450 450,585 585,690 690,810
jeopardy thing, because we go

857
00:25:52,075 --> 00:25:54,460
0,195 195,515 1435,1950 1950,2130 2130,2385
back to Justin. The judges

858
00:25:54,460 --> 00:25:56,125
0,380 430,810 810,1035 1035,1335 1335,1665
have reviewed your response of

859
00:25:56,125 --> 00:25:57,550
0,720 720,855 855,1005 1005,1200 1200,1425
matrix in the Tech beat

860
00:25:57,550 --> 00:25:58,930
0,320 400,675 675,825 825,1050 1050,1380
category and they have decided

861
00:25:58,930 --> 00:26:00,895
0,240 240,375 375,650 850,1250 1630,1965
that it is correct. We've

862
00:26:00,895 --> 00:26:02,305
0,180 180,630 630,965 1015,1245 1245,1410
added 800 dollars to your

863
00:26:02,305 --> 00:26:03,265
0,270 270,480 480,645 645,810 810,960
score and all of your

864
00:26:03,265 --> 00:26:05,020
0,480 480,705 705,930 930,1265 1405,1755
wagers were made on the

865
00:26:05,020 --> 00:26:06,480
0,350 460,860
adjusted score.|
|

866
00:26:06,670 --> 00:26:07,485
0,245 245,350 350,500 500,680 680,815
There is no such thing
没有关系矩阵这回事。

867
00:26:07,485 --> 00:26:09,140
0,105 105,195 195,450 450,1025
as a relational matrix.|
|

868
00:26:10,040 --> 00:26:10,900
0,275 275,410 410,500 500,635 635,860
I sent them an email.
我给他们发了一封电子邮件。无论如何，他们都没有回应。

869
00:26:11,080 --> 00:26:16,400
0,105 105,255 255,560 3760,4160
They didn't respond anyway.|
|

870
00:26:16,400 --> 00:26:17,330
0,195 195,300 300,720 720,855 855,930
Got a PhD. I think
拿到了博士学位。我认为这就像神经科学，但就像，你知道的，随便什么。所以希望，如果这门课没有其他内容，你可以回答这个问题。

871
00:26:17,330 --> 00:26:19,550
0,210 210,420 420,980 1630,1935 1935,2220
it's like neuroscience, but like,

872
00:26:19,550 --> 00:26:22,720
0,210 210,440 940,1340 1750,2150 2770,3170
you know, whatever. So hopefully,

873
00:26:23,160 --> 00:26:24,215
0,290 290,500 500,710 710,875 875,1055
if nothing else in this

874
00:26:24,215 --> 00:26:25,850
0,305 955,1215 1215,1320 1320,1470 1470,1635
course, you can answer that

875
00:26:25,850 --> 00:26:26,640
0,260
question.|
|

876
00:26:29,120 --> 00:26:29,890
0,230 230,380 380,485 485,650 650,770
So let's go back to
让我们回到1960年的S，这再次激发了为什么关系模型的产生，它将为我们建立为什么它仍然流行，为什么今天的年轻人。

877
00:26:29,890 --> 00:26:31,840
0,75 75,540 540,830 1510,1770 1770,1950
the 1960 s and this

878
00:26:31,840 --> 00:26:33,385
0,225 225,660 660,980 1030,1275 1275,1545
again motivate why the relational

879
00:26:33,385 --> 00:26:35,740
0,330 330,600 600,905 1225,1625 1945,2355
model came about, and it'll

880
00:26:35,740 --> 00:26:37,020
0,120 120,225 225,345 345,620 880,1280
set us up for why

881
00:26:37,070 --> 00:26:38,515
0,365 365,545 545,950 950,1220 1220,1445
it's still prevalent and why

882
00:26:38,515 --> 00:26:39,720
0,105 105,240 240,545
the youth today.|
|

883
00:26:39,970 --> 00:26:41,100
0,260 260,520
Pin it.|
用别针别住。|

884
00:26:42,070 --> 00:26:43,480
0,245 245,410 410,730
For any new.|
对于任何新的。|

885
00:26:45,370 --> 00:26:47,070
0,305 305,455 455,530 530,1415 1415,1700
Back in the 1960 s
早在1960年，S就在十九岁初。

886
00:26:47,070 --> 00:26:48,580
0,345 345,710
early nineteen.|
|

887
00:26:51,310 --> 00:26:52,815
0,400 630,1010 1010,1055 1055,1265 1265,1505
There wasn't a relational model,
没有关系模型，不是关系数据库，也不是Postgres，也不是我的SQL Sqlite mongo，对吧。

888
00:26:52,815 --> 00:26:54,015
0,255 255,450 450,900 900,975 975,1200
wasn't relational databases, it wasn't

889
00:26:54,015 --> 00:26:55,005
0,330 330,450 450,615 615,720 720,990
postgres, it wasn't my sql

890
00:26:55,005 --> 00:26:57,180
0,330 330,785 865,1265
sqlite mongo right.|
|

891
00:26:58,330 --> 00:26:59,265
0,350 350,560 560,665 665,755 755,935
The first day he says
他说我们开工的第一天就是。

892
00:26:59,265 --> 00:27:01,140
0,210 210,360 360,630 630,1025
we were building were.|
|

893
00:27:01,810 --> 00:27:02,700
0,320 320,560 560,725 725,815 815,890
Not meant really meant to
不是真的想要成为通用的，但是他们意识到，哦，不是只为这一个应用程序构建这些定制的数据库应用程序或数据库系统，我可以做得更通用一些，现在我可以支持任何可能的应用程序。据你所知，第一个数据库系统曾经存在过，但我。

894
00:27:02,700 --> 00:27:03,615
0,105 105,300 300,600 600,825 825,915
be general purpose, but then

895
00:27:03,615 --> 00:27:05,220
0,245 295,690 690,1085 1255,1500 1500,1605
they realize, oh, instead of

896
00:27:05,220 --> 00:27:06,930
0,210 210,435 435,855 855,1160 1360,1710
building these bespoke database applications

897
00:27:06,930 --> 00:27:08,565
0,210 210,405 405,740 1210,1470 1470,1635
or database systems for just

898
00:27:08,565 --> 00:27:10,470
0,225 225,545 595,995 1465,1755 1755,1905
this one application, I can

899
00:27:10,470 --> 00:27:11,250
0,135 135,255 255,360 360,525 525,780
make a bit more general

900
00:27:11,250 --> 00:27:12,105
0,255 255,435 435,600 600,735 735,855
and and now I can

901
00:27:12,105 --> 00:27:14,460
0,165 165,405 405,755 955,1355 1975,2355
support any possible application. So

902
00:27:14,460 --> 00:27:15,225
0,270 270,420 420,540 540,645 645,765
as far as you know,

903
00:27:15,225 --> 00:27:16,785
0,150 150,345 345,615 615,965 1165,1560
the first database system ever

904
00:27:16,785 --> 00:27:18,780
0,575 1105,1365 1365,1625
existed, but I.|
|

905
00:27:19,380 --> 00:27:21,005
0,290 290,530 530,800 800,1120 1320,1625
Built by general electric, which
由通用电气制造，后来被出售给霍尼韦尔1960年，他们最初建造的ID是为了保留。

906
00:27:21,005 --> 00:27:23,530
0,285 285,600 600,885 885,1235 1945,2525
then then sold to Honeywell

907
00:27:24,030 --> 00:27:26,150
0,670 900,1205 1205,1670 1670,1850 1850,2120
1960 with IDs they originally

908
00:27:26,150 --> 00:27:27,520
0,345 345,585 585,860
built to keep.|
|

909
00:27:28,100 --> 00:27:29,560
0,290 290,700 960,1205 1205,1295 1295,1460
In Seattle, and then they
在西雅图，然后他们意识到，哦，不只是为了。

910
00:27:29,560 --> 00:27:31,000
0,225 225,530 820,1065 1065,1185 1185,1440
realize, oh, instead of building

911
00:27:31,000 --> 00:27:32,640
0,285 285,465 465,600 600,860
this just for the.|
|

912
00:27:32,640 --> 00:27:33,420
0,135 135,210 210,315 315,495 495,780
We can make some tweaks
我们可以做一些调整，然后制作它，这样我们造纸公司就可以使用它，或者，或者电话公司可以使用它。这可以说是有史以来最早的通用数据库系统之一。

913
00:27:33,420 --> 00:27:34,065
0,105 105,210 210,330 330,495 495,645
and then make it so

914
00:27:34,065 --> 00:27:35,520
0,245 595,900 900,1140 1140,1320 1320,1455
we paper company could use

915
00:27:35,520 --> 00:27:36,285
0,150 150,300 300,450 450,600 600,765
it or, or a phone

916
00:27:36,285 --> 00:27:37,635
0,195 195,375 375,495 495,755 1105,1350
company could use it. And

917
00:27:37,635 --> 00:27:38,415
0,120 120,240 240,375 375,600 600,780
that sort of became one

918
00:27:38,415 --> 00:27:39,260
0,60 60,150 150,330 330,540 540,845
of the first general purpose

919
00:27:39,400 --> 00:27:40,700
0,320 320,575 575,845 845,1010 1010,1300
database systems that ever built.|
|

920
00:27:41,480 --> 00:27:42,660
0,400
Ah.|
阿。|

921
00:27:47,180 --> 00:27:49,220
0,335 335,670
I met.|
我遇到了。|

922
00:27:51,940 --> 00:27:52,860
0,290 290,440 440,575 575,740 740,920
Oh, we could use this
哦，我们可以把它用在其他应用程序上，他们推广了它。

923
00:27:52,860 --> 00:27:54,435
0,135 135,380 400,780 780,1160 1300,1575
for other applications, and they

924
00:27:54,435 --> 00:27:55,700
0,375 375,695
generalized it.|
|

925
00:27:55,940 --> 00:27:57,960
0,245 245,410 410,1090 1140,1540 1620,2020
And then codasil is a
而Codasil是一种标准，定义了六十年代末的S或七十岁的S作为一种方式，一种与数据系统交互的方式。人们意识到，与其拥有这些标准，不如拥有这些。

926
00:27:58,970 --> 00:28:01,645
0,400 540,940 1140,1540 1920,2320 2370,2675
standards that defined late sixty

927
00:28:01,645 --> 00:28:03,235
0,210 210,450 450,690 690,995 1315,1590
s or seventy s as

928
00:28:03,235 --> 00:28:05,785
0,150 150,405 405,785 2065,2325 2325,2550
a way to, as an

929
00:28:05,785 --> 00:28:06,895
0,270 270,465 465,690 690,930 930,1110
interact way to interact with

930
00:28:06,895 --> 00:28:08,965
0,210 210,545 1225,1590 1590,1890 1890,2070
data systems. People realize instead

931
00:28:08,965 --> 00:28:09,970
0,90 90,255 255,480 480,735 735,1005
of having these standard, these

932
00:28:09,970 --> 00:28:11,000
0,320
these.|
|

933
00:28:11,900 --> 00:28:13,060
0,305 305,545 545,845 845,1055 1055,1160
Data systems that were being
当时正在建设的数据系统，我们将有标准化的方式。

934
00:28:13,060 --> 00:28:14,260
0,135 135,240 240,330 330,590 940,1200
built at the time, we

935
00:28:14,260 --> 00:28:15,400
0,105 105,350 370,780 780,975 975,1140
would have standardize way for

936
00:28:15,400 --> 00:28:17,320
0,260
how.|
|

937
00:28:21,330 --> 00:28:22,900
0,305 305,470 470,880 1020,1295 1295,1570
Less than 5% or five,
不到5%或5%，我猜你在这里听到了一件大衣奥菲尔。

938
00:28:24,450 --> 00:28:25,490
0,350 350,530 530,710 710,860 860,1040
I'm assuming you here are

939
00:28:25,490 --> 00:28:27,000
0,150 150,270 270,405 405,830
heard a coat ofill.|
|

940
00:28:27,530 --> 00:28:31,240
0,400 720,1120 1410,1810 2040,2440
One, okay? So why?|
一个，好吗？那为什么呢？|

941
00:28:31,910 --> 00:28:34,750
0,230 230,320 320,580 2550,2780 2780,2840
In the book, in the
在书里，在书里，是的。

942
00:28:34,750 --> 00:28:36,900
0,230 460,860
book, yeah.|
|

943
00:28:38,440 --> 00:28:39,540
0,400
People.|
人民。|

944
00:28:40,170 --> 00:28:41,540
0,320 320,640 870,1115 1115,1220 1220,1370
And in, in these early
在这些早期系统中，这是您与数据库系统交互的方式。而在这些最初的影响中固有的许多事情是你今天不想做的事情。最重要的一件事是，在这些第一批系统中，它们在逻辑层、模式、我拥有什么实体、它们的属性以及系统中的物理层之间存在紧密耦合。

945
00:28:41,540 --> 00:28:43,205
0,290 1030,1320 1320,1455 1455,1560 1560,1665
systems, this is the way

946
00:28:43,205 --> 00:28:43,930
0,90 90,195 195,315 315,450 450,725
you would in interact with

947
00:28:44,670 --> 00:28:46,700
0,335 335,670 1080,1480 1590,1865 1865,2030
database systems. And a lot

948
00:28:46,700 --> 00:28:47,590
0,120 120,225 225,435 435,630 630,890
of the things that were

949
00:28:47,700 --> 00:28:49,490
0,400 540,1190 1190,1385 1385,1580 1580,1790
in inherent in these first

950
00:28:49,490 --> 00:28:51,305
0,530 1030,1320 1320,1515 1515,1680 1680,1815
implications are things you would

951
00:28:51,305 --> 00:28:52,150
0,165 165,300 300,405 405,555 555,845
not want to do today.

952
00:28:52,740 --> 00:28:53,555
0,260 260,380 380,485 485,605 605,815
So one of the big

953
00:28:53,555 --> 00:28:54,545
0,270 270,525 525,690 690,810 810,990
things was in these first

954
00:28:54,545 --> 00:28:55,595
0,255 255,465 465,600 600,795 795,1050
systems, they had this tight

955
00:28:55,595 --> 00:28:57,760
0,465 465,815 1075,1350 1350,1875 1875,2165
coupling between the logical layer,

956
00:28:57,810 --> 00:29:00,710
0,380 380,970 1890,2240 2240,2480 2480,2900
the schema, what what entities

957
00:29:00,710 --> 00:29:01,310
0,120 120,210 210,375 375,525 525,600
do I have, what are

958
00:29:01,310 --> 00:29:02,705
0,165 165,590 880,1140 1140,1245 1245,1395
their attributes, and then a

959
00:29:02,705 --> 00:29:03,850
0,305 355,645 645,780 780,885 885,1145
physical layer in the system.|
|

960
00:29:04,300 --> 00:29:05,595
0,290 290,500 500,710 710,950 950,1295
Meaning, like, how is actually
这意味着，实际上是如何在磁盘或内存中表示的，以及我将如何与它们实际交互。

961
00:29:05,595 --> 00:29:07,185
0,285 285,575 655,975 975,1440 1440,1590
being represented on disk or

962
00:29:07,185 --> 00:29:08,295
0,165 165,455 625,885 885,1005 1005,1110
in memory and how would

963
00:29:08,295 --> 00:29:09,290
0,135 135,360 360,585 585,735 735,995
I actually interact with them.|
|

964
00:29:09,880 --> 00:29:11,535
0,400 810,1085 1085,1220 1220,1370 1370,1655
Right. And so what happened
正确的。发生的情况是，如果你，如果你当时是一名程序员，你想要使用其中一个数据库系统，你必须确切地知道数据库是如何休息的，存储你的数据库。这是因为这将向您公开一个不同的API来与其交互。

965
00:29:11,535 --> 00:29:12,720
0,375 375,630 630,825 825,1035 1035,1185
is if you, if you

966
00:29:12,720 --> 00:29:13,650
0,165 165,360 360,750 750,825 825,930
were a programmer at the

967
00:29:13,650 --> 00:29:14,805
0,260 490,750 750,855 855,990 990,1155
time and you wanted to

968
00:29:14,805 --> 00:29:15,645
0,240 240,435 435,495 495,600 600,840
use one of these database

969
00:29:15,645 --> 00:29:16,695
0,360 360,630 630,765 765,870 870,1050
systems, you had to know

970
00:29:16,695 --> 00:29:18,660
0,335 415,815 1015,1305 1305,1770 1770,1965
exactly how the databaseases rest,

971
00:29:18,660 --> 00:29:20,595
0,210 210,375 375,650 1360,1650 1650,1935
storing your database. And so

972
00:29:20,595 --> 00:29:21,600
0,240 240,375 375,510 510,855 855,1005
because that would expose a

973
00:29:21,600 --> 00:29:23,205
0,150 150,630 630,765 765,980 1270,1605
different API to you to

974
00:29:23,205 --> 00:29:24,240
0,210 210,345 345,605
interact with it.|
|

975
00:29:24,760 --> 00:29:25,815
0,230 230,305 305,695 695,890 890,1055
Well, on ims you could
嗯，在IMS上，您可以将数据存储为哈希表或A、B加树或树结构，然后您有不同的API，因为您知道，取决于我们使用的数据结构，因为哈希表，您不能进行扫描，而是处理结构。

976
00:29:25,815 --> 00:29:27,135
0,305 445,750 750,915 915,1110 1110,1320
store data is either as

977
00:29:27,135 --> 00:29:28,020
0,135 135,360 360,585 585,780 780,885
a hash table or A

978
00:29:28,020 --> 00:29:29,175
0,150 150,360 360,555 555,830 850,1155
B plus tree or tree

979
00:29:29,175 --> 00:29:30,630
0,305 625,975 975,1200 1200,1335 1335,1455
structure and, and then you

980
00:29:30,630 --> 00:29:32,910
0,180 180,405 405,980 1150,1550 2050,2280
got different APIs because you

981
00:29:32,910 --> 00:29:33,675
0,105 105,270 270,435 435,585 585,765
know, depending on which data

982
00:29:33,675 --> 00:29:35,625
0,225 225,450 450,695 1015,1415 1585,1950
structure we're using, because hash

983
00:29:35,625 --> 00:29:36,980
0,165 165,345 345,585 585,845 925,1355
tables, you can't do scans

984
00:29:37,660 --> 00:29:40,540
0,400 1680,1955 1955,2230
but treat structures.|
|

985
00:29:42,170 --> 00:29:43,030
0,245 245,350 350,485 485,680 680,860
So now the problem with
因此，现在的问题是，每当我想要同时更改逻辑层和物理层的模式时，我都必须重写我的应用程序。

986
00:29:43,030 --> 00:29:44,545
0,135 135,285 285,560 880,1245 1245,1515
this is that any single

987
00:29:44,545 --> 00:29:45,415
0,210 210,495 495,720 720,795 795,870
time I want to make

988
00:29:45,415 --> 00:29:46,680
0,135 135,375 375,585 585,765 765,1265
a change to the schema

989
00:29:47,000 --> 00:29:48,160
0,305 305,485 485,635 635,1040 1040,1160
at both the logical layer

990
00:29:48,160 --> 00:29:49,390
0,105 105,210 210,450 450,830 940,1230
and the physical layer, I

991
00:29:49,390 --> 00:29:50,400
0,150 150,255 255,405 405,735 735,1010
had to go rewrite my

992
00:29:50,450 --> 00:29:51,740
0,400
application.|
|

993
00:29:52,380 --> 00:29:53,870
0,245 245,425 425,760 780,1175 1175,1490
Almost from scratch because oh,
几乎是从头开始，因为哦，数据库在磁盘上的表示方式发生了变化。

994
00:29:53,870 --> 00:29:55,180
0,255 255,420 420,630 630,960 960,1310
how the database was represented

995
00:29:55,320 --> 00:29:57,080
0,305 305,680 680,970
on disk changed.|
|

996
00:29:57,440 --> 00:29:58,555
0,305 305,590 590,815 815,920 920,1115
Other issues with the data
数据模型的其他问题，我们不需要真正好的。

997
00:29:58,555 --> 00:29:59,905
0,335 715,945 1020,1095 1095,1200 1200,1350
model, we don't need really

998
00:29:59,905 --> 00:30:00,640
0,275
good.|
|

999
00:30:01,370 --> 00:30:03,685
0,365 365,635 635,940 1680,2060 2060,2315
Like in the, the, the
就像在，更高的模型中，你必须让这四个循环遍历，你知道，一个集合与另一个集合。这真的很低效，与数据系统交互的方式非常低效。

1000
00:30:03,685 --> 00:30:05,130
0,275 445,825 825,1065 1065,1185 1185,1445
higher model, you had to

1001
00:30:05,450 --> 00:30:06,295
0,245 245,350 350,470 470,635 635,845
sort of have these four

1002
00:30:06,295 --> 00:30:08,130
0,285 285,695 1165,1395 1395,1530 1530,1835
loops traverse, you know, one

1003
00:30:08,420 --> 00:30:10,525
0,400 540,875 875,1130 1130,1450 1860,2105
collection versus another collection. It

1004
00:30:10,525 --> 00:30:12,805
0,135 135,330 330,855 855,1145 1705,2280
was really inefficient, way inefficient

1005
00:30:12,805 --> 00:30:13,375
0,105 105,255 255,405 405,495 495,570
way to interact with the

1006
00:30:13,375 --> 00:30:14,440
0,165 165,485
data system.|
|

1007
00:30:16,020 --> 00:30:17,135
0,305 305,575 575,860 860,1025 1025,1115
What happened was in the
发生的事情发生在20世纪60年代末，有一个人，泰德·科德，他是。

1008
00:30:17,135 --> 00:30:18,815
0,120 120,375 375,965 1315,1575 1575,1680
late nineteen sixties, there was

1009
00:30:18,815 --> 00:30:20,510
0,135 135,420 420,750 750,1295 1435,1695
this guy, ted codd, who

1010
00:30:20,510 --> 00:30:21,280
0,260
was.|
|

1011
00:30:22,520 --> 00:30:25,380
0,400
Pen.|
钢笔。|

1012
00:30:26,630 --> 00:30:28,615
0,400 660,920 920,1055 1055,1330 1710,1985
And he was walking up
他走进了纽约，在那里，他看到了所有这些，这些，这些IBM开发人员主要在工作。

1013
00:30:28,615 --> 00:30:29,425
0,165 165,390 390,570 570,645 645,810
in, in, in new York,

1014
00:30:29,425 --> 00:30:30,250
0,180 180,255 255,375 375,570 570,825
where the big lab is,

1015
00:30:30,250 --> 00:30:31,525
0,180 180,345 345,630 630,930 930,1275
and he saw all these,

1016
00:30:31,525 --> 00:30:34,390
0,395 685,990 990,1455 1455,1775 2485,2865
these, these IBM developers primarily

1017
00:30:34,390 --> 00:30:35,460
0,380
working.|
|

1018
00:30:35,620 --> 00:30:38,145
0,305 305,530 530,1060 1680,2080 2130,2525
Saw them rewriting database applications
看到他们一遍又一遍地重写数据库应用程序。每一次都有架构更改。每一次都是物理布局的改变。

1019
00:30:38,145 --> 00:30:39,315
0,330 330,510 510,690 690,930 930,1170
over and over again. Every

1020
00:30:39,315 --> 00:30:40,140
0,240 240,435 435,570 570,675 675,825
single time there was a

1021
00:30:40,140 --> 00:30:41,400
0,285 285,510 510,750 750,960 960,1260
schema change. Every single time

1022
00:30:41,400 --> 00:30:43,760
0,380 1120,1395 1395,1620 1620,2055 2055,2360
was a physical layout change.|
|

1023
00:30:44,480 --> 00:30:45,540
0,380
Right.|
正确的。|

1024
00:30:47,210 --> 00:30:48,760
0,335 335,530 530,790
Humans were rapidly.|
人类的反应很快。|

1025
00:30:48,830 --> 00:30:50,545
0,400 720,1120 1170,1430 1430,1550 1550,1715
So people, okay, yeah, we'll
所以人们，好的，是的，我们只是在这个问题上给人类做标记，你知道，这比买一个。

1026
00:30:50,545 --> 00:30:51,670
0,135 135,330 330,605 745,1005 1005,1125
just Mark humans at the

1027
00:30:51,670 --> 00:30:53,400
0,240 240,620 730,990 990,1250 1330,1730
problem and, you know, and

1028
00:30:53,780 --> 00:30:54,870
0,320 320,425 425,560 560,755 755,1090
that's better than buying a.|
|

1029
00:30:56,760 --> 00:30:58,730
0,400 780,1100 1100,1420 1530,1805 1805,1970
So my example, he pointed
因此，他指出，我的例子是。

1030
00:30:58,730 --> 00:30:59,520
0,290
out.|
|

1031
00:30:59,710 --> 00:31:01,100
0,335 335,500 500,730
Embedded in my.|
嵌入了我的。|

1032
00:31:01,800 --> 00:31:03,965
0,400 750,1085 1085,1420 1800,2075 2075,2165
So, main column, we think
所以，Main专栏，我们现在想起来了。

1033
00:31:03,965 --> 00:31:05,000
0,75 75,180 180,455
of it now.|
|

1034
00:31:05,760 --> 00:31:06,950
0,165 165,315 315,590 700,945 945,1190
That was like the ID.|
这就像身份证一样。|

1035
00:31:08,730 --> 00:31:10,220
0,275 275,395 395,485 485,730
I had to go.|
我得走了。|

1036
00:31:11,240 --> 00:31:12,480
0,400
Meant.|
我的意思是。|

1037
00:31:13,270 --> 00:31:14,220
0,245 245,500 500,710 710,860 860,950
A trivial example, but that
一个微不足道的例子，但这是他们以前做的那种狗屎。

1038
00:31:14,220 --> 00:31:14,775
0,105 105,195 195,300 300,420 420,555
was the kind of shit

1039
00:31:14,775 --> 00:31:15,405
0,135 135,240 240,360 360,510 510,630
they were doing back in

1040
00:31:15,405 --> 00:31:16,320
0,90 90,335
the day.|
|

1041
00:31:17,900 --> 00:31:19,330
0,400 420,785 785,1085 1085,1295 1295,1430
So k, all this and
所以k，所有这一切，说，一定有更好的方法，他。

1042
00:31:19,330 --> 00:31:20,470
0,120 120,435 435,825 825,1005 1005,1140
said there's, there's gotta be

1043
00:31:20,470 --> 00:31:22,140
0,60 60,195 195,500 880,1275 1275,1670
a better way and he.|
|

1044
00:31:23,570 --> 00:31:26,190
0,400 870,1265 1265,1655 1655,2315 2315,2620
Model as an abstraction from
模型是从如何、如何表示数据库以及数据库中和数据库中实体之间的关系中抽象出来的，避免了物理层和逻辑层之间的紧密耦合，这意味着用数学术语定义它。我有这些亲戚。这是我可以对它们进行的操作、更改或查找，我不知道，我不在乎隐藏在幕后的数据库系统实际上将如何存储这些数据。

1045
00:31:26,240 --> 00:31:29,670
0,400 2070,2345 2345,2465 2465,2710 3030,3430
how, how to represent the

1046
00:31:29,690 --> 00:31:32,160
0,290 290,580 1260,1610 1610,1960 2070,2470
a database and the relationship

1047
00:31:32,300 --> 00:31:33,610
0,305 305,830 830,1070 1070,1190 1190,1310
between entities in and in

1048
00:31:33,610 --> 00:31:36,355
0,135 135,410 940,1340 2140,2490 2490,2745
a database and avoid having

1049
00:31:36,355 --> 00:31:37,980
0,195 195,405 405,840 840,1175 1225,1625
the tight coupling between physical

1050
00:31:38,060 --> 00:31:39,835
0,400 600,965 965,1220 1220,1370 1370,1775
layer and in the logical

1051
00:31:39,835 --> 00:31:41,695
0,275 535,935 1375,1650 1650,1755 1755,1860
layer meaning define it in

1052
00:31:41,695 --> 00:31:43,540
0,585 585,875 1195,1485 1485,1650 1650,1845
mathematical terms. I had these

1053
00:31:43,540 --> 00:31:44,980
0,320 340,690 690,765 765,1200 1200,1440
relations. Here's the manipulations or

1054
00:31:44,980 --> 00:31:45,895
0,240 240,450 450,720 720,810 810,915
changes or lookups I could

1055
00:31:45,895 --> 00:31:47,005
0,105 105,240 240,515 685,960 960,1110
do on them and I

1056
00:31:47,005 --> 00:31:48,850
0,285 285,480 480,855 855,1145 1495,1845
don't know, don't care how

1057
00:31:48,850 --> 00:31:49,915
0,210 210,435 435,690 690,885 885,1065
the database system underneath the

1058
00:31:49,915 --> 00:31:50,830
0,225 225,510 510,705 705,795 795,915
covers is actually going to

1059
00:31:50,830 --> 00:31:51,480
0,150 150,410
store it.|
|

1060
00:31:51,820 --> 00:31:53,055
0,305 305,470 470,650 650,965 965,1235
Because the data system knows
因为数据系统知道数据是什么，知道查询是什么，所以它可以更好地决定如何。

1061
00:31:53,055 --> 00:31:53,775
0,120 120,210 210,360 360,555 555,720
what the data is, knows

1062
00:31:53,775 --> 00:31:54,750
0,120 120,210 210,420 420,665 715,975
what the queries are, it

1063
00:31:54,750 --> 00:31:55,610
0,120 120,210 210,300 300,510 510,860
can be a better position

1064
00:31:56,050 --> 00:31:58,020
0,305 305,530 530,785 785,1120
to decide how to.|
|

1065
00:31:58,900 --> 00:32:00,140
0,260 260,520
And cut.|
然后停下来。|

1066
00:32:01,250 --> 00:32:02,830
0,350 350,635 635,905 905,1235 1235,1580
I first proposed the relational
我第一次提出关系数据模型是在1999年。

1067
00:32:02,830 --> 00:32:04,320
0,225 225,465 465,660 660,920 1090,1490
data model in nineteen nine.|
|

1068
00:32:05,030 --> 00:32:06,480
0,455 455,785 785,980 980,1175 1175,1450
There's it's Tech report paper.|
这是一份科技报告。|

1069
00:32:07,810 --> 00:32:08,780
0,400
Out.|
出去。|

1070
00:32:15,070 --> 00:32:16,240
0,400
That.|
那。|

1071
00:32:16,980 --> 00:32:19,400
0,275 275,550 660,1390 1920,2180 2180,2420
And again, mathematician, he didn't
再说一次，数学家，他当时并没有定义编程语言。他没有说你实际上是如何实现这一点的。他只是在定义什么是关系，以及操纵它们的代数。

1072
00:32:19,400 --> 00:32:21,665
0,225 225,525 525,890 1870,2130 2130,2265
define programming language at the

1073
00:32:21,665 --> 00:32:22,625
0,210 210,450 450,570 570,780 780,960
time. He's not saying how

1074
00:32:22,625 --> 00:32:24,080
0,180 180,375 375,585 585,905 1105,1455
you actually implement this. He's

1075
00:32:24,080 --> 00:32:26,830
0,195 195,830 1150,1730 2050,2400 2400,2750
just defining whatational relations are

1076
00:32:27,090 --> 00:32:28,715
0,305 305,470 470,980 980,1145 1145,1625
and the algebra to manipulate

1077
00:32:28,715 --> 00:32:29,800
0,275
them.|
|

1078
00:32:30,600 --> 00:32:31,780
0,400
Right.|
正确的。|

1079
00:32:32,650 --> 00:32:34,050
0,290 290,560 560,770 770,1025 1025,1400
So there's three key tenets
所以，有三个关键的原则。

1080
00:32:34,050 --> 00:32:35,560
0,320 400,800
of, of.|
|

1081
00:32:36,870 --> 00:32:37,580
0,230 230,335 335,470 470,590 590,710
But these are three ones
但这三个人是最关心的。

1082
00:32:37,580 --> 00:32:37,925
0,90 90,150 150,195 195,255 255,345
that were going to care

1083
00:32:37,925 --> 00:32:39,280
0,105 105,195 195,425
about the most.|
|

1084
00:32:39,970 --> 00:32:40,905
0,260 260,395 395,590 590,785 785,935
So the first is that
所以第一个是我们要存储所有的数据。

1085
00:32:41,010 --> 00:32:41,930
0,60 60,120 120,255 255,540 540,920
we're going to store all.|
|

1086
00:32:42,820 --> 00:32:44,575
0,350 370,705 705,900 900,1160 1390,1755
Our collection of data in
我们以简单的数据结构收集的数据。

1087
00:32:44,575 --> 00:32:46,960
0,300 300,570 570,905
simple data structures.|
|

1088
00:32:47,210 --> 00:32:49,470
0,400 1170,1490 1490,1565 1565,2015 2015,2260
I that's the mathematical term,
这是数学术语，和表格是一样的。如果你来自蒙古族世界，他们称之为收藏。这是同样的想法。

1089
00:32:49,850 --> 00:32:50,760
0,275 275,410 410,515 515,635 635,910
same thing as a table.

1090
00:32:51,230 --> 00:32:51,940
0,245 245,380 380,500 500,620 620,710
If you're coming from the

1091
00:32:51,940 --> 00:32:52,720
0,300 300,450 450,600 600,705 705,780
mongol world, they call it

1092
00:32:52,720 --> 00:32:54,610
0,105 105,380 1210,1560 1560,1680 1680,1890
a collection. It's the same

1093
00:32:54,610 --> 00:32:55,560
0,350
idea.|
|

1094
00:32:56,570 --> 00:32:57,840
0,260 260,470 470,725 725,950 950,1270
All these simple data structures,
所有这些简单的数据结构，我担心所有的成员关系集，而不是所有其他的数据集。

1095
00:32:58,880 --> 00:33:00,775
0,400 480,815 815,1085 1085,1385 1385,1895
I worry about all membership

1096
00:33:00,775 --> 00:33:01,615
0,240 240,420 420,555 555,690 690,840
sets that all these other

1097
00:33:01,615 --> 00:33:02,580
0,210 210,515
data sets.|
|

1098
00:33:04,170 --> 00:33:04,970
0,305 305,470 470,590 590,740 740,800
Second is that you're going
其次，您将保留数据库本身的物理表示，如磁盘或内存中的实际位和字节，这将是一个飞跃。

1099
00:33:04,970 --> 00:33:07,210
0,120 120,375 375,740 1120,1485 1485,2240
to keep the physical representation

1100
00:33:07,350 --> 00:33:09,230
0,320 320,500 500,760 1260,1640 1640,1880
of the database itself, like

1101
00:33:09,230 --> 00:33:10,340
0,150 150,330 330,510 510,690 690,1110
the actual bits and bytes

1102
00:33:10,340 --> 00:33:11,740
0,255 255,795 795,1035 1035,1140 1140,1400
on disk or in memory,

1103
00:33:12,210 --> 00:33:13,360
0,305 305,350 350,545 545,875 875,1150
you're going to leap that.|
|

1104
00:33:13,960 --> 00:33:15,040
0,150 150,285 285,560
You, not it.|
是你，不是它。|

1105
00:33:15,540 --> 00:33:16,600
0,245 245,335 335,560 560,770 770,1060
In your relational data model.|
在您的关系数据模型中。|

1106
00:33:17,450 --> 00:33:18,295
0,305 305,500 500,635 635,710 710,845
Leave that for the data
把这一点留给数据系统，然后找出最好的方法。

1107
00:33:18,295 --> 00:33:19,060
0,180 180,315 315,435 435,570 570,765
system and figure out what

1108
00:33:19,060 --> 00:33:20,440
0,180 180,405 405,585 585,860
the best way to.|
|

1109
00:33:20,770 --> 00:33:21,660
0,275 275,395 395,530 530,710 710,890
Right, because the idea now
是的，因为现在的想法是如果我以一种方式存储数据，但当我看到我要放入什么样的数据，什么样的设备，把数据放在一边，哦，我真的想把它存储在两台机器或文件上，或者用不同的方式拆分，或者用一种方式分类。再说一次，现在您的应用程序没有改变，因为您只是在很高的级别编写查询。

1110
00:33:21,660 --> 00:33:23,505
0,290 370,770 790,1050 1050,1310 1570,1845
is maybe if I store

1111
00:33:23,505 --> 00:33:24,360
0,105 105,270 270,540 540,750 750,855
the data one way, but

1112
00:33:24,360 --> 00:33:25,425
0,150 150,360 360,570 570,855 855,1065
then as I see what

1113
00:33:25,425 --> 00:33:26,235
0,90 90,300 300,525 525,690 690,810
kind of data I'm putting

1114
00:33:26,235 --> 00:33:27,710
0,305 775,1035 1035,1140 1140,1230 1230,1475
in, what kind of equipment,

1115
00:33:27,760 --> 00:33:29,610
0,400 690,1010 1010,1295 1295,1565 1565,1850
comput data sets aside, oh,

1116
00:33:29,610 --> 00:33:30,765
0,380 580,855 855,960 960,1050 1050,1155
I really want to store

1117
00:33:30,765 --> 00:33:31,760
0,90 90,225 225,435 435,675 675,995
this on two machines or

1118
00:33:31,780 --> 00:33:33,015
0,335 335,670 720,995 995,1145 1145,1235
files or or break it

1119
00:33:33,015 --> 00:33:33,900
0,75 75,180 180,330 330,570 570,885
up in different ways or

1120
00:33:33,900 --> 00:33:34,620
0,270 270,420 420,525 525,600 600,720
or sort it in one

1121
00:33:34,620 --> 00:33:36,320
0,290 730,1020 1020,1215 1215,1410 1410,1700
way. And again now your

1122
00:33:36,340 --> 00:33:38,385
0,305 305,620 620,910 1560,1865 1865,2045
application doesn't change because you're

1123
00:33:38,385 --> 00:33:39,555
0,105 105,345 345,690 690,1065 1065,1170
just writing things queries at

1124
00:33:39,555 --> 00:33:40,230
0,90 90,255 255,420 420,525 525,675
a high at a high

1125
00:33:40,230 --> 00:33:41,100
0,290
level.|
|

1126
00:33:41,100 --> 00:33:42,110
0,195 195,315 405,480 480,660 660,1010
And you don't really care
你不会真的在乎在被子下面有多深。

1127
00:33:42,280 --> 00:33:44,400
0,400 510,875 875,1100 1100,1360
how underneath the covers.|
|

1128
00:33:45,670 --> 00:33:47,180
0,335 335,515 515,770 770,1060 1110,1510
Right. And that's the here
正确的。这就是你要在这里定义的。在高水平上。您将通过高级语言访问数据，然后让数据系统找出检索您正在寻找的数据的最佳方式。做任何你想做的手术。

1129
00:33:47,530 --> 00:33:48,510
0,275 275,305 305,425 425,725 725,980
you're going to define. At

1130
00:33:48,510 --> 00:33:49,425
0,120 120,300 300,555 555,765 765,915
a high level. You're going

1131
00:33:49,425 --> 00:33:50,055
0,195 195,345 345,465 465,525 525,630
access data through a high

1132
00:33:50,055 --> 00:33:51,420
0,180 180,485 835,1095 1095,1215 1215,1365
level language and then let

1133
00:33:51,420 --> 00:33:52,610
0,150 150,360 360,645 645,885 885,1190
the data system figure out

1134
00:33:52,870 --> 00:33:54,200
0,350 350,455 455,620 620,935 935,1330
what's the best way to,

1135
00:33:54,370 --> 00:33:56,235
0,400 930,1445 1445,1535 1535,1700 1700,1865
to retrieve the data that

1136
00:33:56,235 --> 00:33:57,345
0,150 150,255 255,545 595,885 885,1110
you're looking for. Do whatever

1137
00:33:57,345 --> 00:33:58,550
0,335 355,615 615,780 780,945 945,1205
operation you want to do.|
|

1138
00:34:00,470 --> 00:34:01,540
0,320 320,560 560,860 860,965 965,1070
So to Todd won the
因此托德赢得了巡回赛，并在1981年赢得了这场比赛。啊事件尾声。所以他以72啊的成绩赢得了冠军，但人们花了十年时间才意识到他是错的.

1139
00:34:01,540 --> 00:34:02,275
0,240 240,375 375,510 510,630 630,735
touring, won for this in

1140
00:34:02,275 --> 00:34:05,170
0,1295 1915,2235 2235,2550 2550,2730 2730,2895
1981. {Ah,,event} coda. So he

1141
00:34:05,170 --> 00:34:06,270
0,120 120,210 210,285 285,435 435,1100
won it in like 72

1142
00:34:06,680 --> 00:34:07,735
0,335 335,530 530,695 695,890 890,1055
ah, but it took ten

1143
00:34:07,735 --> 00:34:08,470
0,150 150,270 270,375 375,540 540,735
years for people to realize

1144
00:34:08,470 --> 00:34:09,640
0,135 135,240 240,500
he was wrong.|
|

1145
00:34:09,640 --> 00:34:13,230
0,290 1060,1460 2830,3195 3195,3315 3315,3590
And words. Todd is dead.
和文字。托德死了。密码。

1146
00:34:14,090 --> 00:34:15,200
0,305 305,610
The code.|
|

1147
00:34:17,450 --> 00:34:18,880
0,245 245,470 470,850 1020,1265 1265,1430
And then the, the other
然后，在数据库中赢得巡回赛病房的另一个人，吉恩·格雷，他在第六名迷路了。最后，数据库中的巡回病房是Mike Stonebaker和他的后床，他是IP博士导师。好吧，隐蔽的斯通伯格。

1148
00:34:18,880 --> 00:34:19,800
0,195 195,315 315,420 420,600 600,920
guy that won the the

1149
00:34:19,850 --> 00:34:21,180
0,320 320,590 590,785 785,1025 1025,1330
the touring ward in database,

1150
00:34:21,770 --> 00:34:23,140
0,305 305,610 810,1055 1055,1190 1190,1370
gene gray, he got lost

1151
00:34:23,140 --> 00:34:24,955
0,290 670,1070 1360,1605 1605,1710 1710,1815
in sixth. And then the

1152
00:34:24,955 --> 00:34:26,755
0,245 565,965 1255,1590 1590,1695 1695,1800
last, the touring ward in

1153
00:34:26,755 --> 00:34:28,110
0,180 180,420 420,615 615,795 795,1355
database is, is Mike stonebaker

1154
00:34:28,430 --> 00:34:30,480
0,260 260,610 660,1210 1530,1790 1790,2050
and he's postcrib and was

1155
00:34:30,860 --> 00:34:32,650
0,275 275,575 575,970 1230,1505 1505,1790
IP PhD advisor. Well, coververt

1156
00:34:32,650 --> 00:34:33,460
0,410
stoneberg.|
|

1157
00:34:35,120 --> 00:34:36,250
0,290 290,500 500,650 650,890 890,1130
So there's three key aspects
因此，数据模型有三个关键方面。有一种结构，我们将如何去做，我们如何定义数据数据库实际上是什么，我们的关系中有什么，它们的属性和类型是什么。有一些完整性方法指定允许将哪些数据存储在数据库中。

1158
00:34:36,250 --> 00:34:37,705
0,165 165,375 375,600 600,890 1090,1455
of the data model. There's

1159
00:34:37,705 --> 00:34:39,610
0,150 150,435 435,815 1405,1710 1710,1905
the structure that, how we're

1160
00:34:39,610 --> 00:34:40,885
0,60 60,290 610,870 870,1035 1035,1275
going to, how we define

1161
00:34:40,885 --> 00:34:42,310
0,195 195,315 315,575 805,1185 1185,1425
what the data database actually

1162
00:34:42,310 --> 00:34:43,975
0,260 520,840 840,1425 1425,1500 1500,1665
is, what what's in our

1163
00:34:43,975 --> 00:34:45,580
0,305 775,1020 1020,1095 1095,1275 1275,1605
relations, what are their attributes

1164
00:34:45,580 --> 00:34:47,590
0,135 135,270 270,560 1360,1800 1800,2010
and the types. There's the

1165
00:34:47,590 --> 00:34:49,765
0,560 580,945 945,1310 1330,1920 1920,2175
integrity methods that specify what

1166
00:34:49,765 --> 00:34:50,560
0,195 195,375 375,540 540,645 645,795
data is allowed to be

1167
00:34:50,560 --> 00:34:52,400
0,315 315,510 510,615 615,860
stored in the database.|
|

1168
00:34:52,440 --> 00:34:53,225
0,305 305,440 440,560 560,695 695,785
Right to make sure that
确保你知道每一件事的权利。

1169
00:34:53,225 --> 00:34:54,620
0,90 90,335 355,755
you know every.|
|

1170
00:34:55,200 --> 00:34:56,135
0,400 420,650 650,755 755,800 800,935
Email. I don't have any
电子邮件。在我的例子中，我没有任何没有电子邮件地址的记录。

1171
00:34:56,135 --> 00:34:57,340
0,240 240,480 480,675 675,885 885,1205
records without an email address

1172
00:34:57,630 --> 00:34:59,100
0,335 335,515 515,650 650,940
or in my example.|
|

1173
00:34:59,360 --> 00:35:00,840
0,275 275,545 545,680 680,970 1080,1480
I can't have an album
我不能有一张专辑里有一个不存在于艺术家身上的艺术家。

1174
00:35:01,370 --> 00:35:02,605
0,400 510,770 770,875 875,1055 1055,1235
that has an artist that

1175
00:35:02,605 --> 00:35:03,510
0,300 300,465 465,570 570,660 660,905
doesn't exist in the artist.|
|

1176
00:35:06,010 --> 00:35:07,980
0,260 260,380 380,485 485,1030 1350,1970
And then the manipulation mechanisms
然后，操纵机制允许我们定义如何访问和更新数据。

1177
00:35:07,980 --> 00:35:09,165
0,195 195,470 520,780 780,975 975,1185
allow us to define how

1178
00:35:09,165 --> 00:35:09,810
0,180 180,210 210,330 330,510 510,645
we're going to access the

1179
00:35:09,810 --> 00:35:11,660
0,260 370,705 705,900 900,1160
data and update it.|
|

1180
00:35:11,660 --> 00:35:13,580
0,380 400,750 750,1100 1420,1725 1725,1920
And what about the last
最后一个呢，我们在开始讨论的时候会讲到。

1181
00:35:13,580 --> 00:35:14,120
0,150 150,255 255,345 345,465 465,540
one was what we'll talk

1182
00:35:14,120 --> 00:35:14,990
0,260 370,600 600,675 675,765 765,870
about when we start talking

1183
00:35:14,990 --> 00:35:15,780
0,260
about.|
|

1184
00:35:18,560 --> 00:35:19,560
0,400
Matt.|
马特。|

1185
00:35:20,540 --> 00:35:23,170
0,290 290,785 785,1090 1560,1960 2250,2630
An unordered set of data
一组无序数据，将包含代表现实世界中某个实体的属性之间的关系。因此，该模型并不意味着表之间的关系，它实际上是属性之间的关系。

1186
00:35:23,170 --> 00:35:24,130
0,300 300,375 375,510 510,735 735,960
that's going to contain the

1187
00:35:24,130 --> 00:35:25,530
0,255 255,570 570,930 930,1140 1140,1400
relationship of attributes that represent

1188
00:35:25,610 --> 00:35:26,815
0,305 305,785 785,905 905,1025 1025,1205
some entity in the real

1189
00:35:26,815 --> 00:35:29,440
0,305 805,1080 1080,1355 1945,2295 2295,2625
world. So the model doesn't

1190
00:35:29,440 --> 00:35:30,990
0,150 150,285 285,530 550,950 1150,1550
mean the relationship between tables,

1191
00:35:31,370 --> 00:35:32,620
0,320 320,440 440,590 590,850 870,1250
it's really the relationship between

1192
00:35:32,620 --> 00:35:33,820
0,470
attributes.|
|

1193
00:35:33,890 --> 00:35:35,120
0,400
Within.|
在里面。|

1194
00:35:36,200 --> 00:35:37,490
0,285 285,615 615,855 855,1095 1095,1290
So again, a student has
同样，学生有一个电子邮件地址。他们有一个电话号码，一个生日家，地址，这些属性组合在一起的关系代表了一些。

1195
00:35:37,490 --> 00:35:38,540
0,180 180,420 420,675 675,870 870,1050
an email address. They have

1196
00:35:38,540 --> 00:35:41,470
0,210 210,405 405,710 2380,2655 2655,2930
a phone number, a birthday

1197
00:35:41,790 --> 00:35:44,230
0,320 320,640 990,1450 1740,2090 2090,2440
home, address it, that relation

1198
00:35:44,340 --> 00:35:46,475
0,260 260,520 750,1210 1410,1805 1805,2135
of those attributes combined together

1199
00:35:46,475 --> 00:35:48,460
0,285 285,635 745,1145
to represent some.|
|

1200
00:35:50,450 --> 00:35:52,255
0,400 840,1130 1130,1415 1415,1700 1700,1805
So again, so we'll have
再说一次，我们将拥有一组属性。我会用三重这个词，但它也意味着记录或排，同样在更高的层面上，它们的意思都是一样的，一样的东西。

1201
00:35:52,255 --> 00:35:53,770
0,135 135,240 240,405 405,815 1105,1515
a set of attributes. I'll

1202
00:35:53,770 --> 00:35:54,940
0,90 90,180 180,300 300,590 850,1170
use the word triple, but

1203
00:35:54,940 --> 00:35:56,130
0,270 270,570 570,765 765,900 900,1190
it also you mean record

1204
00:35:56,270 --> 00:35:59,410
0,400 690,1090 2220,2620 2760,3020 3020,3140
or row, again at a

1205
00:35:59,410 --> 00:36:00,130
0,150 150,315 315,435 435,570 570,720
high level, they all mean

1206
00:36:00,130 --> 00:36:01,290
0,135 135,315 315,600 600,870 870,1160
the same way, same thing.|
|

1207
00:36:02,620 --> 00:36:04,900
0,275 275,485 485,710 710,1000
And so for the.|
对美国来说也一样。|

1208
00:36:05,070 --> 00:36:06,905
0,400 540,845 845,1150 1440,1685 1685,1835
For every single in the
对于关系数据模型的原始定义中的每一个，所有值都必须是原子值或标量值。

1209
00:36:06,905 --> 00:36:08,975
0,305 1285,1650 1650,1845 1845,1890 1890,2070
original definition of the relational

1210
00:36:08,975 --> 00:36:10,580
0,225 225,515 865,1200 1200,1395 1395,1605
data model, all the values

1211
00:36:10,580 --> 00:36:11,480
0,210 210,285 285,345 345,765 765,900
have to be atomic or

1212
00:36:11,480 --> 00:36:12,540
0,530
scalar.|
|

1213
00:36:12,580 --> 00:36:13,860
0,275 275,470 470,710 710,995 995,1280
But again, as things have
但又一次，随着时间的推移，事情发生了变化。

1214
00:36:13,860 --> 00:36:15,820
0,320 460,795 795,1130
evolved over time.|
|

1215
00:36:19,640 --> 00:36:20,875
0,305 305,590 590,800 800,1100 1100,1235
Again, CoD didn't foresee these
再说一次，鳕鱼在七十年代没有预见到这些事情，这是。

1216
00:36:20,875 --> 00:36:21,835
0,195 195,375 375,480 480,585 585,960
things back in the seventies,

1217
00:36:21,835 --> 00:36:22,840
0,210 210,485
this is.|
|

1218
00:36:23,770 --> 00:36:25,160
0,260 260,395 395,670
Support this today.|
今天就支持这一点。|

1219
00:36:25,170 --> 00:36:26,735
0,230 230,305 305,550 960,1340 1340,1565
And of course, all to
当然，所有人都在那里，所以在某些情况下，我们可以。

1220
00:36:26,735 --> 00:36:29,080
0,105 105,365 1135,1535 1855,2100 2100,2345
be there so we can

1221
00:36:29,400 --> 00:36:31,580
0,320 320,545 545,850 1020,1420
in some cases, a.|
|

1222
00:36:31,580 --> 00:36:32,795
0,240 240,525 525,800 820,1080 1080,1215
Some attributes could have a
某些属性的值可能为空，这意味着它在当时是未知的，而且您可以在模式中指定是否希望支持。

1223
00:36:32,795 --> 00:36:34,085
0,255 255,510 510,735 735,1065 1065,1290
value that is null, meaning

1224
00:36:34,085 --> 00:36:35,110
0,300 300,510 510,630 630,750 750,1025
it's unknown at the time,

1225
00:36:35,490 --> 00:36:36,530
0,275 275,410 410,530 530,680 680,1040
and again, you can specify

1226
00:36:36,530 --> 00:36:37,340
0,105 105,225 225,510 510,645 645,810
in the schema whether you

1227
00:36:37,340 --> 00:36:40,180
0,290 1150,1550 1720,2040 2040,2360
want an to support.|
|

1228
00:36:43,740 --> 00:36:45,650
0,400 570,815 815,1025 1025,1390 1560,1910
So in every relation, there's
所以在每个关系中，都会有一个主键，它将被用来唯一标识一个二元组。再一次，想象一下你的学生证，你在大学里的安卓账号。

1229
00:36:45,650 --> 00:36:46,900
0,90 90,195 195,470 640,945 945,1250
going to be a primary

1230
00:36:46,920 --> 00:36:48,485
0,400 900,1370 1370,1430 1430,1475 1475,1565
key that's going to be

1231
00:36:48,485 --> 00:36:50,345
0,180 180,345 345,905 925,1325 1555,1860
used to uniquely identify a

1232
00:36:50,345 --> 00:36:51,965
0,455 895,1200 1200,1365 1365,1485 1485,1620
tple. Again, think of like

1233
00:36:51,965 --> 00:36:53,120
0,180 180,360 360,615 615,960 960,1155
your student ID, your android

1234
00:36:53,120 --> 00:36:54,640
0,230 400,765 765,990 990,1185 1185,1520
ID here at the university.|
|

1235
00:36:56,920 --> 00:36:58,160
0,335 335,605 605,785 785,935 935,1240
Allows us to know exactly,
让我们可以确切地知道，你知道的。

1236
00:36:58,270 --> 00:36:59,940
0,230 230,460
you know.|
|

1237
00:37:01,300 --> 00:37:02,600
0,275 275,550 630,890 890,1025 1025,1300
Or record that we want
或者录下我们在做的时候想要的。

1238
00:37:03,040 --> 00:37:04,860
0,230 230,365 365,580
when we're doing.|
|

1239
00:37:05,730 --> 00:37:07,900
0,365 365,730
Example here.|
这里有个例子。|

1240
00:37:20,950 --> 00:37:24,825
0,400 2160,2560 2970,3320 3320,3650 3650,3875
A particular particular entry in
我们的Android ID中的特定条目是唯一的，因此这将是大学数据库的主要条目。

1241
00:37:24,825 --> 00:37:26,865
0,245 745,1145 1375,1725 1725,1905 1905,2040
our but your android ID

1242
00:37:26,865 --> 00:37:28,425
0,180 180,455 1045,1305 1305,1440 1440,1560
is unique and that so

1243
00:37:28,425 --> 00:37:29,150
0,120 120,270 270,375 375,465 465,725
that would be a primary

1244
00:37:29,380 --> 00:37:32,580
0,400 1530,1880 1880,2135 2135,2440
for the university database.|
|

1245
00:37:32,760 --> 00:37:33,485
0,275 275,380 380,470 470,590 590,725
What you can do in
在你没有的情况下你能做些什么。

1246
00:37:33,485 --> 00:37:34,660
0,240 240,480 480,645 795,915 915,1175
cases where you don't have.|
|

1247
00:37:36,140 --> 00:37:37,200
0,400
Private.|
私人的。|

1248
00:37:42,240 --> 00:37:43,580
0,350 350,700
Identity column.|
标识列。|

1249
00:37:45,640 --> 00:37:47,180
0,260 260,485 485,850
The primary key.|
主键。|

1250
00:37:47,310 --> 00:37:48,065
0,275 275,395 395,485 485,575 575,755
You see this a lot
如果您愿意，您可以在OM中经常看到这一点。

1251
00:37:48,065 --> 00:37:49,480
0,225 225,750 750,990 990,1125 1125,1415
in om, if you like.|
|

1252
00:37:51,340 --> 00:37:52,500
0,365 365,590 590,815 815,950 950,1160
Sql I if you're using
如果您使用的是Node JS，很多时候这些框架将把这些作为eXist的主要部分。

1253
00:37:52,500 --> 00:37:53,805
0,285 285,650 880,1110 1110,1200 1200,1305
node JS, a lot of

1254
00:37:53,805 --> 00:37:56,280
0,245 595,995 1795,2235 2235,2340 2340,2475
times these frameworks will make

1255
00:37:56,280 --> 00:37:58,960
0,255 255,770 1360,1755 1755,2150
these primaries for exist.|
|

1256
00:38:00,540 --> 00:38:01,630
0,260 260,365 365,470 470,710 710,1090
And so the primary key
因此，主键是数据库管理系统将对您的关系数据强制执行的约束。确保在任何给定关系中不存在具有相同主键的多个记录。

1257
00:38:02,100 --> 00:38:04,805
0,400 570,970 1290,1565 1565,2080 2430,2705
is, is a constraint that

1258
00:38:04,805 --> 00:38:06,020
0,150 150,405 405,720 720,960 960,1215
the database management system will

1259
00:38:06,020 --> 00:38:06,875
0,270 270,450 450,600 600,750 750,855
enforce for you on your

1260
00:38:06,875 --> 00:38:08,290
0,240 240,575 685,960 960,1125 1125,1415
relational data. Make sure that

1261
00:38:08,430 --> 00:38:10,070
0,320 320,515 515,740 740,1090 1320,1640
within any given relation there

1262
00:38:10,070 --> 00:38:12,370
0,210 210,480 480,860 1000,1400 1900,2300
does not exist a multiple

1263
00:38:12,420 --> 00:38:14,060
0,400 420,680 680,830 830,1120 1260,1640
records with the same primary

1264
00:38:14,060 --> 00:38:14,900
0,380
key.|
|

1265
00:38:17,350 --> 00:38:18,260
0,275 275,395 395,485 485,620 620,910
Talk about how to do
谈到如何在整个学期做自动身份栏目，但基本上有数据系统可以为你生成这些栏目的方法。

1266
00:38:18,430 --> 00:38:19,995
0,305 305,560 560,1060 1140,1430 1430,1565
automatic identity columns throughout the

1267
00:38:19,995 --> 00:38:21,140
0,210 210,345 345,510 510,750 750,1145
semester, but there's basically ways

1268
00:38:21,310 --> 00:38:23,130
0,400 510,910 1200,1460 1460,1640 1640,1820
data system can generate these

1269
00:38:23,130 --> 00:38:24,320
0,255 255,405 405,680
columns for you.|
|

1270
00:38:27,400 --> 00:38:29,175
0,365 365,730 1230,1490 1490,1625 1625,1775
Foreign keys and this is
外键，这是为了强制引用完整性，以确保如果我有一个二合一的关系。

1271
00:38:29,175 --> 00:38:30,870
0,180 180,390 390,990 990,1485 1485,1695
to enforce referential integrity to

1272
00:38:30,870 --> 00:38:32,355
0,150 150,465 465,860 1060,1320 1320,1485
make sure that if I

1273
00:38:32,355 --> 00:38:36,390
0,305 805,1205 3115,3495 3495,3780 3780,4035
have a two in one

1274
00:38:36,390 --> 00:38:37,380
0,350
relation.|
|

1275
00:38:37,490 --> 00:38:39,565
0,515 515,785 785,1100 1100,1660 1770,2075
Refers to another tuol in
指的是另一种关系中的另一种关系，即当天最低评估你，你知道，一个孤儿或一个或一个坏了的你，因为你从一行中删除了记录，仍然是一个悬挂点和另一行。

1276
00:38:39,565 --> 00:38:41,380
0,240 240,575 1225,1515 1515,1650 1650,1815
another relation that the day

1277
00:38:41,380 --> 00:38:43,620
0,240 240,540 540,920 1780,2010 2010,2240
minimum assessment you, you know,

1278
00:38:43,640 --> 00:38:45,030
0,260 260,590 590,770 770,1040 1040,1390
an orphan or or, or

1279
00:38:45,170 --> 00:38:47,395
0,380 380,760 1080,1480 1710,2015 2015,2225
a broken because you you

1280
00:38:47,395 --> 00:38:48,580
0,180 180,315 315,555 555,915 915,1185
delete the record from one

1281
00:38:48,580 --> 00:38:50,220
0,290 670,930 930,1050 1050,1365 1365,1640
row, still a dangley point

1282
00:38:50,300 --> 00:38:51,500
0,290 290,500 500,820
and another row.|
|

1283
00:38:52,470 --> 00:38:53,615
0,305 305,500 500,710 710,950 950,1145
Going back here to our
回到我们的数据库。

1284
00:38:53,615 --> 00:38:54,720
0,275
database.|
|

1285
00:39:07,230 --> 00:39:09,000
0,400 780,1180
In state.|
在本州。|

1286
00:39:09,570 --> 00:39:10,910
0,400 720,995 995,1100 1100,1190 1190,1340
But say we have this
但是假设我们这里有一盘混音磁带，对吗？我们有一群艺术家出现在上面。

1287
00:39:10,910 --> 00:39:12,935
0,195 195,405 405,710 1180,1580 1780,2025
mix tape here, right? We

1288
00:39:12,935 --> 00:39:13,625
0,75 75,180 180,330 330,450 450,690
have a bunch of artists

1289
00:39:13,625 --> 00:39:14,780
0,255 255,360 360,605
appear on it.|
|

1290
00:39:15,060 --> 00:39:16,380
0,260 260,335 335,550
How do we?|
我们该怎么做？|

1291
00:39:17,850 --> 00:39:19,280
0,260 260,380 380,530 530,820
On this mix tape.|
在这盘混音磁带上。|

1292
00:39:19,280 --> 00:39:20,560
0,225 225,450 450,690 690,870 870,1280
And I, the fourth relational
而我，第四个关系支持数组，最少是它的原始版本。

1293
00:39:21,450 --> 00:39:22,700
0,305 305,755 755,965 965,1085 1085,1250
support arrays, least the original

1294
00:39:22,700 --> 00:39:23,860
0,225 225,375 375,620
version of it.|
|

1295
00:39:29,170 --> 00:39:31,370
0,400 1110,1355 1355,1595 1595,1895 1895,2200
So in the data model,
因此，在数据模型中，执行此操作，您将拥有一个交叉引用表。

1296
00:39:31,630 --> 00:39:32,510
0,275 275,425 425,530 530,620 620,880
do this, you would have

1297
00:39:33,010 --> 00:39:34,840
0,275 275,455 455,725 725,1090
a cross reference table.|
|

1298
00:39:34,920 --> 00:39:35,960
0,350 350,560 560,695 695,860 860,1040
Where I can keep track
在那里我可以跟踪艺术家和专辑之间独特的关系对。

1299
00:39:35,960 --> 00:39:37,510
0,225 225,405 405,615 615,1040 1150,1550
of the unique pairs of

1300
00:39:38,100 --> 00:39:39,485
0,275 275,550 690,1025 1025,1205 1205,1385
the relationships between the artists

1301
00:39:39,485 --> 00:39:40,940
0,195 195,300 300,725
and the albums.|
|

1302
00:39:57,500 --> 00:40:00,060
0,400 810,1100 1100,1390 1440,1840
Right. And now again.|
正确的。现在又来了。|

1303
00:40:21,230 --> 00:40:22,705
0,380 380,760 960,1205 1205,1325 1325,1475
Again, it does it for
同样，它会为您做这件事，所以您只需编写相同的删除命令。

1304
00:40:22,705 --> 00:40:23,365
0,195 195,345 345,420 420,525 525,660
you, so you just write

1305
00:40:23,365 --> 00:40:25,600
0,120 120,300 300,555 555,875
the same delete command.|
|

1306
00:40:26,510 --> 00:40:27,280
0,260 260,365 365,455 455,590 590,770
The key is not all
关键并不是所有要做的事情。

1307
00:40:27,280 --> 00:40:28,160
0,135 135,380
to do.|
|

1308
00:40:28,720 --> 00:40:29,660
0,400
You.|
你。|

1309
00:40:29,810 --> 00:40:32,250
0,400 420,820 960,1360 1680,2060 2060,2440
My kind with pipeline code,
像我这样的流水线代码，我必须自己在我的应用程序代码中完成所有这些工作，才能遵循这些指针，找到我正在寻找的东西，确保我没有这些-这些依赖项。

1310
00:40:32,660 --> 00:40:33,610
0,410 410,500 500,650 650,800 800,950
I'd have to do all

1311
00:40:33,610 --> 00:40:35,020
0,255 255,615 615,900 900,1140 1140,1410
that myself in my application

1312
00:40:35,020 --> 00:40:36,250
0,255 255,465 465,675 675,900 900,1230
code to follow those pointers,

1313
00:40:36,250 --> 00:40:36,910
0,135 135,270 270,435 435,555 555,660
to go find the things

1314
00:40:36,910 --> 00:40:37,570
0,165 165,285 285,450 450,540 540,660
I'm looking for, to make

1315
00:40:37,570 --> 00:40:38,230
0,180 180,285 285,360 360,540 540,660
sure that I don't have

1316
00:40:38,230 --> 00:40:41,180
0,290 1480,1880 1930,2570
these, these dependencies.|
|

1317
00:40:44,300 --> 00:40:45,085
0,230 230,335 335,485 485,635 635,785
The way you do this
你这样做的方式是。

1318
00:40:45,085 --> 00:40:46,300
0,275
is.|
|

1319
00:41:05,030 --> 00:41:06,745
0,260 260,680 680,995 995,1360 1410,1715
Throw errors if, if you're
如果，如果要违反，抛出错误。

1320
00:41:06,745 --> 00:41:07,800
0,45 45,120 120,515
going to violate.|
|

1321
00:41:10,360 --> 00:41:11,600
0,245 245,490 690,920 920,995 995,1240
The last, you can have
最后，你可以有约束。

1322
00:41:12,610 --> 00:41:14,420
0,820
constraints.|
|

1323
00:41:15,070 --> 00:41:16,650
0,335 335,670 1110,1370 1370,1475 1475,1580
Protection mechanism. You can have
保护机制。您可以使数据系统生效，以确保数据遵循符合某些域或您的值的适当值。

1324
00:41:16,650 --> 00:41:17,385
0,105 105,240 240,390 390,525 525,735
the data system in force

1325
00:41:17,385 --> 00:41:18,960
0,180 180,330 330,525 525,815 1195,1575
to make sure that data

1326
00:41:18,960 --> 00:41:21,500
0,380 610,1010 1090,1490 1900,2220 2220,2540
follows the proper has values

1327
00:41:21,640 --> 00:41:23,160
0,335 335,620 620,1130 1130,1370 1370,1520
that that conform to some

1328
00:41:23,160 --> 00:41:25,455
0,105 105,195 195,440 1900,2160 2160,2295
kind of domain or that

1329
00:41:25,455 --> 00:41:26,160
0,275
you.|
|

1330
00:41:26,260 --> 00:41:27,540
0,380
Um.|
恩。|

1331
00:41:27,630 --> 00:41:28,395
0,60 60,120 120,255 255,525 525,765
You don't have values or
你没有价值观，也没有两极能带给你勇气和其他东西。

1332
00:41:28,395 --> 00:41:30,315
0,135 135,345 345,605 1495,1755 1755,1920
two poles that take you

1333
00:41:30,315 --> 00:41:32,160
0,305 385,735 735,1005 1005,1325
scre and other things.|
|

1334
00:41:32,280 --> 00:41:33,530
0,350 350,700 720,995 995,1115 1115,1250
The idea that you can
可以为给定属性指定的概念。

1335
00:41:33,530 --> 00:41:36,040
0,500 1120,1515 1515,1755 1755,2000 2050,2510
specify for a given attribute.|
|

1336
00:41:36,760 --> 00:41:38,880
0,305 305,590 590,860 860,1150 1860,2120
Or within the global, with
或在全局内、具有给定属性或跨多个表的给定表。我可以让每一次我进行修改或任何这些约束被违反，如果是，那么我抛出一个错误，我不让你做任何改变。所以，再次回到这个例子。她以前带过的。那么，如果有人在您的专栏中写了一个字符串字符怎么办？

1337
00:41:38,880 --> 00:41:39,870
0,135 135,360 360,645 645,780 780,990
a given attribute or given

1338
00:41:39,870 --> 00:41:41,715
0,350 370,660 660,915 915,1280 1570,1845
table across multiple tables. I

1339
00:41:41,715 --> 00:41:43,680
0,270 270,665 1285,1605 1605,1815 1815,1965
can have every single time

1340
00:41:43,680 --> 00:41:45,225
0,105 105,210 210,315 315,740 1270,1545
I make a modification or

1341
00:41:45,225 --> 00:41:46,170
0,150 150,285 285,435 435,795 795,945
any of these constraints being

1342
00:41:46,170 --> 00:41:48,645
0,530 1030,1430 1450,1800 1800,2150 2230,2475
violated, if if yes, then

1343
00:41:48,645 --> 00:41:49,520
0,150 150,345 345,465 465,585 585,875
I throw an error and,

1344
00:41:49,630 --> 00:41:50,325
0,245 245,350 350,500 500,590 590,695
and I don't let you

1345
00:41:50,325 --> 00:41:51,960
0,165 165,360 360,540 540,845 1375,1635
make make any changes. So

1346
00:41:51,960 --> 00:41:53,265
0,260 580,870 870,990 990,1095 1095,1305
again, back to the example.

1347
00:41:53,265 --> 00:41:54,180
0,195 195,315 315,405 405,635 655,915
She brought it before. Well,

1348
00:41:54,180 --> 00:41:55,380
0,105 105,225 225,435 435,770 880,1200
what if someone writes a

1349
00:41:55,380 --> 00:41:56,960
0,240 240,555 555,930 930,1245 1245,1580
string character in your column?|
|

1350
00:41:57,440 --> 00:41:59,260
0,330 330,585 585,915 915,1280
For my CS file.|
用于我的CS文件。|

1351
00:41:59,930 --> 00:42:00,805
0,260 260,425 425,605 605,755 755,875
The Davis system might actually
戴维斯系统实际上可能会阻止你这样做，如果你把这些放在sh类别中，因为你会知道，好的，你正在试图存储一些东西。

1352
00:42:00,805 --> 00:42:01,615
0,150 150,300 300,405 405,570 570,810
prevent you from doing that

1353
00:42:01,615 --> 00:42:02,320
0,195 195,315 315,450 450,585 585,705
if you had these in

1354
00:42:02,320 --> 00:42:03,510
0,255 255,570 570,735 735,885 885,1190
category sh because would know,

1355
00:42:03,920 --> 00:42:04,645
0,245 245,395 395,470 470,590 590,725
okay, you're trying to store

1356
00:42:04,645 --> 00:42:05,500
0,275
something.|
|

1357
00:42:05,510 --> 00:42:06,460
0,245 245,350 350,515 515,710 710,950
Try to sort a character
尝试将字符排序到整型列中。我不能让你在犯错的时候那样做。

1358
00:42:06,460 --> 00:42:08,140
0,350 400,675 675,1020 1020,1280 1390,1680
into an integer column. I

1359
00:42:08,140 --> 00:42:08,740
0,180 180,270 270,390 390,495 495,600
can't let you do that

1360
00:42:08,740 --> 00:42:10,120
0,240 240,465 465,710
in an error.|
|

1361
00:42:10,770 --> 00:42:11,555
0,245 245,335 335,425 425,575 575,785
You can do other things
您可以执行其他操作，如确保年份必须大于100或大于0。

1362
00:42:11,555 --> 00:42:12,940
0,225 225,465 465,705 705,1005 1005,1385
like make sure that the

1363
00:42:13,350 --> 00:42:14,300
0,290 290,530 530,740 740,845 845,950
the year has to be

1364
00:42:14,300 --> 00:42:15,830
0,165 165,470 580,1200 1200,1365 1365,1530
greater than 100 or greater

1365
00:42:15,830 --> 00:42:17,080
0,225 225,530
than zero.|
|

1366
00:42:17,830 --> 00:42:18,720
0,230 230,305 305,425 425,635 635,890
And the d system will
D系统将为您强制执行这一点。

1367
00:42:18,720 --> 00:42:20,360
0,210 210,390 390,555 555,830
enforce that for you.|
|

1368
00:42:20,710 --> 00:42:21,750
0,245 245,395 395,620 620,965 965,1040
The most common constraints that
最常见的限制是存在的。

1369
00:42:21,750 --> 00:42:22,880
0,60 60,180 180,470
are out there.|
|

1370
00:42:26,210 --> 00:42:27,210
0,290 290,440 440,620 620,770 770,1000
Things could happen for you.|
事情可能会发生在你身上。|

1371
00:42:44,760 --> 00:42:45,440
0,260 260,410 410,500 500,590 590,680
And doesn't let you make
不让你做改变。

1372
00:42:45,440 --> 00:42:46,880
0,120 120,380
the change.|
|

1373
00:42:52,800 --> 00:42:53,915
0,275 275,410 410,605 605,905 905,1115
But again, we find this
但再一次，我们在我们的方案中发现了这一点，种族名称是不能确保执行的。所以现在你知道了，如果你知道了也很重要。

1374
00:42:53,915 --> 00:42:54,890
0,105 105,270 270,615 615,810 810,975
in our schema and, and

1375
00:42:54,890 --> 00:42:55,595
0,105 105,315 315,405 405,495 495,705
the racial name is doesn't

1376
00:42:55,595 --> 00:42:57,110
0,165 165,330 330,605 775,1175 1225,1515
make sure that the going

1377
00:42:57,110 --> 00:42:58,910
0,290 430,705 705,980 1450,1695 1695,1800
enforce. So now you know

1378
00:42:58,910 --> 00:43:00,400
0,225 225,585 585,825 825,1070
matter if you know.|
|

1379
00:43:01,240 --> 00:43:03,795
0,550 960,1460 1460,1780 2190,2450 2450,2555
Python he's jail. You have
巨蟒，他进监狱了。你必须开始做出改变。他们知道你知道数据库里发生了什么。达蒂森将阻止你从脚上射出炮弹并做出改变。

1380
00:43:03,795 --> 00:43:05,025
0,165 165,330 330,480 480,785 955,1230
to start making changes. They

1381
00:43:05,025 --> 00:43:05,895
0,255 255,480 480,585 585,765 765,870
know you know what's going

1382
00:43:05,895 --> 00:43:07,620
0,120 120,195 195,270 270,515 1255,1725
on in the database. Datison

1383
00:43:07,620 --> 00:43:08,450
0,150 150,315 315,420 420,540 540,830
will prevent you from shooting

1384
00:43:08,470 --> 00:43:09,810
0,290 290,425 425,545 545,820 1080,1340
shell from the foot and

1385
00:43:09,810 --> 00:43:11,140
0,195 195,530
making changes.|
|

1386
00:43:11,450 --> 00:43:13,020
0,260 260,790
These constraints.|
这些限制。|

1387
00:43:19,510 --> 00:43:20,355
0,230 230,365 365,530 530,680 680,845
All right, so now we've
好了，现在我们要谈谈我们实际上想要如何与数据库交互。假设我们建立了，我们定义了什么，我们的数据库和关系将是什么样子。我们想谈谈我们到底想怎么做。

1388
00:43:20,355 --> 00:43:20,850
0,45 45,120 120,210 210,345 345,495
got to talk about how

1389
00:43:20,850 --> 00:43:21,540
0,150 150,270 270,345 345,480 480,690
we actually want to interact

1390
00:43:21,540 --> 00:43:23,535
0,165 165,410 910,1260 1260,1610 1750,1995
the database. Assuming we set

1391
00:43:23,535 --> 00:43:25,380
0,245 625,960 960,1230 1230,1515 1515,1845
up, we define what, what

1392
00:43:25,380 --> 00:43:26,505
0,255 255,480 480,735 735,960 960,1125
our database and relations are

1393
00:43:26,505 --> 00:43:28,605
0,60 60,105 105,210 210,485 1855,2100
going to look like. We

1394
00:43:28,605 --> 00:43:29,385
0,75 75,135 135,225 225,485 535,780
want to talk about how

1395
00:43:29,385 --> 00:43:31,640
0,150 150,315 315,465 465,755
we actually want to.|
|

1396
00:43:31,740 --> 00:43:32,800
0,260 260,395 395,680 680,800 800,1060
To run queries on it.|
对其运行查询。|

1397
00:43:33,430 --> 00:43:34,980
0,400 810,1070 1070,1190 1190,1355 1355,1550
So at a high level,
因此，在更高的层面上，有两种基本的方法来做到这一点。有过程性语言和非过程性语言。

1398
00:43:34,980 --> 00:43:36,090
0,225 225,375 375,630 630,945 945,1110
there's two basic approaches to

1399
00:43:36,090 --> 00:43:37,695
0,90 90,350 640,1005 1005,1080 1080,1605
do this. There's the procedural

1400
00:43:37,695 --> 00:43:39,960
0,300 300,540 540,945 945,1235
and non procedural languages.|
|

1401
00:43:42,810 --> 00:43:44,020
0,335 335,670
The exact.|
一模一样。|

1402
00:43:44,030 --> 00:43:45,480
0,260 260,365 365,500 500,790
What the day assessment?|
当天的评估是什么？|

1403
00:43:46,260 --> 00:43:46,865
0,260 260,350 350,425 425,515 515,605
Whatever it is that you
无论你想要什么。

1404
00:43:46,865 --> 00:43:47,640
0,245
want.|
|

1405
00:43:49,150 --> 00:43:50,560
0,400
The.|
这个。|

1406
00:43:50,560 --> 00:43:51,860
0,350
The.|
这个。|

1407
00:43:52,710 --> 00:43:54,560
0,290 290,695 695,970 1200,1565 1565,1850
Non procedural one is where
非过程性问题，你会说，这就是答案，我想让你计算。我不知道怎么算，你自己算吧。

1408
00:43:54,560 --> 00:43:55,955
0,150 150,270 270,560 880,1290 1290,1395
you would say, here's the

1409
00:43:55,955 --> 00:43:56,675
0,180 180,390 390,525 525,630 630,720
answer, I want you to

1410
00:43:56,675 --> 00:43:58,040
0,425 625,870 870,1020 1020,1140 1140,1365
compute. I don't know how

1411
00:43:58,040 --> 00:43:59,570
0,165 165,435 435,710 1030,1335 1335,1530
to compute it, you figure

1412
00:43:59,570 --> 00:44:00,560
0,135 135,380
it out.|
|

1413
00:44:01,460 --> 00:44:03,020
0,335 335,790
So relational.|
太相关了。|

1414
00:44:03,730 --> 00:44:05,640
0,400 540,940 990,1475 1475,1625 1625,1910
And the sql or relational
而SQL或关系演算将是非过程性的、声明性的。我们不会讨论关系微积分，因为你不知道它。

1415
00:44:05,640 --> 00:44:06,710
0,450 450,585 585,705 705,810 810,1070
calculus is going to be

1416
00:44:07,420 --> 00:44:09,675
0,305 305,830 830,1480 1860,2150 2150,2255
non procedural, declarative. We're not

1417
00:44:09,675 --> 00:44:10,305
0,105 105,180 180,285 285,375 375,630
going to cover a relational

1418
00:44:10,305 --> 00:44:11,820
0,465 465,645 645,765 765,1115 1255,1515
calculus because you don't know

1419
00:44:11,820 --> 00:44:13,540
0,260
it.|
|

1420
00:44:13,610 --> 00:44:15,400
0,245 245,490 780,1160 1160,1325 1325,1790
You know, I've never usedial
你知道吗，我从来没有用过刻度盘微积分，你呢？从来没有，只有理论论文，我们没有做，我们不在乎。

1421
00:44:15,400 --> 00:44:18,550
0,270 270,375 375,620 910,1310 2830,3150
calculus, have you? Never, only

1422
00:44:18,550 --> 00:44:19,615
0,180 180,345 345,650 670,930 930,1065
the theory papers, which we're

1423
00:44:19,615 --> 00:44:20,215
0,90 90,255 255,375 375,525 525,600
not doing, we don't care

1424
00:44:20,215 --> 00:44:21,860
0,245
about.|
|

1425
00:44:21,860 --> 00:44:22,565
0,120 120,210 210,360 360,525 525,705
But it is. It is.
但它是。它是。房子是要工作的，如果你的宝宝提出一个查询，优化微积分，但在现实世界中。

1426
00:44:22,565 --> 00:44:23,590
0,330 330,570 570,660 660,765 765,1025
House is going to work

1427
00:44:24,120 --> 00:44:25,145
0,275 275,410 410,650 650,905 905,1025
if your baby putting a

1428
00:44:25,145 --> 00:44:27,950
0,225 225,635 1075,1650 1650,2015 2545,2805
query, optimize calculus, but in

1429
00:44:27,950 --> 00:44:29,080
0,120 120,255 255,530
the real world.|
|

1430
00:44:29,290 --> 00:44:30,900
0,260 260,500 500,1115 1115,1415 1415,1610
But relational algebra is not
但关系代数并不是什么东西。

1431
00:44:30,900 --> 00:44:31,720
0,290
something.|
|

1432
00:44:31,900 --> 00:44:32,640
0,75 75,195 195,345 345,480 480,740
You don't get the job,
你得不到这份工作，但这会的。

1433
00:44:33,530 --> 00:44:35,120
0,260 260,395 395,575 575,880
but this will be.|
|

1434
00:44:35,670 --> 00:44:38,285
0,245 245,335 335,580 1920,2300 2300,2615
We want to to run
我们想要运行查询和建立执行引擎。我们以后想要在高层次上称之为关系的所有东西。然后，是的，我们将复习一下。

1435
00:44:38,285 --> 00:44:39,425
0,345 345,480 480,705 705,945 945,1140
queries and build execution engine.

1436
00:44:39,425 --> 00:44:40,460
0,180 180,315 315,465 465,750 750,1035
All the things we later

1437
00:44:40,460 --> 00:44:41,770
0,290 640,900 900,990 990,1065 1065,1310
on we want to call

1438
00:44:41,820 --> 00:44:42,800
0,440 440,635 635,695 695,815 815,980
relational at a high level.

1439
00:44:42,800 --> 00:44:44,285
0,135 135,380 460,860 1000,1305 1305,1485
And then, yes, we'll go

1440
00:44:44,285 --> 00:44:45,840
0,335 535,855 855,1175
over through the.|
|

1441
00:44:45,840 --> 00:44:48,285
0,350 520,920 1630,1890 1890,2145 2145,2445
The course is the modern
这门课是它的现代变种。

1442
00:44:48,285 --> 00:44:49,480
0,300 300,435 435,695
variance of it.|
|

1443
00:44:51,310 --> 00:44:53,360
0,365 365,725 725,1120
Alright, so the.|
好的，所以。|

1444
00:44:53,480 --> 00:44:54,760
0,400
Uh.|
呃。|

1445
00:44:54,760 --> 00:44:56,520
0,380
Rac.|
RAC。|

1446
00:44:57,450 --> 00:44:59,570
0,640 900,1205 1205,1415 1415,1720 1770,2120
69 you also define the
69您还定义了用于与数据库系统交互的代数，这是从其中提取数据的方法。

1447
00:44:59,570 --> 00:45:01,670
0,225 225,830 1600,1860 1860,1965 1965,2100
the algebra that you would

1448
00:45:01,670 --> 00:45:02,795
0,210 210,450 450,690 690,900 900,1125
use to interact with database

1449
00:45:02,795 --> 00:45:03,875
0,240 240,465 465,705 705,810 810,1080
system, and it's the way

1450
00:45:03,875 --> 00:45:05,800
0,395 835,1185 1185,1470 1470,1665 1665,1925
to extract data from it.|
|

1451
00:45:08,430 --> 00:45:10,220
0,400 630,1025 1025,1300 1380,1655 1655,1790
And compute answers that you
并计算出你想要的答案。

1452
00:45:10,220 --> 00:45:11,100
0,260
want.|
|

1453
00:45:11,110 --> 00:45:12,450
0,260 260,455 455,770 770,1085 1085,1340
So its original paper, he
所以它最初的论文，他定义了七个基本运算符，它一直存在。

1454
00:45:12,450 --> 00:45:15,045
0,320 790,1125 1125,1425 1425,1970 2290,2595
defined seven fundamental operators it

1455
00:45:15,045 --> 00:45:16,280
0,180 180,420 420,665
since it's been.|
|

1456
00:45:16,280 --> 00:45:18,725
0,380 1720,2055 2055,2235 2235,2340 2340,2445
Additional operations you need in
在这样的现代应用程序中，您需要的其他操作没有排序。

1457
00:45:18,725 --> 00:45:20,375
0,245 265,665 925,1230 1230,1410 1410,1650
modern applications like this doesn't

1458
00:45:20,375 --> 00:45:21,640
0,180 180,665
have sorting.|
|

1459
00:45:21,830 --> 00:45:23,305
0,320 320,640 810,1145 1145,1325 1325,1475
And obviously, applications you need
显然，你需要对应用程序进行分类，所以这是后来的事情。

1460
00:45:23,305 --> 00:45:24,240
0,300 300,420 420,525 525,660 660,935
sorting, so that came later.|
|

1461
00:45:24,910 --> 00:45:26,670
0,400 990,1340 1340,1550 1550,1670 1670,1760
But all this is going
但所有这些都将建立在。

1462
00:45:26,670 --> 00:45:28,760
0,45 45,135 135,375 375,740
to be based on.|
|

1463
00:45:30,000 --> 00:45:32,645
0,245 245,490 900,1400 1400,1750 2250,2645
To order lists of records
订购记录清单或在订购清单上复制两份记录，但不得复制。

1464
00:45:32,645 --> 00:45:35,165
0,255 255,755 1825,2100 2100,2295 2295,2520
or duplicate on order list

1465
00:45:35,165 --> 00:45:37,385
0,210 210,665 1495,1740 1740,1935 1935,2220
of twoils, but without any

1466
00:45:37,385 --> 00:45:38,720
0,605
duplicates.|
|

1467
00:45:38,850 --> 00:45:40,340
0,400 420,740 740,860 860,1070 1070,1490
Now, what's been slightly confusing
现在，有一点令人困惑的是，在SQL中，默认情况下它会尝试使用袋代数，这基本上是一个无序集合，确实有重复的，或者有时它被称为多集合。嗯，这就是为什么SQL想要使用袋子而不是集合，因为如果你不关心以后删除重复项，实际上你会更有效率。

1468
00:45:40,340 --> 00:45:42,220
0,210 210,470 580,975 975,1320 1320,1880
is that in, in sql

1469
00:45:42,720 --> 00:45:43,820
0,400 450,740 740,950 950,1010 1010,1100
by default it's going to

1470
00:45:43,820 --> 00:45:45,070
0,105 105,180 180,330 330,600 600,1250
try to use bag algebra,

1471
00:45:45,540 --> 00:45:47,135
0,260 260,395 395,670 810,1100 1100,1595
which is basically an unordered

1472
00:45:47,135 --> 00:45:48,670
0,255 255,540 540,795 795,1020 1020,1535
set that does have duplicates

1473
00:45:49,170 --> 00:45:50,135
0,260 260,500 500,800 800,875 875,965
or sometimes it's called a

1474
00:45:50,135 --> 00:45:52,175
0,210 210,575 835,1235 1705,1950 1950,2040
multi set. Um, and the

1475
00:45:52,175 --> 00:45:53,360
0,180 180,450 450,870 870,1080 1080,1185
reason why sql wants to

1476
00:45:53,360 --> 00:45:54,395
0,120 120,405 405,645 645,765 765,1035
use bags instead of sets,

1477
00:45:54,395 --> 00:45:55,805
0,255 255,495 495,785 1015,1275 1275,1410
because it's actually you be

1478
00:45:55,805 --> 00:45:56,705
0,180 180,420 420,615 615,720 720,900
more efficient if you don't

1479
00:45:56,705 --> 00:45:58,055
0,105 105,365 475,840 840,1170 1170,1350
care about removing duplicates later

1480
00:45:58,055 --> 00:45:58,740
0,305
on.|
|

1481
00:45:59,800 --> 00:46:00,600
0,425 425,500 500,575 575,680 680,800
Algebra that we care about
我们在这里关心的代数，我们假设我们要去掉委托。

1482
00:46:00,600 --> 00:46:01,605
0,260 460,735 735,855 855,975 975,1005
here, we assume we're going

1483
00:46:01,605 --> 00:46:02,300
0,45 45,120 120,195 195,270 270,695
to get rid of delegates.|
|

1484
00:46:03,180 --> 00:46:04,055
0,245 245,335 335,560 560,785 785,875
So the basic idea of
所以所有这些运算符的基本思想是，你要把一些，一些，一些关系作为你的输入，或者你的一个或多个输入，然后你要对它们进行一些运算，然后产生一个新的关系作为输出。

1485
00:46:04,055 --> 00:46:05,435
0,120 120,270 270,755 985,1245 1245,1380
all these operators is that

1486
00:46:05,435 --> 00:46:07,420
0,150 150,225 225,485 505,905 1585,1985
you're going take some, some,

1487
00:46:07,740 --> 00:46:08,950
0,290 290,485 485,650 650,860 860,1210
some relation as your input

1488
00:46:09,330 --> 00:46:11,015
0,320 320,500 500,605 605,850 1440,1685
or one or more of

1489
00:46:11,015 --> 00:46:12,365
0,150 150,575 715,960 960,1110 1110,1350
your inputs and then you're,

1490
00:46:12,365 --> 00:46:13,010
0,150 150,195 195,285 285,420 420,645
you're going to do some

1491
00:46:13,010 --> 00:46:14,170
0,270 270,465 465,720 720,930 930,1160
operation on them and then

1492
00:46:14,430 --> 00:46:15,485
0,260 260,410 410,620 620,860 860,1055
produce a new relation as

1493
00:46:15,485 --> 00:46:16,580
0,225 225,575
the output.|
|

1494
00:46:16,620 --> 00:46:17,825
0,260 260,350 350,440 440,700 840,1205
And you can start chaining
你可以开始把所有这些运算符链接在一起来做更复杂的事情。

1495
00:46:17,825 --> 00:46:19,900
0,240 240,545 1105,1380 1380,1740 1740,2075
all these, these operators together

1496
00:46:19,980 --> 00:46:21,250
0,245 245,365 365,640 660,965 965,1270
to do more complex things.|
|

1497
00:46:23,030 --> 00:46:23,465
0,45 45,105 105,240 240,360 360,435
So we'll go through each
因此，我们将逐一介绍这些内容。

1498
00:46:23,465 --> 00:46:24,130
0,75 75,180 180,300 300,405 405,665
of these one by one.|
|

1499
00:46:25,440 --> 00:46:27,005
0,485 485,755 755,1000 1200,1445 1445,1565
Innovations aren't working. I don't
创新并没有奏效。我不知道为什么，但这是可以的，一次展示所有的东西。

1500
00:46:27,005 --> 00:46:27,940
0,75 75,270 270,450 450,660 660,935
know why, but that's okay,

1501
00:46:29,880 --> 00:46:30,910
0,350 350,545 545,650 650,770 770,1030
showing everything all at once.|
|

1502
00:46:39,010 --> 00:46:40,425
0,305 305,610 660,1010 1010,1265 1265,1415
First, use as select, but
首先，使用AS SELECT，但我认为原来的纸叫限制的东西对吗？但是您试图限制SELECT运算符中的两个规范和思想，您将定义一阶谓词逻辑，以指定哪些Tubol将与SELECT运算符尝试执行的操作相匹配。

1503
00:46:40,425 --> 00:46:41,450
0,75 75,165 165,270 270,515 625,1025
I think the original paper

1504
00:46:41,500 --> 00:46:44,450
0,290 290,545 545,910 2340,2645 2645,2950
calls that restrict thing right?

1505
00:46:44,800 --> 00:46:45,675
0,260 260,425 425,515 515,680 680,875
But you're trying to restrict

1506
00:46:45,675 --> 00:46:48,180
0,150 150,425 925,1475 2065,2325 2325,2505
the two etiquette and the

1507
00:46:48,180 --> 00:46:49,995
0,320 580,930 930,1215 1215,1530 1530,1815
idea in your select operator,

1508
00:46:49,995 --> 00:46:51,015
0,195 195,255 255,360 360,635 715,1020
you're going to define first

1509
00:46:51,015 --> 00:46:53,600
0,270 270,660 660,935 1525,1920 1920,2585
order predicate logic to specify

1510
00:46:53,800 --> 00:46:55,790
0,350 350,710 710,965 965,1330 1590,1990
what tubol will match what

1511
00:46:55,900 --> 00:46:57,465
0,380 380,760 990,1280 1280,1445 1445,1565
select operator is trying to

1512
00:46:57,465 --> 00:46:58,160
0,245
do.|
|

1513
00:46:59,150 --> 00:47:01,290
0,425 425,800 800,1010 1010,1360 1740,2140
It's boolean logic, like something
这是布尔逻辑，比如某事等于某事或某事小于某事，但你可以有合取和或析取，或者。

1514
00:47:01,340 --> 00:47:02,455
0,275 275,530 530,770 770,935 935,1115
equals something or something less

1515
00:47:02,455 --> 00:47:03,775
0,150 150,425 865,1125 1125,1230 1230,1320
than something, but you can

1516
00:47:03,775 --> 00:47:05,665
0,105 105,720 720,1065 1065,1335 1335,1890
have conjunctions and or disjunctions,

1517
00:47:05,665 --> 00:47:07,460
0,335
or.|
|

1518
00:47:47,470 --> 00:47:49,380
0,290 290,580 600,890 890,1180
PR is down below.|
公关在下面。|

1519
00:47:52,850 --> 00:47:54,115
0,400 420,680 680,815 815,1025 1025,1265
On whatever your target table
不管你的目标桌子是什么。

1520
00:47:54,115 --> 00:47:54,960
0,305
is.|
|

1521
00:47:58,790 --> 00:48:01,420
0,335 335,575 575,880 1260,1870
Next operator is projection.|
下一个运算符是投影。|

1522
00:48:01,460 --> 00:48:02,245
0,305 305,395 395,515 515,620 620,785
I'm not good at Greek
我不擅长这个希腊符号，它很容易记住，因为它是一个低圆周率符号。

1523
00:48:02,245 --> 00:48:03,055
0,330 330,465 465,585 585,690 690,810
symbols for this one, it's

1524
00:48:03,055 --> 00:48:03,955
0,90 90,225 225,435 435,705 705,900
easy to remember because it's

1525
00:48:03,955 --> 00:48:06,860
0,75 75,335 355,755 985,1385
a low pi symbol.|
|

1526
00:48:07,220 --> 00:48:09,080
0,260 260,440 440,665 665,970
And the idea here?|
这里的想法是什么？|

1527
00:48:10,440 --> 00:48:12,370
0,290 290,455 455,680 680,1030 1530,1930
As as your input and
只要你的输入和指定你想在输出中得到的运算符的输出，这样你就可以重新安排属性的顺序，你就可以删除属性了。你不知道，你不知道。

1528
00:48:13,050 --> 00:48:14,390
0,605 605,815 815,995 995,1190 1190,1340
specify what you want to

1529
00:48:14,390 --> 00:48:15,490
0,150 150,315 315,585 585,840 840,1100
be in the output of

1530
00:48:15,870 --> 00:48:17,105
0,400 510,845 845,1010 1010,1085 1085,1235
of the output of the

1531
00:48:17,105 --> 00:48:18,620
0,305 625,870 870,960 960,1095 1095,1515
operator so you can rearrange

1532
00:48:18,620 --> 00:48:19,730
0,300 300,540 540,825 825,915 915,1110
the the ordering of the

1533
00:48:19,730 --> 00:48:22,205
0,410 820,1125 1125,1430 1750,2150 2170,2475
attributes, you can remove attributes.

1534
00:48:22,205 --> 00:48:23,700
0,105 105,360 360,645 645,1115
You don't, you don't.|
|

1535
00:48:24,100 --> 00:48:25,230
0,260 260,350 350,425 425,530 530,1130
And then you can manipulate
然后，您可以操作属性的值以生成新的值。

1536
00:48:25,230 --> 00:48:26,570
0,180 180,440 520,765 765,930 930,1340
the values of the attributes

1537
00:48:26,890 --> 00:48:29,450
0,400 930,1235 1235,1490 1490,1840 2160,2560
to to generate new value.|
|

1538
00:48:30,560 --> 00:48:32,665
0,400 1260,1595 1595,1760 1760,1880 1880,2105
Um, again. But it's only
嗯，再来一次。但它只在任何给予它的东西上运作。

1539
00:48:32,665 --> 00:48:35,050
0,285 285,435 435,695 1405,2220 2220,2385
operating on whatever that's given

1540
00:48:35,050 --> 00:48:35,860
0,150 150,380
to it.|
|

1541
00:48:53,600 --> 00:48:55,350
0,260 260,635 635,1000 1260,1505 1505,1750
To subtract by a hundred.|
减去一百。|

1542
00:49:05,020 --> 00:49:07,490
0,245 245,380 380,670 870,1450 2070,2470
So now we operators that.|
所以现在我们来操控。|

1543
00:49:08,220 --> 00:49:11,450
0,400 1410,1670 1670,1850 1850,2170 2850,3230
Take that, take multiple relations
拿来，把多重关系作为他们的输入。

1544
00:49:11,450 --> 00:49:12,820
0,255 255,465 465,800
as their input.|
|

1545
00:49:13,110 --> 00:49:14,200
0,305 305,470 470,620 620,800 800,1090
So in the, in the,
所以在，在，在并运算符中，它是一个二元运算符，所以你可以使用集合论中的运算。

1546
00:49:14,610 --> 00:49:15,725
0,260 260,380 380,640 720,980 980,1115
in the union operator, it's

1547
00:49:15,725 --> 00:49:16,655
0,60 60,360 360,630 630,840 840,930
a binary operator, so you

1548
00:49:16,655 --> 00:49:18,650
0,245 895,1275 1275,1590 1590,1815 1815,1995
can use operation from set

1549
00:49:18,650 --> 00:49:19,600
0,290
theory.|
|

1550
00:49:19,930 --> 00:49:21,390
0,395 395,710 710,965 965,1205 1205,1460
General relation that contains all
包含出现在一个关系或两个关系上的所有关系的一般关系。

1551
00:49:21,390 --> 00:49:23,030
0,350 460,765 765,1020 1020,1305 1305,1640
the that either appear on

1552
00:49:23,470 --> 00:49:25,470
0,380 380,695 695,1030 1110,1510 1710,2000
the one relations or both

1553
00:49:25,470 --> 00:49:26,820
0,165 165,440
the relations.|
|

1554
00:49:26,890 --> 00:49:28,480
0,320 320,640
So here.|
所以在这里。|

1555
00:49:39,040 --> 00:49:40,160
0,320
Look.|
看。|

1556
00:49:44,350 --> 00:49:45,840
0,260 260,470 470,820
The union court.|
联邦法院。|

1557
00:49:47,200 --> 00:49:48,390
0,290 290,530 530,755 755,935 935,1190
So union will get in,
所以联合会加入，SQL会去掉重复的。如果您想保留副本并使其运行得更快，您可以添加它的联合ALL。

1558
00:49:48,390 --> 00:49:49,410
0,465 465,675 675,810 810,915 915,1020
sql, will get rid of

1559
00:49:49,410 --> 00:49:50,355
0,120 120,540 540,750 750,855 855,945
the duplicates. If you want

1560
00:49:50,355 --> 00:49:51,210
0,120 120,285 285,420 420,765 765,855
to keep the duplicates and

1561
00:49:51,210 --> 00:49:52,800
0,75 75,165 165,300 300,590 1360,1590
make it run faster, you

1562
00:49:52,800 --> 00:49:54,195
0,90 90,350 400,735 735,1035 1035,1395
would add its union all

1563
00:49:54,195 --> 00:49:55,620
0,395
al.|
|

1564
00:49:56,640 --> 00:49:57,470
0,335 335,530 530,620 620,710 710,830
We want to worry about
我们想要担心这一点。

1565
00:49:57,470 --> 00:49:58,420
0,260
that.|
|

1566
00:49:59,470 --> 00:50:00,345
0,260 260,410 410,605 605,770 770,875
Just like you, we also
就像你一样，我们也有交集，一样的东西。我们可以坐第二班和第二班。

1567
00:50:00,345 --> 00:50:01,980
0,90 90,545 775,1095 1095,1395 1395,1635
have intersection, same thing. We

1568
00:50:01,980 --> 00:50:04,820
0,150 150,390 390,740 2230,2535 2535,2840
can take the take two

1569
00:50:06,010 --> 00:50:07,340
0,400
and.|
|

1570
00:50:07,620 --> 00:50:08,920
0,400
The.|
这个。|

1571
00:50:10,900 --> 00:50:12,020
0,260 260,380 380,640
At the pier.|
在码头。|

1572
00:50:15,600 --> 00:50:16,880
0,275 275,515 515,860 860,1115 1115,1280
A difference is to take
不同之处在于，将所有这两个安装程序都吐出第一个安装程序中出现的所有安装程序，而不是第二个安装程序。

1573
00:50:16,880 --> 00:50:18,290
0,165 165,360 360,585 585,980 1090,1410
all the two installations and

1574
00:50:18,290 --> 00:50:19,390
0,195 195,345 345,585 585,810 810,1100
spit out all ones that

1575
00:50:19,950 --> 00:50:20,870
0,245 245,320 320,455 455,695 695,920
appear in the first one,

1576
00:50:20,870 --> 00:50:21,820
0,150 150,300 300,450 450,630 630,950
but not the second one.|
|

1577
00:50:23,390 --> 00:50:24,310
0,260 260,470 470,710 710,830 830,920
And it cool you would
你可以把这个和。

1578
00:50:24,310 --> 00:50:26,480
0,150 150,330 330,570 570,920
use this with the.|
|

1579
00:50:28,040 --> 00:50:29,260
0,320 320,605 605,860 860,1055 1055,1220
This basic set theory, this
这个基本的集合论，这并不应该让任何人感到惊讶。

1580
00:50:29,260 --> 00:50:30,355
0,120 120,380 430,705 705,915 915,1095
is not anything that should

1581
00:50:30,355 --> 00:50:32,560
0,245 595,900 900,1205 1255,1655
be a surprising anyone.|
|

1582
00:50:33,560 --> 00:50:34,375
0,245 245,350 350,515 515,695 695,815
So any questions before we
那么在我们进入有趣的话题之前还有什么问题吗？

1583
00:50:34,375 --> 00:50:36,090
0,90 90,330 330,725 1165,1440 1440,1715
move on to interesting things?|
|

1584
00:50:40,780 --> 00:50:41,700
0,120 120,270 270,465 465,675 675,920
In this case, it's like.|
在这种情况下，就像是。|

1585
00:50:44,440 --> 00:50:45,540
0,245 245,365 365,590 590,940
Can you have different?|
能给我换一份吗？|

1586
00:50:45,730 --> 00:50:48,735
0,400 720,1100 1100,1385 1385,1690 2760,3005
Yeah. So question, is this
嗯。那么，问题是，这是不是在起作用？问题是，在到目前为止的所有这些示例中，这两个输入关系是否必须具有完全相同的模式？是。

1587
00:50:48,735 --> 00:50:50,450
0,245 625,870 870,1020 1020,1320 1320,1715
up? The question is, in

1588
00:50:51,070 --> 00:50:52,280
0,290 290,500 500,725 725,920 920,1210
all these examples so far,

1589
00:50:52,480 --> 00:50:53,775
0,260 260,425 425,710 710,995 995,1295
do the two input relations

1590
00:50:53,775 --> 00:50:54,645
0,270 270,390 390,510 510,675 675,870
have to have the exact

1591
00:50:54,645 --> 00:50:56,560
0,225 225,695 775,1175
same schema? Yes.|
|

1592
00:50:56,720 --> 00:50:57,660
0,400
You.|
你。|

1593
00:51:03,320 --> 00:51:04,420
0,400
Yes.|
是。|

1594
00:51:09,520 --> 00:51:11,750
0,245 245,490 780,1180 1680,1955 1955,2230
All right. So the next,
好的。接下来，如果我们开始研究如何将这些关系结合在一起，并潜在地看看它们的价值中实际上包含了什么。

1595
00:51:11,890 --> 00:51:13,995
0,400 1440,1685 1685,1790 1790,1925 1925,2105
so if we start looking

1596
00:51:13,995 --> 00:51:15,770
0,195 195,485 685,975 975,1395 1395,1775
at how to combine together

1597
00:51:16,090 --> 00:51:18,645
0,305 305,610 1230,1630 1980,2330 2330,2555
the relations and potentially look

1598
00:51:18,645 --> 00:51:19,380
0,135 135,375 375,510 510,615 615,735
at what's actually in the

1599
00:51:19,380 --> 00:51:20,540
0,210 210,420 420,680
values of them.|
|

1600
00:51:21,220 --> 00:51:21,945
0,245 245,335 335,455 455,605 605,725
So the first one we
所以我们要做的第一个是乘积运算符。

1601
00:51:21,945 --> 00:51:23,840
0,150 150,455 955,1230 1230,1500 1500,1895
do is the product operator.|
|

1602
00:51:25,990 --> 00:51:26,850
0,260 260,410 410,650 695,755 755,860
Or in sql, it's called
或者在SQL中，它被称为CHR。

1603
00:51:26,850 --> 00:51:28,220
0,105 105,350
the chr.|
|

1604
00:51:28,980 --> 00:51:29,990
0,305 305,500 500,650 650,830 830,1010
The idea here is that
这里的想法是，你基本上要把。

1605
00:51:30,080 --> 00:51:31,750
0,75 75,320 430,720 720,885 885,1670
you're basically going to concatenate

1606
00:51:32,280 --> 00:51:34,120
0,400
the.|
|

1607
00:51:34,130 --> 00:51:35,610
0,260 260,455 455,790 990,1235 1235,1480
The first relation and the.|
第一个关系和。|

1608
00:51:37,750 --> 00:51:39,040
0,400
People.|
人民。|

1609
00:51:39,170 --> 00:51:41,005
0,400 870,1220 1220,1505 1505,1610 1610,1835
Both. And it's for all
两个都是。它适用于来自的两个独特的组合，来自一个关系和另一个关系。所以你开始认为这就像是两个，四个循环，有四个循环在r上旋转，每个两点和r，你将与每一个两点和S相连。

1610
00:51:41,005 --> 00:51:42,820
0,315 315,905 925,1245 1245,1560 1560,1815
unique combinations of two from

1611
00:51:42,820 --> 00:51:43,960
0,260 280,555 555,735 735,960 960,1140
the, from one relation and

1612
00:51:43,960 --> 00:51:44,980
0,90 90,320 610,825 825,945 945,1020
the other. So you're starting

1613
00:51:44,980 --> 00:51:45,520
0,90 90,165 165,270 270,390 390,540
to think this as like

1614
00:51:45,520 --> 00:51:46,945
0,210 210,435 435,720 720,1010 1180,1425
two, four loops, right where

1615
00:51:46,945 --> 00:51:48,025
0,210 210,390 390,675 675,930 930,1080
there's four loops spinning over

1616
00:51:48,025 --> 00:51:50,065
0,305 895,1200 1200,1485 1485,1815 1815,2040
r, every single in two

1617
00:51:50,065 --> 00:51:51,115
0,105 105,195 195,455 685,990 990,1050
point and r, you're going

1618
00:51:51,115 --> 00:51:52,450
0,245 355,840 840,960 960,1110 1110,1335
to catenate with every single

1619
00:51:52,450 --> 00:51:53,760
0,180 180,270 270,345 345,590
two point and s.|
|

1620
00:51:53,760 --> 00:51:54,880
0,225 225,470
And you?|
而你?|

1621
00:52:10,880 --> 00:52:11,695
0,290 290,425 425,500 500,620 620,815
I think, I guess why
我想，我猜为什么这会真正有用，为什么我们真的想要这样。

1622
00:52:11,695 --> 00:52:13,050
0,305 415,750 750,930 930,1065 1065,1355
this would actually be useful,

1623
00:52:13,340 --> 00:52:14,370
0,260 260,410 410,575 575,740 740,1030
why we actually want this.|
|

1624
00:52:20,520 --> 00:52:21,860
0,275 275,425 425,560 560,820
I can think of.|
我能想到的。|

1625
00:52:21,860 --> 00:52:23,210
0,320 700,990 990,1125 1125,1260 1260,1350
Testing right if you're trying
如果您正在尝试找到两个输入的所有唯一组合来测试某个软件或某些东西，那么测试就是正确的。

1626
00:52:23,210 --> 00:52:24,515
0,120 120,315 315,585 585,840 840,1305
to find all unique combinations

1627
00:52:24,515 --> 00:52:25,900
0,335 415,720 720,960 960,1095 1095,1385
of two inputs to test

1628
00:52:25,980 --> 00:52:27,260
0,400 420,680 680,800 800,1025 1025,1280
some piece of software or

1629
00:52:27,260 --> 00:52:30,760
0,290 1450,1850
some something.|
|

1630
00:52:31,250 --> 00:52:32,400
0,350 350,560 560,680 680,845 845,1150
Then you could use this.|
那你就可以用这个了。|

1631
00:52:34,310 --> 00:52:35,545
0,305 305,530 530,850 870,1130 1130,1235
But beyond that, as far
但除此之外，据我所知，这一点根本没有被广泛使用。通常情况下，这是因为你，你犯了错误，比如你忘了戴爪子，你偶然得了这个病。

1632
00:52:35,545 --> 00:52:36,685
0,90 90,195 195,455 805,1050 1050,1140
as I know, this is

1633
00:52:36,685 --> 00:52:37,500
0,120 120,300 300,480 480,585 585,815
not widely used at all.

1634
00:52:37,820 --> 00:52:39,325
0,260 260,800 800,1085 1085,1295 1295,1505
And oftentimes this shows up

1635
00:52:39,325 --> 00:52:40,375
0,165 165,345 345,510 510,750 750,1050
because you, you make mistake,

1636
00:52:40,375 --> 00:52:41,185
0,180 180,375 375,555 555,660 660,810
like you forgot to wear

1637
00:52:41,185 --> 00:52:42,070
0,270 270,495 495,630 630,735 735,885
claws and, and you get

1638
00:52:42,070 --> 00:52:43,560
0,225 225,510 510,860
this by accident.|
|

1639
00:52:44,740 --> 00:52:46,320
0,195 195,465 465,765 765,1160
Table at the table.|
餐桌旁的桌子。|

1640
00:52:46,360 --> 00:52:47,175
0,350 350,545 545,620 620,680 680,815
Or one of the people
或者其中一个人说，你知道些什么？

1641
00:52:47,175 --> 00:52:48,230
0,180 180,315 315,555 555,795 795,1055
says, what do you know?|
|

1642
00:52:50,290 --> 00:52:51,580
0,230 230,290 290,335 335,550
What do you mean?|
你是什么意思？|

1643
00:52:51,580 --> 00:52:52,820
0,290
Like.|
喜欢。|

1644
00:52:53,490 --> 00:52:55,360
0,290 290,485 485,790 1320,1595 1595,1870
Of the table. Oh yeah,
餐桌上的。哦是的是的。就像在他们想要喜欢的桌子上一样。但这就像是投入，对吗？他们得到了一切。

1645
00:52:55,980 --> 00:52:56,930
0,290 290,470 470,605 605,710 710,950
yeah. So same as like

1646
00:52:56,930 --> 00:52:57,785
0,255 255,435 435,600 600,765 765,855
on table where they're trying

1647
00:52:57,785 --> 00:52:58,685
0,120 120,395 415,660 660,795 795,900
to like. But that's like

1648
00:52:58,685 --> 00:52:59,660
0,195 195,435 435,585 585,795 795,975
for inputs, right? They get

1649
00:52:59,660 --> 00:53:00,620
0,260
all.|
|

1650
00:53:01,170 --> 00:53:02,225
0,245 245,320 320,470 470,755 755,1055
Trying to get all possible
尝试获取所有可能的枚举作为输入或其他内容。

1651
00:53:02,225 --> 00:53:04,150
0,455 985,1335 1335,1545 1545,1665 1665,1925
enums as input or something.|
|

1652
00:53:09,300 --> 00:53:11,380
0,320 320,640
Super useful.|
非常有用。|

1653
00:53:11,660 --> 00:53:14,360
0,365 365,590 590,850 1380,1990
Is to do joints.|
就是做关节。|

1654
00:53:14,370 --> 00:53:15,305
0,245 245,410 410,635 635,800 800,935
And the idea here is
这里的想法是，当你要产生。

1655
00:53:15,305 --> 00:53:16,070
0,165 165,390 555,615 615,675 675,765
that when you're going to

1656
00:53:16,070 --> 00:53:17,180
0,260
generate.|
|

1657
00:53:19,230 --> 00:53:21,560
0,400 810,1355 1355,1550 1550,1810
The combinations of the.|
这些元素的组合。|

1658
00:53:21,890 --> 00:53:23,160
0,335 335,530 530,725 725,965 965,1270
From the two input relations,
从两个输入关系来看，SIM2是一个二元运算符。有多路连接。我们可以接受多种输入、多种关系。我们可以忽略它。您希望生成一个新的输出，该输出将包含与第一个站中的重叠属性以及与第二个关系的重叠属性匹配的所有元组。

1659
00:53:23,510 --> 00:53:24,730
0,290 290,515 515,740 740,1010 1010,1220
well SIM two for you

1660
00:53:24,730 --> 00:53:26,220
0,210 210,465 465,525 525,950 1090,1490
know, it's a binary operator.

1661
00:53:26,420 --> 00:53:28,000
0,260 260,520 750,1070 1070,1280 1280,1580
There are multi way joins.

1662
00:53:28,000 --> 00:53:29,610
0,105 105,210 210,345 345,620 1090,1610
We can take multiple inputs,

1663
00:53:29,720 --> 00:53:31,225
0,365 365,730 930,1190 1190,1340 1340,1505
multiple relations. We can ignore

1664
00:53:31,225 --> 00:53:33,000
0,150 150,425 1165,1425 1425,1530 1530,1775
that from. You want to

1665
00:53:33,140 --> 00:53:35,065
0,335 335,560 560,850 1110,1510 1590,1925
generate a new output that's

1666
00:53:35,065 --> 00:53:36,715
0,75 75,180 180,455 985,1380 1380,1650
going to contain all the

1667
00:53:36,715 --> 00:53:38,790
0,270 270,435 435,725 1195,1595 1675,2075
tubils that match on the

1668
00:53:38,810 --> 00:53:41,160
0,245 245,880 1380,1835 1835,2075 2075,2350
the overlapping attributes in the

1669
00:53:41,420 --> 00:53:43,510
0,695 695,1090 1260,1490 1490,1910 1910,2090
firstation and the overlapping attributes

1670
00:53:43,510 --> 00:53:44,780
0,105 105,240 240,465 465,800
with the second relation.|
|

1671
00:53:45,290 --> 00:53:48,520
0,400 480,880 900,1300 1320,1720
So different than the.|
跟以前不一样了。|

1672
00:53:49,930 --> 00:53:51,390
0,230 230,695 695,905 905,1265 1265,1460
The intersection, the intersection had
交叉口，交叉口必须有精确的。

1673
00:53:51,390 --> 00:53:52,540
0,105 105,210 210,345 345,620
to have the exact.|
|

1674
00:53:52,630 --> 00:53:53,820
0,275 275,455 455,680 680,875 1040,1190
In this case here, I
在这种情况下，我不需要这么做。

1675
00:53:53,820 --> 00:53:54,820
0,105 105,210 210,470
don't have to.|
|

1676
00:53:55,930 --> 00:53:57,240
0,245 245,335 335,470 470,760 930,1310
I want to find the
我想找出它们重叠的属性。我去查一下。

1677
00:53:57,240 --> 00:53:58,790
0,315 315,585 585,870 870,1035 1035,1550
attributes where they do overlap.

1678
00:53:58,900 --> 00:54:01,120
0,400 720,1025 1025,1250 1250,1570
I gonna check that.|
|

1679
00:54:24,590 --> 00:54:25,960
0,305 305,560 560,785 785,1060 1080,1370
And so in my in,
所以在我的中，在原始的关系代数中，你实际上不会显示重复的列，比如来自r的辅助和来自S的辅助。

1680
00:54:25,960 --> 00:54:27,250
0,255 255,480 480,645 645,870 870,1290
in the original relation algebra

1681
00:54:27,250 --> 00:54:29,260
0,225 225,450 450,690 690,1070 1780,2010
here, you would actually, you

1682
00:54:29,260 --> 00:54:30,805
0,315 315,615 615,795 795,1170 1170,1545
don't show the duplicate columns

1683
00:54:30,805 --> 00:54:31,795
0,195 195,330 330,615 615,840 840,990
like the aid from r

1684
00:54:31,795 --> 00:54:33,540
0,165 165,360 360,765 765,1115 1345,1745
and a aid from s.|
|

1685
00:54:40,410 --> 00:54:41,135
0,260 260,410 410,470 470,560 560,725
So there's a bunch different
因此，在SQL中有很多不同的编写方法。在SQL中有一个自然关键字。

1686
00:54:41,135 --> 00:54:42,440
0,305 595,870 870,1035 1035,1185 1185,1305
ways to write this in

1687
00:54:42,440 --> 00:54:47,675
0,410 2560,2880 2880,3045 3045,3380 4810,5235
sql. There's a natural keyword

1688
00:54:47,675 --> 00:54:49,260
0,195 195,605
in sql.|
|

1689
00:55:03,700 --> 00:55:05,000
0,275 275,380 380,455 455,700
Or if you want.|
或者如果你想的话。|

1690
00:55:44,810 --> 00:55:45,940
0,400
Um.|
恩。|

1691
00:55:48,250 --> 00:55:49,320
0,260 260,395 395,590 590,860 860,1070
Ly like this. That's, that's
我是这样的。这是，这是一种方法。它，它会让你的申请看起来很脆弱。

1692
00:55:49,320 --> 00:55:49,920
0,150 150,315 315,435 435,525 525,600
a way to do it.

1693
00:55:49,920 --> 00:55:52,155
0,560 1270,1605 1605,1695 1695,1935 1935,2235
It, it'll make your application

1694
00:55:52,155 --> 00:55:53,460
0,270 270,725
look brittle.|
|

1695
00:55:56,230 --> 00:55:57,285
0,275 275,470 470,695 695,875 875,1055
The question is the order
问题是，在这种情况下，顺序和RN很重要，这有什么关系？

1696
00:55:57,285 --> 00:55:58,335
0,165 165,555 555,780 780,930 930,1050
and rns matter in this

1697
00:55:58,335 --> 00:55:59,780
0,275 775,1050 1050,1155 1155,1215 1215,1445
case, why would it matter?|
|

1698
00:56:00,840 --> 00:56:01,590
0,225 225,375 375,495 495,600 600,750
I guess I was just
我想我只是想知道输出值是多少。

1699
00:56:01,590 --> 00:56:02,930
0,240 240,450 450,710 760,1050 1050,1340
wondering what the output values.|
|

1700
00:56:05,320 --> 00:56:06,610
0,260 280,675 675,930 930,1095 1095,1290
For example, in this case,
例如，在这种情况下，S只有即时值。

1701
00:56:06,610 --> 00:56:09,000
0,210 210,1335 1335,1610 1630,2010 2010,2390
there's onlyaneous values for s.|
|

1702
00:56:09,400 --> 00:56:10,750
0,135 135,330 330,555 555,830 1090,1350
So then, with the output.|
那么，就输出而言。|

1703
00:56:30,170 --> 00:56:31,240
0,400
Yeah.|
嗯。|

1704
00:56:43,670 --> 00:56:45,660
0,400 630,890 890,1040 1040,1330
Again at this point.|
在这一点上又是这样。|

1705
00:56:58,310 --> 00:57:00,380
0,305 305,610 690,1010 1010,1330
A single natural Joy.|
单打天生的joy。|

1706
00:57:37,800 --> 00:57:39,640
0,275 275,380 380,610 750,1150
Both of them, yes.|
他们两个都是，是的。|

1707
00:57:40,000 --> 00:57:41,540
0,400
Yes.|
是。|

1708
00:58:23,110 --> 00:58:25,240
0,260 260,410 410,605 605,910
So his question is.|
所以他的问题是。|

1709
00:58:51,490 --> 00:58:52,500
0,550
Projection.|
投影。|

1710
00:59:02,140 --> 00:59:04,050
0,400 780,1055 1055,1160 1160,1390 1590,1910
So these are the ones
这些是，或者我展示给你们的，关于泰德在97年末定义的基本原理的那些，它被扩展了一堆额外的东西。

1711
00:59:04,050 --> 00:59:05,475
0,210 210,500 730,1095 1095,1305 1305,1425
that, that or the ones

1712
00:59:05,475 --> 00:59:05,985
0,150 150,270 270,345 345,420 420,510
I showed you with the

1713
00:59:05,985 --> 00:59:08,310
0,390 390,555 555,765 765,1085 2065,2325
fundamentals that ted defined in

1714
00:59:08,310 --> 00:59:09,840
0,105 105,240 240,1110 1110,1320 1320,1530
the late 97, it got

1715
00:59:09,840 --> 00:59:10,485
0,240 240,375 375,450 450,525 525,645
extended with a bunch of

1716
00:59:10,485 --> 00:59:11,740
0,225 225,575
additional things.|
|

1717
00:59:13,440 --> 00:59:15,070
0,350 350,650 650,1000 1020,1325 1325,1630
Building real applications you need
构建真正的应用程序，您需要的不仅仅是。

1718
00:59:15,750 --> 00:59:16,960
0,350 350,700
more than.|
|

1719
00:59:17,410 --> 00:59:18,240
0,245 245,320 320,380 380,530 530,830
Here in the original relational
在原始的关系模型、关系代数中，右重命名就像一个投影。

1720
00:59:18,240 --> 00:59:20,790
0,270 270,570 570,1070 1420,1820 1900,2550
model, relational algebra, right renaming

1721
00:59:20,790 --> 00:59:22,880
0,320 580,840 840,990 990,1460
is like a projection.|
|

1722
00:59:22,980 --> 00:59:24,820
0,605 605,1000 1080,1340 1340,1475 1475,1840
Assigning values or starting assigning
将值分配给或开始将属性分配给、分配到、分配到。

1723
00:59:24,870 --> 00:59:28,480
0,380 380,700 2040,2440 2610,3010
attributes to, to, to.|
|

1724
00:59:29,790 --> 00:59:33,310
0,400 1080,1690 1770,2350 2610,2915 2915,3520
Important duplicate elimination distinct clauses.|
重要的重复消除不同的子句。|

1725
00:59:35,930 --> 00:59:36,980
0,400
That.|
那。|

1726
00:59:39,110 --> 00:59:40,400
0,400
I.|
我。|

1727
00:59:41,390 --> 00:59:43,540
0,395 395,790
On count.|
倒计时。|

1728
00:59:53,480 --> 00:59:54,385
0,290 290,455 455,620 620,785 785,905
Used to teach it. We
用来教它的。我们不再教书了，因为你永远找不到它。这基本上是等待组织的一种方式。

1729
00:59:54,385 --> 00:59:55,750
0,165 165,360 360,600 600,905 1105,1365
don't teach anymore because you

1730
00:59:55,750 --> 00:59:57,240
0,165 165,345 345,620 940,1260 1260,1490
never find it. It's basically

1731
00:59:57,260 --> 00:59:58,410
0,365 365,755 755,800 800,890 890,1150
wait division's a way to.|
|

1732
00:59:59,440 --> 01:00:02,595
0,400 2340,2615 2615,2750 2750,2915 2915,3155
Find find the two one
查找与另一个关系中的所有管匹配的两个一次运行关系。

1733
01:00:02,595 --> 01:00:04,200
0,270 270,605 655,960 960,1245 1245,1605
run relation that matches all

1734
01:00:04,200 --> 01:00:05,940
0,315 315,465 465,675 675,980
tubes in another relation.|
|

1735
01:00:07,650 --> 01:00:08,405
0,260 260,515 515,620 620,680 680,755
It doesn't appear in the
它不会出现在真正的战争中，这并不常见。我们再也不用担心它了。

1736
01:00:08,405 --> 01:00:10,325
0,120 120,395 1135,1455 1455,1620 1620,1920
real war, it's not common.

1737
01:00:10,325 --> 01:00:10,925
0,195 195,330 330,420 420,495 495,600
We don't have to worry

1738
01:00:10,925 --> 01:00:13,840
0,120 120,365 685,1085 1285,1685
about it the again.|
|

1739
01:00:14,030 --> 01:00:15,250
0,305 305,575 575,800 800,965 965,1220
The core of every relational
每个关系数据系统的核心都将建立在，这些，这些，这个代数上，然后我们可以定义一个。

1740
01:00:15,250 --> 01:00:16,135
0,195 195,390 390,540 540,690 690,885
data system would be built

1741
01:00:16,135 --> 01:00:17,275
0,300 300,585 585,765 765,945 945,1140
on, on these, on these,

1742
01:00:17,275 --> 01:00:18,790
0,180 180,315 315,815 1135,1395 1395,1515
on this algebra, and then

1743
01:00:18,790 --> 01:00:21,200
0,105 105,285 285,620 1030,1430
we can define a.|
|

1744
01:00:22,350 --> 01:00:24,440
0,400 870,1175 1175,1325 1325,1570
Around the sort of.|
围绕着一种。|

1745
01:00:24,960 --> 01:00:26,260
0,260 260,380 380,515 515,790 900,1300
That allow us to support
这使我们能够支持非常有表现力、非常复杂的SQL查询。

1746
01:00:26,340 --> 01:00:28,340
0,365 365,815 815,1130 1130,1510 1650,2000
very expressive, very complex sql

1747
01:00:28,340 --> 01:00:30,360
0,380
queries.|
|

1748
01:00:32,060 --> 01:00:33,460
0,400
Question.|
问题来了。|

1749
01:00:35,480 --> 01:00:36,210
0,260 260,365 365,440 440,500 500,730
So why do we need?|
那么我们为什么需要呢？|

1750
01:00:38,320 --> 01:00:39,270
0,245 245,335 335,515 515,770 770,950
Because you can find a
因为您可以在主键上找到消除的外观。

1751
01:00:39,270 --> 01:00:40,890
0,105 105,255 255,675 675,1040 1360,1620
look at elimination on the

1752
01:00:40,890 --> 01:00:42,260
0,210 210,560
primary key.|
|

1753
01:00:48,750 --> 01:00:49,960
0,400
So.|
所以。|

1754
01:00:50,190 --> 01:00:52,000
0,400
The.|
这个。|

1755
01:00:52,550 --> 01:00:53,780
0,400
Fr.|
佛尔|

1756
01:00:55,880 --> 01:00:56,900
0,400
I.|
我。|

1757
01:00:57,080 --> 01:00:58,220
0,430
Query.|
查询。|

1758
01:01:00,730 --> 01:01:01,960
0,400
Still.|
还是这样。|

1759
01:01:03,110 --> 01:01:04,590
0,245 245,490 810,1070 1070,1205 1205,1480
You know, piece of software,
你知道，一个软件，一个真正执行它的系统。

1760
01:01:04,760 --> 01:01:06,085
0,290 290,515 515,770 770,1085 1085,1325
the system to actually execute

1761
01:01:06,085 --> 01:01:06,800
0,245
it.|
|

1762
01:01:08,490 --> 01:01:09,620
0,400
Very.|
非常。|

1763
01:01:10,110 --> 01:01:12,040
0,400 720,1010 1010,1220 1220,1535 1535,1930
So one order versus another.|
因此，一个订单对另一个订单。|

1764
01:01:12,880 --> 01:01:14,800
0,290 290,500 500,815 815,1210
So say I do.|
所以，就说我愿意。|

1765
01:01:16,280 --> 01:01:18,840
0,400 930,1235 1235,1535 1535,1870 1890,2560
Where? Where? There the sb.|
哪里?哪里?这就是某人。|

1766
01:01:51,940 --> 01:01:57,300
0,2660 2660,2855 2855,3160 3360,3760 5070,5360
2,000,000,002 poles together, billion, one
两亿，002极，十亿，十亿，两极，马上。

1767
01:01:57,300 --> 01:02:00,645
0,290 880,1155 1155,1430 1930,2330 3040,3345
billion, two pol together right

1768
01:02:00,645 --> 01:02:01,640
0,305
away.|
|

1769
01:02:01,640 --> 01:02:02,680
0,320
Right.|
正确的。|

1770
01:02:02,720 --> 01:02:04,180
0,395 395,695 695,890 890,1025 1025,1460
So out you show specifying
因此，您展示的基本上是指定您希望数据系统如何执行操作。

1771
01:02:04,180 --> 01:02:05,155
0,300 300,570 570,720 720,855 855,975
basically how you want the

1772
01:02:05,155 --> 01:02:06,150
0,150 150,315 315,510 510,720 720,995
data system to execute things.|
|

1773
01:02:07,210 --> 01:02:08,805
0,230 230,365 365,670 690,1090 1350,1595
So a better approach, and
所以这是一种更好的方法，这就是激励。

1774
01:02:08,805 --> 01:02:10,140
0,105 105,210 210,605
this is motivation.|
|

1775
01:02:10,210 --> 01:02:10,920
0,245 245,365 365,485 485,575 575,710
Is that we want to
我们想告诉数据库系统。这就是我们想要的答案。

1776
01:02:10,920 --> 01:02:13,770
0,290 700,960 960,1155 1155,1490 2440,2850
tell the database system. Here's

1777
01:02:13,770 --> 01:02:15,340
0,105 105,300 300,540 540,830
the answer we want.|
|

1778
01:02:15,340 --> 01:02:16,240
0,135 135,375 375,510 510,735 735,900
We don't know how, we
我们不知道如何，我们不在乎你实际上是如何去找我们的，但这就是我们希望你为我们做的。

1779
01:02:16,240 --> 01:02:17,320
0,210 210,435 435,660 660,930 930,1080
don't care how you're actually

1780
01:02:17,320 --> 01:02:18,310
0,90 90,320 460,750 750,885 885,990
going to us, but this

1781
01:02:18,310 --> 01:02:18,865
0,105 105,195 195,300 300,435 435,555
is what we want you

1782
01:02:18,865 --> 01:02:20,100
0,90 90,225 225,345 345,575
to do for us.|
|

1783
01:02:20,440 --> 01:02:21,735
0,260 260,500 500,950 950,1115 1115,1295
Instead of specifying the exact
我想要的不是精确的代数步骤，而是计算机。

1784
01:02:21,735 --> 01:02:22,935
0,480 480,675 675,825 825,975 975,1200
algebra steps, I want the

1785
01:02:22,935 --> 01:02:23,840
0,335
computer.|
|

1786
01:02:24,080 --> 01:02:25,855
0,400 690,1205 1205,1310 1310,1430 1430,1775
Hey, retrieve the two poles
嘿，把两根电线杆从R上取回来。

1787
01:02:25,855 --> 01:02:27,500
0,330 330,935
from Rs.|
|

1788
01:02:28,150 --> 01:02:29,235
0,305 305,515 515,665 665,800 800,1085
And find me all those
帮我找出所有在b处的。

1789
01:02:29,235 --> 01:02:30,860
0,375 375,755
where b.|
|

1790
01:02:31,980 --> 01:02:32,975
0,245 245,365 365,620 620,830 830,995
And then now the data
然后现在数据系统可以考虑数据是如何存储的，是哪种类型的数据。

1791
01:02:32,975 --> 01:02:34,460
0,315 315,630 630,965 985,1260 1260,1485
system can can take into

1792
01:02:34,460 --> 01:02:35,780
0,350 550,855 855,1020 1020,1170 1170,1320
account how the data is

1793
01:02:35,780 --> 01:02:36,790
0,180 180,465 465,660 660,765 765,1010
being stored, what kind of.|
|

1794
01:02:37,800 --> 01:02:38,980
0,320 320,530 530,740 740,920 920,1180
Where things are actually physically
物体实际所在的位置。

1795
01:02:39,150 --> 01:02:40,060
0,400
located.|
|

1796
01:02:40,060 --> 01:02:41,845
0,260 730,1005 1005,1170 1170,1545 1545,1785
Ah, what the cpu can
啊，什么是CPU能支持的。我的CPU是什么类型的？我有图形处理器吗？有没有现场可编程门阵列？我还有其他东西吗？所有这些。

1797
01:02:41,845 --> 01:02:43,840
0,365 565,840 840,960 960,1205 1555,1995
support. What kind of cpu

1798
01:02:43,840 --> 01:02:44,530
0,105 105,225 225,450 450,630 630,690
do I have? Do I

1799
01:02:44,530 --> 01:02:45,235
0,60 60,150 150,540 540,645 645,705
have a gpu? Do have

1800
01:02:45,235 --> 01:02:46,075
0,75 75,540 540,720 720,765 765,840
an fpga? Do I have

1801
01:02:46,075 --> 01:02:47,640
0,165 165,485 835,1140 1140,1305 1305,1565
other things? All of that.|
|

1802
01:02:49,590 --> 01:02:50,940
0,290 290,580
Can be.|
是可以的。|

1803
01:02:51,040 --> 01:02:52,400
0,260 260,485 485,815 815,1070 1070,1360
In its decision for how
决定如何以这种方式执行查询，而不是以另一种方式执行。

1804
01:02:52,630 --> 01:02:53,745
0,320 320,515 515,620 620,860 860,1115
to execute the query one

1805
01:02:53,745 --> 01:02:55,080
0,150 150,420 420,815
way versus another.|
|

1806
01:02:55,930 --> 01:02:57,465
0,400 630,965 965,1175 1175,1325 1325,1535
Now, again, think of like
现在，再想一想，如果我是一名开发人员，我可以在我的笔记本电脑上编写一堆代码，编写一些SQL或我的小测试数据库，然后相同的SQL语句将完全相同地工作。或者，当我在具有大量内存的巨型计算机上进行生产部署时，它也会产生相同的正确结果。

1807
01:02:57,465 --> 01:02:58,545
0,195 195,390 390,510 510,810 810,1080
if I'm a developer, I

1808
01:02:58,545 --> 01:02:59,355
0,210 210,450 450,600 600,690 690,810
can write a bunch of

1809
01:02:59,355 --> 01:03:00,390
0,150 150,255 255,360 360,795 795,1035
code in my laptop, writes

1810
01:03:00,390 --> 01:03:01,635
0,210 210,680 700,945 945,1065 1065,1245
some sql or my little

1811
01:03:01,635 --> 01:03:03,585
0,195 195,485 1345,1620 1620,1770 1770,1950
test database, and then the

1812
01:03:03,585 --> 01:03:04,980
0,300 300,705 705,960 960,1200 1200,1395
same sql statement will then

1813
01:03:04,980 --> 01:03:06,590
0,270 270,540 540,735 735,1010 1210,1610
work exactly the same. Or

1814
01:03:06,700 --> 01:03:07,860
0,305 305,605 605,860 860,980 980,1160
it also produce the same

1815
01:03:07,860 --> 01:03:09,585
0,270 270,620 1150,1395 1395,1560 1560,1725
correct result when I deploy

1816
01:03:09,585 --> 01:03:11,030
0,150 150,455 505,905 955,1200 1200,1445
in production on, you know,

1817
01:03:11,110 --> 01:03:12,150
0,275 275,545 545,815 815,935 935,1040
a giant machine that has

1818
01:03:12,150 --> 01:03:13,960
0,90 90,320 640,885 885,1130
a lot of memory.|
|

1819
01:03:14,200 --> 01:03:14,770
0,120 120,270 270,360 360,450 450,570
And I don't have to
而且我不需要更改我的应用程序代码。

1820
01:03:14,770 --> 01:03:16,480
0,150 150,405 405,705 705,1040
change my application code.|
|

1821
01:03:17,170 --> 01:03:18,420
0,245 245,470 470,590 590,850 960,1250
So that's the beauty. That's
这就是它的美妙之处。这就是为什么你会想要声明语言的原因。但是，声明性语言如何工作的核心概念，是我在后面的代数基础上预测的。

1822
01:03:18,420 --> 01:03:19,290
0,75 75,300 300,555 555,705 705,870
the beauty of why you're

1823
01:03:19,290 --> 01:03:19,860
0,45 45,105 105,195 195,285 285,570
going to want to declare

1824
01:03:19,860 --> 01:03:22,650
0,320 1000,1380 1380,1760 2140,2490 2490,2790
language. But the, the core

1825
01:03:22,650 --> 01:03:24,705
0,300 300,525 525,690 690,980 1570,2055
concept of how that declarative

1826
01:03:24,705 --> 01:03:25,460
0,180 180,360 360,435 435,510 510,755
language are going to work

1827
01:03:25,570 --> 01:03:27,195
0,275 275,440 440,860 860,1210 1290,1625
is me predicated on later

1828
01:03:27,195 --> 01:03:28,180
0,545
algebra.|
|

1829
01:03:31,350 --> 01:03:32,945
0,400 840,1310 1310,1430 1430,1520 1520,1595
So sql is going to
因此，正如我们所讨论的，SQL将成为事实上的标准。

1830
01:03:32,945 --> 01:03:33,740
0,90 90,165 165,240 240,555 555,795
be the de facto standard,

1831
01:03:33,740 --> 01:03:35,280
0,350 370,720 720,1010
as we discuss.|
|

1832
01:03:51,290 --> 01:03:52,360
0,400
Okay.|
好吧。|

1833
01:03:54,120 --> 01:03:55,145
0,290 290,485 485,650 650,845 845,1025
Quick. Before we go, I
快的。在我们结束之前，我想谈谈其他数据模型。

1834
01:03:55,145 --> 01:03:55,655
0,75 75,135 135,225 225,345 345,510
want to talk about other

1835
01:03:55,655 --> 01:03:59,000
0,180 180,455
data models.|
|

1836
01:04:11,940 --> 01:04:13,790
0,395 395,790 1050,1385 1385,1640 1640,1850
And because vector database is
由于矢量数据库是黑客新闻上的热门话题，因此值得讨论它们到底是什么。所以你们明白为什么都是胡说八道了。你可以在现实世界中看到它。

1837
01:04:13,790 --> 01:04:14,510
0,105 105,240 240,390 390,495 495,720
the hot thing on hacker

1838
01:04:14,510 --> 01:04:15,860
0,210 210,465 465,675 675,1040 1090,1350
news, it's worth discussing what

1839
01:04:15,860 --> 01:04:16,985
0,165 165,315 315,560 850,1065 1065,1125
they actually are. So you

1840
01:04:16,985 --> 01:04:17,825
0,225 225,495 495,630 630,750 750,840
guys understand why it's all

1841
01:04:17,825 --> 01:04:18,830
0,455 505,780 780,885 885,945 945,1005
bullshit. You see it in

1842
01:04:18,830 --> 01:04:19,800
0,75 75,195 195,470
the real world.|
|

1843
01:04:22,190 --> 01:04:23,635
0,335 335,590 590,815 815,1120 1140,1445
So document data model is
所以文档数据模型是旧的。因此，MongoDB在2008年问世，这一切都是开创性的。我们是以json的形式存储东西的，但这种想法可以追溯到1980年S 1990年初的S他们是对象。

1844
01:04:23,635 --> 01:04:25,800
0,305 985,1275 1275,1770 1770,1905 1905,2165
old. So mongodb came out

1845
01:04:25,910 --> 01:04:28,135
0,730 1080,1385 1385,1580 1580,2075 2075,2225
2008 all this groundbreaking. We're

1846
01:04:28,135 --> 01:04:29,935
0,180 180,360 360,510 510,995 1405,1800
storing things as json, but

1847
01:04:29,935 --> 01:04:31,135
0,330 330,585 585,795 795,1020 1020,1200
the ideas go back to

1848
01:04:31,135 --> 01:04:33,295
0,90 90,525 525,815 1405,1725 1725,2160
the 1980 s early 1990

1849
01:04:33,295 --> 01:04:34,920
0,165 165,300 300,545 655,1055
s they were object.|
|

1850
01:04:34,930 --> 01:04:35,955
0,260 260,455 455,725 725,920 920,1025
Object ori programming was the
对象或编程是最高级的东西。所以人们说，与其存储关系的东西，不如像存储对象一样存储东西。然后他们有了这些专门的编程语言，知道如何写，写代码，就像在。

1851
01:04:35,955 --> 01:04:37,515
0,210 210,575 955,1200 1200,1365 1365,1560
high thing. So people said

1852
01:04:37,515 --> 01:04:38,325
0,150 150,285 285,465 465,630 630,810
rather than storing things of

1853
01:04:38,325 --> 01:04:39,360
0,305 415,675 675,765 765,870 870,1035
relations, we want to store

1854
01:04:39,360 --> 01:04:41,565
0,210 210,530 640,1005 1005,1370 1960,2205
things as as objects. And

1855
01:04:41,565 --> 01:04:42,255
0,105 105,225 225,375 375,555 555,690
then they had these sort

1856
01:04:42,255 --> 01:04:43,695
0,210 210,630 630,870 870,1185 1185,1440
of specialized programming languages that

1857
01:04:43,695 --> 01:04:45,540
0,150 150,255 255,360 360,635 1525,1845
knew how to write, write

1858
01:04:45,540 --> 01:04:47,900
0,320 880,1140 1140,1400 1540,1940 1960,2360
code in your like in.|
|

1859
01:04:50,210 --> 01:04:51,420
0,260 260,520
It would.|
会的。|

1860
01:04:52,370 --> 01:04:53,740
0,350 350,700
Database system.|
数据库系统。|

1861
01:04:53,780 --> 01:04:55,585
0,245 245,490 840,1130 1130,1360 1470,1805
But those they're basically those
但是它们基本上是那些对象，它们和json是一样的，它们和xl是一样的。XL数据库是90,000年代末的热门事物，因此高级别的ALT是等同的。

1862
01:04:55,585 --> 01:04:56,230
0,180 180,270 270,375 375,510 510,645
objects are the same thing

1863
01:04:56,230 --> 01:04:57,685
0,135 135,590 910,1230 1230,1320 1320,1455
as json they're the same

1864
01:04:57,685 --> 01:04:59,005
0,120 120,210 210,555 555,900 900,1320
thing as xl. Xl databases

1865
01:04:59,005 --> 01:04:59,560
0,120 120,195 195,315 315,465 465,555
were the hot thing in

1866
01:04:59,560 --> 01:05:01,450
0,60 60,165 165,1100 1330,1650 1650,1890
the late 90,000, so a

1867
01:05:01,450 --> 01:05:02,820
0,210 210,390 390,680 760,1065 1065,1370
high level alt are equivalent.|
|

1868
01:05:04,260 --> 01:05:06,080
0,400 630,1030
So that.|
所以。|

1869
01:05:07,020 --> 01:05:08,570
0,270 270,360 360,830 880,1215 1215,1550
It's a hierarchical data structure.
它是一种分层数据结构。我们有这些命名字段，并且命名字段的值可以是数组、标量类型。

1870
01:05:08,860 --> 01:05:10,190
0,290 290,485 485,695 695,965 965,1330
We have these named fields,

1871
01:05:10,630 --> 01:05:11,745
0,305 305,485 485,755 755,1010 1010,1115
and the values of the

1872
01:05:11,745 --> 01:05:15,255
0,180 180,515 2575,2835 2835,3095 3205,3510
named fields can be an

1873
01:05:15,255 --> 01:05:16,960
0,240 240,450 450,750 750,1025
array, a scalar type.|
|

1874
01:05:17,590 --> 01:05:18,920
0,275 275,550
And that.|
还有那个。|

1875
01:05:19,240 --> 01:05:20,295
0,260 260,470 470,725 725,875 875,1055
And again, all the monitor
同样，所有的监控系统都使用json。所以现在为什么这些，这些文档数据库系统存在的原因是这个出现的这个问题，叫做阻抗不匹配。

1876
01:05:20,295 --> 01:05:22,215
0,300 300,665 685,975 975,1445 1675,1920
systems use use json. So

1877
01:05:22,215 --> 01:05:23,295
0,105 105,225 225,450 450,750 750,1080
now the reason why these,

1878
01:05:23,295 --> 01:05:25,460
0,395 925,1200 1200,1395 1395,1715 1765,2165
these document database systems exist

1879
01:05:25,870 --> 01:05:28,965
0,305 305,610 1530,1930 2460,2780 2780,3095
is this this problem that

1880
01:05:28,965 --> 01:05:31,215
0,270 270,435 435,615 615,905 1705,2250
comes up called the impedance

1881
01:05:31,215 --> 01:05:32,380
0,455
mismatch.|
|

1882
01:05:32,540 --> 01:05:33,930
0,500 500,800 800,890 890,1070 1070,1390
That's, that's the problem of
如果我把我的，我的，我的数据分解成这些不同的关系，这就是问题所在。但我是用对象中的任何东西来编写我的应用程序代码的，比如python。现在，当我想要从it连接中检索数据时，将我的。

1883
01:05:34,130 --> 01:05:35,940
0,305 305,530 530,800 800,1150 1410,1810
if I break my, my,

1884
01:05:35,960 --> 01:05:37,030
0,320 320,590 590,815 815,935 935,1070
my data up into these

1885
01:05:37,030 --> 01:05:39,220
0,225 225,560 1360,1740 1740,2010 2010,2190
different relations. But I write

1886
01:05:39,220 --> 01:05:40,870
0,290 490,855 855,1185 1185,1440 1440,1650
my application code in like

1887
01:05:40,870 --> 01:05:42,450
0,435 435,645 645,950 1000,1290 1290,1580
python or whatever in in

1888
01:05:42,500 --> 01:05:44,515
0,400 1080,1445 1445,1670 1670,1820 1820,2015
objects. Now when I want

1889
01:05:44,515 --> 01:05:45,625
0,180 180,345 345,780 780,960 960,1110
to go retrieve data from

1890
01:05:45,625 --> 01:05:47,370
0,225 225,605 775,1035 1035,1200 1200,1745
the it bunch of joins

1891
01:05:47,420 --> 01:05:49,720
0,395 395,760 1380,1780
stitch together my.|
|

1892
01:05:49,720 --> 01:05:50,545
0,300 300,480 480,630 630,750 750,825
Is the form that I
是我想要在我的应用程序上操作但数据库想要的表单吗？

1893
01:05:50,545 --> 01:05:51,460
0,105 105,300 300,540 540,705 705,915
want to operate on my

1894
01:05:51,460 --> 01:05:53,520
0,350 730,1130 1270,1530 1530,1725 1725,2060
application but the database wants?|
|

1895
01:05:54,810 --> 01:05:56,020
0,290 290,580
Or separate.|
或者分开。|

1896
01:05:56,250 --> 01:05:57,760
0,275 275,515 515,880
And so the.|
所以。|

1897
01:06:05,790 --> 01:06:06,650
0,260 260,365 365,530 530,695 695,860
And I would argue, yeah,
我会争辩说，是的，有些事情是合理的。但在其他方面，这实际上是一个坏主意，因为现在你会有一堆重复的数据。你有我们以前解决的所有问题，我要确保如果我改变，改变，在我的数据库的文件中复制的东西，我会在所有地方进行改变。

1898
01:06:06,650 --> 01:06:07,865
0,180 180,345 345,650 790,1065 1065,1215
for some things that makes

1899
01:06:07,865 --> 01:06:09,500
0,275 745,1050 1050,1200 1200,1365 1365,1635
sense. But for other things,

1900
01:06:09,500 --> 01:06:10,595
0,360 360,510 510,585 585,780 780,1095
it's actually a bad idea

1901
01:06:10,595 --> 01:06:11,780
0,365 655,915 915,1050 1050,1110 1110,1185
because now you're gonna have

1902
01:06:11,780 --> 01:06:12,700
0,90 90,210 210,330 330,660 660,920
a bunch of duplicate data.

1903
01:06:12,930 --> 01:06:13,670
0,230 230,305 305,440 440,590 590,740
You have all the problems

1904
01:06:13,670 --> 01:06:14,645
0,165 165,330 330,560 580,855 855,975
we solved before where I

1905
01:06:14,645 --> 01:06:15,520
0,90 90,165 165,315 315,555 555,875
got to make sure that

1906
01:06:16,200 --> 01:06:17,450
0,245 245,410 410,730 780,1070 1070,1250
if I change, change, something

1907
01:06:17,450 --> 01:06:18,700
0,210 210,645 645,855 855,975 975,1250
that's duplicated in a file

1908
01:06:19,500 --> 01:06:20,960
0,380 380,620 620,880 1080,1340 1340,1460
in my database, I make

1909
01:06:20,960 --> 01:06:21,725
0,120 120,300 300,495 495,645 645,765
the changes all over the

1910
01:06:21,725 --> 01:06:22,640
0,245
place.|
|

1911
01:06:25,890 --> 01:06:26,690
0,260 260,380 380,500 500,665 665,800
So we go back to
所以我们回到前面的例子。

1912
01:06:26,690 --> 01:06:29,170
0,135 135,360 360,680 1780,2130 2130,2480
our example before of the.|
|

1913
01:06:31,980 --> 01:06:33,680
0,290 290,455 455,730
So the high.|
所以高潮就来了。|

1914
01:06:37,030 --> 01:06:38,070
0,275 275,410 410,515 515,760 780,1040
If I have an object,
如果我有一个对象，我再一次为某个给定的艺术家，这是他们出现在上面的所有专辑。

1915
01:06:38,070 --> 01:06:39,210
0,150 150,375 375,710 820,1050 1050,1140
I once again for a

1916
01:06:39,210 --> 01:06:40,215
0,180 180,480 480,780 780,885 885,1005
given artist, here's all the

1917
01:06:40,215 --> 01:06:41,930
0,375 375,755 925,1230 1230,1425 1425,1715
albums that they appear on.|
|

1918
01:06:48,810 --> 01:06:50,080
0,400
Right.|
正确的。|

1919
01:06:50,080 --> 01:06:50,905
0,195 195,315 315,435 435,615 615,825
Now, you can do this
现在，您可以在一条SQL语句中做到这一点，但是是的。

1920
01:06:50,905 --> 01:06:52,450
0,165 165,425 715,1035 1035,1350 1350,1545
in a single sql statement,

1921
01:06:52,450 --> 01:06:54,600
0,180 180,440
but yeah.|
|

1922
01:06:55,075 --> 01:06:57,180
0,105 105,285 285,585 585,965
It's not perfect, but.|
这不是完美的，但是。|

1923
01:06:57,790 --> 01:07:00,290
0,520 1230,1565 1565,1810 1980,2240 2240,2500
It's, there's ways on it.
这是有办法的。所以文档神，人们说你这里不需要这个人，如果你的应用程序代码是。

1924
01:07:00,610 --> 01:07:02,115
0,350 350,700 810,1070 1070,1310 1310,1505
So the document deities, people

1925
01:07:02,115 --> 01:07:03,195
0,285 285,495 495,720 720,870 870,1080
say you don't need this

1926
01:07:03,195 --> 01:07:05,600
0,225 225,545 865,1125 1125,1385 2005,2405
guy here of this and

1927
01:07:05,950 --> 01:07:07,580
0,260 260,500 500,860 860,1235 1235,1630
if your application code is.|
|

1928
01:07:22,930 --> 01:07:24,100
0,400
Table.|
桌子。|

1929
01:07:27,370 --> 01:07:28,395
0,275 275,455 455,620 620,755 755,1025
And same problem as before.
和以前一样的问题。就像如果艺术家出现在同一张专辑中，我可能会在他们的所有json文档中有重复的条目。如果我更新了，我必须确保我改变了，改变了所有的。

1930
01:07:28,395 --> 01:07:31,590
0,395 595,945 945,1295 1975,2375 2815,3195
Like if I if artists

1931
01:07:31,590 --> 01:07:32,390
0,270 270,345 345,435 435,540 540,800
appearing on the same album,

1932
01:07:32,740 --> 01:07:33,885
0,275 275,395 395,530 530,875 875,1145
I could have duplicate entries

1933
01:07:33,885 --> 01:07:35,060
0,120 120,255 255,420 420,810 810,1175
in all their json documents.

1934
01:07:35,230 --> 01:07:36,060
0,230 230,305 305,425 425,620 620,830
And if I make updates,

1935
01:07:36,060 --> 01:07:36,705
0,150 150,255 255,330 330,435 435,645
gotta make sure I change,

1936
01:07:36,705 --> 01:07:38,000
0,195 195,330 330,450 450,695
change all of them.|
|

1937
01:07:38,660 --> 01:07:39,840
0,400
So.|
所以。|

1938
01:07:48,170 --> 01:07:50,560
0,305 305,610 780,1480
And so, natively.|
因此，从本质上讲。|

1939
01:07:55,770 --> 01:07:57,740
0,400 870,1270
So the.|
所以。|

1940
01:07:58,260 --> 01:07:59,525
0,245 245,605 605,920 920,1145 1145,1265
Interesting inflection point in the
数据库市场出现了有趣的拐点。哪里?

1941
01:07:59,525 --> 01:08:02,080
0,245 685,1085 1225,1625
database marketplace. Where?|
|

1942
01:08:02,340 --> 01:08:03,710
0,275 275,545 545,845 845,1130 1130,1370
Almost all the, the, the
几乎所有的JSON数据库都说我们不想使用SQL，我们不想使用关系数据模型。他们中的许多人基本上已经汇聚在一起，变得更像是关系。

1943
01:08:03,710 --> 01:08:04,955
0,345 345,810 810,945 945,1110 1110,1245
json databases that said we

1944
01:08:04,955 --> 01:08:05,615
0,120 120,165 165,240 240,375 375,660
don't want to use sql,

1945
01:08:05,615 --> 01:08:05,990
0,75 75,180 180,225 225,285 285,375
we don't want to use

1946
01:08:05,990 --> 01:08:07,580
0,210 210,435 435,740 1120,1410 1410,1590
relational data model. A lot

1947
01:08:07,580 --> 01:08:08,960
0,120 120,210 210,330 330,590 790,1380
of them have basically converged

1948
01:08:08,960 --> 01:08:10,630
0,300 300,570 570,795 795,1220 1270,1670
and become more relational like.|
|

1949
01:08:13,270 --> 01:08:14,130
0,260 260,365 365,470 470,680 680,860
And you can run. You
你就可以跑了。您可以在j上编写SQL。

1950
01:08:14,130 --> 01:08:15,470
0,75 75,240 240,630 630,920 940,1340
can write sql on j.|
|

1951
01:08:16,330 --> 01:08:18,810
0,275 275,550 810,1175 1175,1540 2190,2480
And so over time, what
因此，随着时间的推移，我们看到的是文档数据、SQL数据库和关系数据库之间的智力差异已经缩小。现在，它们基本上都是关系数据库。

1952
01:08:18,810 --> 01:08:19,670
0,255 255,375 375,465 465,585 585,860
we're seeing is that the

1953
01:08:20,050 --> 01:08:22,580
0,400 600,1000 1050,1450 1980,2255 2255,2530
intellectual difference between document data,

1954
01:08:22,660 --> 01:08:24,770
0,335 335,880 930,1190 1190,1460 1460,2110
sql databases, and relational databases

1955
01:08:25,900 --> 01:08:27,720
0,365 365,635 635,970 1380,1640 1640,1820
has, has shrunk. And now

1956
01:08:27,720 --> 01:08:29,420
0,320 615,675 675,795 795,1065 1065,1700
basically they're all relational databases.|
|

1957
01:08:30,340 --> 01:08:31,500
0,470 470,575 575,650 650,800 800,1160
Mongo was the last holdout.
Mongo是最后一个抵抗的人。Mongo在2021年增加了对Sequel的支持，但多年来，因为我们知道创始人们就像，哦，我们永远不会支持Sequel，他们会这样做。

1958
01:08:31,500 --> 01:08:32,700
0,345 345,555 555,780 780,930 930,1200
Mongo added support for sequel

1959
01:08:32,700 --> 01:08:35,370
0,150 150,1160 1510,1910 2260,2535 2535,2670
in 2021 right, but for

1960
01:08:35,370 --> 01:08:36,510
0,260 580,825 825,930 930,1035 1035,1140
years because we know the

1961
01:08:36,510 --> 01:08:37,245
0,285 285,390 390,465 465,585 585,735
founders are like, oh, we're

1962
01:08:37,245 --> 01:08:38,060
0,75 75,165 165,255 255,390 390,815
never going to support sequel,

1963
01:08:38,110 --> 01:08:39,340
0,275 275,550
they do.|
|

1964
01:08:39,840 --> 01:08:41,480
0,290 290,455 455,730
And then get.|
然后就会得到。|

1965
01:08:41,810 --> 01:08:43,840
0,260 260,520 660,935 935,1390
They also support json.|
它们还支持JSON。|

1966
01:08:44,110 --> 01:08:45,890
0,215 215,430 900,1205 1205,1445 1445,1780
So I go to a.|
所以我去了一个。|

1967
01:08:46,680 --> 01:08:48,870
0,240 240,590 670,1070 1330,1695 1695,2190
Document database that is contorting
文档数据库是扭曲的，当你只是数据库时，它看起来像是关系数据库。

1968
01:08:48,870 --> 01:08:49,815
0,105 105,330 330,570 570,735 735,945
and stuff look like relational

1969
01:08:49,815 --> 01:08:51,350
0,285 285,510 510,600 600,845 1135,1535
database when you just database.|
|

1970
01:08:52,120 --> 01:08:53,360
0,380
Post.|
发帖。|

1971
01:08:56,910 --> 01:08:57,980
0,400
Oh.|
噢。|

1972
01:08:58,170 --> 01:08:59,350
0,320 320,395 395,485 485,730 780,1180
They're in the news because
他们出现在新闻中是因为显然聊天英国语是热门话题。所以。

1973
01:08:59,520 --> 01:09:00,665
0,380 380,650 650,905 905,1055 1055,1145
obviously chat gb is the

1974
01:09:00,665 --> 01:09:02,800
0,150 150,455 775,1065 1065,1355 1735,2135
hot thing. And so the.|
|

1975
01:09:04,250 --> 01:09:05,080
0,260 260,410 410,545 545,680 680,830
The way to think about
现在思考这件事的方式就像。

1976
01:09:05,080 --> 01:09:06,180
0,165 165,360 360,495 495,720 720,1100
this now is like the.|
|

1977
01:09:07,170 --> 01:09:08,770
0,350 350,575 575,850 870,1235 1235,1600
In when pure web applications
1015年前，在纯Web应用程序中，一切都是json。因此，我需要一个JSON数据库，新的SQL系统就是这样开始的。现在就像，好的，我有所有这些，这些向量，我从我以前的gbt或者我正在使用的任何东西中恢复过来的。

1978
01:09:09,300 --> 01:09:11,045
0,470 470,710 710,1030 1320,1580 1580,1745
1015 years ago, everything was

1979
01:09:11,045 --> 01:09:13,565
0,210 210,725 2095,2325 2325,2415 2415,2520
always json. Therefore, I need

1980
01:09:13,565 --> 01:09:14,660
0,105 105,420 420,695 715,945 945,1095
a json database and that's

1981
01:09:14,660 --> 01:09:15,425
0,105 105,225 225,345 345,570 570,765
how the new sql systems

1982
01:09:15,425 --> 01:09:17,090
0,210 210,485 895,1200 1200,1425 1425,1665
got started. Now it's like,

1983
01:09:17,090 --> 01:09:17,825
0,255 255,375 375,480 480,600 600,735
OK, well I have all

1984
01:09:17,825 --> 01:09:19,580
0,195 195,515 535,935 1135,1440 1440,1755
this, this, these these vectors

1985
01:09:19,580 --> 01:09:21,740
0,255 255,540 540,890 1060,1460 1930,2160
I'm back from from from

1986
01:09:21,740 --> 01:09:23,360
0,210 210,1140 1140,1305 1305,1470 1470,1620
my formergbt or whatever I'm

1987
01:09:23,360 --> 01:09:24,280
0,230
using.|
|

1988
01:09:24,350 --> 01:09:25,195
0,260 260,395 395,530 530,635 635,845
Store that in a database
把它存储在一个可以原生存储向量的数据库中，所以我可以这样做。

1989
01:09:25,195 --> 01:09:26,580
0,225 225,375 375,765 765,930 930,1385
that can natively store vectors,

1990
01:09:27,320 --> 01:09:28,800
0,230 230,320 320,440 440,700
so I can do.|
|

1991
01:09:30,630 --> 01:09:31,685
0,335 335,545 545,755 755,935 935,1055
And I would argue that
我会争辩说，这些系统。

1992
01:09:31,685 --> 01:09:34,060
0,165 165,455 745,1145
these systems they.|
|

1993
01:09:34,440 --> 01:09:36,530
0,425 425,880 930,1295 1295,1520 1520,2090
They're, they're limited the functionality
它们的功能有限，随着时间的推移，它们基本上将不得不转变为一个验证数据库。所以向量数据模型向量只是一个。

1994
01:09:36,530 --> 01:09:37,390
0,60 60,210 210,450 450,645 645,860
and over time they're basically

1995
01:09:37,740 --> 01:09:38,720
0,245 245,335 335,455 455,605 605,980
going to have to morph

1996
01:09:38,720 --> 01:09:40,595
0,270 270,465 465,720 720,1010 1600,1875
to a validation database. So

1997
01:09:40,595 --> 01:09:42,410
0,150 150,375 375,570 570,875 1465,1815
the vector data model vector

1998
01:09:42,410 --> 01:09:43,860
0,180 180,330 330,620
is just a.|
|

1999
01:09:43,860 --> 01:09:44,900
0,320
Red.|
红色。|

2000
01:09:44,900 --> 01:09:46,660
0,225 225,530 580,980 1090,1425 1425,1760
That and in in this
在这种情况下，它是一个一维的浮点数数组。

2001
01:09:46,890 --> 01:09:49,025
0,320 320,515 515,790 1620,1925 1925,2135
approach here with case, it's

2002
01:09:49,025 --> 01:09:50,110
0,75 75,225 225,585 585,765 765,1085
a one dimensional array of

2003
01:09:50,340 --> 01:09:51,940
0,380 380,515 515,790
floating point numbers.|
|

2004
01:09:52,270 --> 01:09:54,760
0,400 990,1295 1295,1565 1565,1930
And the system going.|
整个系统都在运转。|

2005
01:09:55,860 --> 01:09:57,310
0,335 335,575 575,845 845,1130 1130,1450
Neighbor search either exact or
邻居搜索可以是精确搜索，也可以是近似搜索，让您可以对数据进行语义搜索。所以在我之前展示的所有早期数据中，AI等于2，AI等于1，0，无论是什么精确匹配。

2006
01:09:57,420 --> 01:09:58,865
0,640 810,1070 1070,1205 1205,1325 1325,1445
approximate to allow you to

2007
01:09:58,865 --> 01:10:00,250
0,435 435,675 675,930 930,1110 1110,1385
semantic search over your data.

2008
01:10:00,870 --> 01:10:01,805
0,230 230,290 290,410 410,590 590,935
So in all my predates

2009
01:10:01,805 --> 01:10:02,660
0,120 120,255 255,465 465,735 735,855
I showed before, it's like

2010
01:10:02,825 --> 01:10:04,895
0,270 270,570 570,795 1405,1800 1800,2070
AI equals two, AI equals

2011
01:10:04,895 --> 01:10:05,990
0,135 135,255 255,435 435,755 775,1095
one, o two whatever the

2012
01:10:05,990 --> 01:10:07,380
0,225 225,530
exact matches.|
|

2013
01:10:08,500 --> 01:10:09,840
0,275 275,470 470,905 905,1145 1145,1340
But these vectors allow you
但这些向量允许您以某种方式神奇地通过、通过、通过转换器嵌入数据实际外观的更深层次含义。所以你可以问更高层次的问题，比如，嘿，给我看看，你知道的，给我看看与你展示的东西相关的东西。

2014
01:10:09,840 --> 01:10:12,360
0,290 700,1100 1210,1610 1630,2250 2250,2520
to embed somehow magically through,

2015
01:10:12,360 --> 01:10:15,300
0,380 580,960 960,1490 2410,2700 2700,2940
through, through transformers, a deeper

2016
01:10:15,300 --> 01:10:16,275
0,285 285,480 480,630 630,765 765,975
meaning of what your data

2017
01:10:16,275 --> 01:10:17,235
0,255 255,465 465,735 735,900 900,960
actually looks like. So you

2018
01:10:17,235 --> 01:10:18,315
0,105 105,330 330,600 600,810 810,1080
can ask higher level questions

2019
01:10:18,315 --> 01:10:19,980
0,365 445,845 955,1230 1230,1470 1470,1665
like, hey, show me, you

2020
01:10:19,980 --> 01:10:21,165
0,230 370,615 615,720 720,930 930,1185
know, show me things related

2021
01:10:21,165 --> 01:10:23,700
0,180 180,455 1225,1530 1530,1835
to this you show.|
|

2022
01:10:27,710 --> 01:10:28,780
0,230 230,320 320,515 515,770 770,1070
Instead of doing exact matches
而不是做键盘的精确匹配，CMU我会，我会，我可以学习这样的东西，哦。

2023
01:10:28,780 --> 01:10:30,460
0,225 225,330 330,615 615,1130 1420,1680
for the keyboard, cmu I

2024
01:10:30,460 --> 01:10:31,390
0,225 225,435 435,600 600,780 780,930
would I would, I can

2025
01:10:31,390 --> 01:10:33,540
0,210 210,435 435,740 820,1220
learn things like, oh.|
|

2026
01:10:34,680 --> 01:10:36,125
0,320 320,500 500,740 740,1120 1140,1445
Talk about a university in
谈谈匹兹堡的一所大学，它是By的粉丝。

2027
01:10:36,125 --> 01:10:38,315
0,225 225,875 1615,1875 1875,2025 2025,2190
in Pittsburgh that was fan

2028
01:10:38,315 --> 01:10:39,420
0,120 120,365
of by.|
|

2029
01:10:40,320 --> 01:10:42,215
0,400 750,1025 1025,1205 1205,1505 1505,1895
Like you can learn things
就像你可以了解数据中隐含的东西，而不是进行精确的查找。

2030
01:10:42,215 --> 01:10:44,300
0,395 1195,1455 1455,1545 1545,1965 1965,2085
about that are implicit in

2031
01:10:44,300 --> 01:10:45,590
0,135 135,410 640,900 900,1035 1035,1290
the data rather than doing

2032
01:10:45,590 --> 01:10:46,960
0,285 285,680
exact lookup.|
|

2033
01:10:47,160 --> 01:10:48,300
0,400
Yes.|
是。|

2034
01:10:51,360 --> 01:10:52,400
0,260 260,425 425,590 590,845 845,1040
The question is what's interesting,
问题是什么是有趣的，图形数据库和矢量数据库，让我们把它离线。这是不同的，但是向量从字面上来说只是一个一维的数组。图形数据库存储边和节点等对象与来自的对象之间的关系。

2035
01:10:52,400 --> 01:10:54,010
0,195 195,645 645,840 840,1065 1065,1610
graph databases and vector databases,

2036
01:10:54,090 --> 01:10:55,120
0,335 335,440 440,560 560,650 650,1030
let's take that one offline.

2037
01:10:55,200 --> 01:10:57,470
0,335 335,580 660,1060 1650,2075 2075,2270
That's different, but vectors literally

2038
01:10:57,470 --> 01:10:59,180
0,240 240,480 480,800 1060,1440 1440,1710
just a one like one

2039
01:10:59,180 --> 01:11:01,235
0,375 375,830 1180,1500 1500,1965 1965,2055
dimensional arrays. Graph databases are

2040
01:11:01,235 --> 01:11:02,555
0,180 180,360 360,665 715,1080 1080,1320
storing the relationship between objects

2041
01:11:02,555 --> 01:11:03,560
0,135 135,450 450,585 585,885 885,1005
like edges and nodes and

2042
01:11:03,560 --> 01:11:06,065
0,120 120,255 255,1460 1480,1880 2200,2505
things like that one from

2043
01:11:06,065 --> 01:11:06,480
0,305
the.|
|

2044
01:11:06,700 --> 01:11:08,220
0,195 195,435 435,720 720,1170 1170,1520
It sounds like it's similar.|
听起来很像。|

2045
01:11:09,580 --> 01:11:10,395
0,290 290,410 410,545 545,650 650,815
Minutes. If you're looking at
几分钟。如果你从当前节点看一个度数，它听起来很相似，但是。

2046
01:11:10,395 --> 01:11:11,250
0,195 195,390 390,525 525,660 660,855
one degree from the current

2047
01:11:11,250 --> 01:11:12,060
0,300 300,390 390,510 510,615 615,810
node, it sounds like it's

2048
01:11:12,060 --> 01:11:14,620
0,260 580,980
similar, but.|
|

2049
01:11:15,010 --> 01:11:16,845
0,260 260,410 410,700 1500,1745 1745,1835
But like the how to
但就像怎么说这个一样。

2050
01:11:16,845 --> 01:11:18,060
0,105 105,365
say this.|
|

2051
01:11:18,130 --> 01:11:19,635
0,245 245,365 365,560 560,880 1080,1505
In a graph database, you're
在图形数据库中，您显式地存储该结构，并遍历它以找到您正在寻找的东西。这就像我把它编码成一个向量，而我不知道这个向量实际上代表了什么。

2052
01:11:19,635 --> 01:11:22,680
0,405 405,755 1165,1565 1855,2255 2755,3045
explicitly storing that structure and

2053
01:11:22,680 --> 01:11:23,760
0,225 225,630 630,720 720,870 870,1080
you're traversing it to find

2054
01:11:23,760 --> 01:11:24,710
0,195 195,315 315,465 465,615 615,950
things that you're looking for.

2055
01:11:24,910 --> 01:11:26,475
0,275 275,425 425,700 930,1250 1250,1565
This is like I'm encoding

2056
01:11:26,475 --> 01:11:27,285
0,75 75,195 195,360 360,615 615,810
it as a vector and

2057
01:11:27,285 --> 01:11:28,035
0,105 105,285 285,420 420,600 600,750
I don't know what the

2058
01:11:28,035 --> 01:11:30,040
0,210 210,435 435,755 805,1565
vector is actually representing.|
|

2059
01:11:32,430 --> 01:11:34,640
0,400 450,755 755,1180 1380,1780 1950,2210
So pine cones, one a
所以松果，一个是一串。

2060
01:11:34,640 --> 01:11:36,020
0,135 135,410
bunch of.|
|

2061
01:11:39,210 --> 01:11:39,890
0,245 245,335 335,440 440,545 545,680
Gave a talk with us
两年前给我们做了一次演讲。

2062
01:11:39,890 --> 01:11:41,180
0,150 150,300 300,590
two years ago.|
|

2063
01:11:47,260 --> 01:11:48,205
0,180 180,285 285,510 510,795 795,945
In two weeks, so if
两周后，所以如果你想更多地了解这一点，请查看。

2064
01:11:48,205 --> 01:11:48,595
0,75 75,135 135,195 195,285 285,390
you want to learn more

2065
01:11:48,595 --> 01:11:49,680
0,90 90,335 535,780 780,855 855,1085
about this, check it out.|
|

2066
01:11:50,430 --> 01:11:51,680
0,290 290,515 515,815 815,1085 1085,1250
At their core, all these
在它们的核心，所有这些矢量数据库将只是一个。

2067
01:11:51,680 --> 01:11:52,820
0,195 195,645 645,810 810,1005 1005,1140
vector databases are just going

2068
01:11:52,820 --> 01:11:54,360
0,90 90,330 330,710
to be a.|
|

2069
01:11:54,710 --> 01:11:55,645
0,290 290,440 440,590 590,740 740,935
Index, a lot to do,
索引，很多事情要做，最近的邻居搜索。

2070
01:11:55,645 --> 01:11:57,020
0,255 255,495 495,815
nearest neighbor search.|
|

2071
01:11:58,390 --> 01:11:59,790
0,350 350,700 990,1220 1220,1295 1295,1400
Right, so sort of looks
对，所以看起来就像这样。

2072
01:11:59,790 --> 01:12:00,980
0,120 120,380
like this.|
|

2073
01:12:26,580 --> 01:12:28,750
0,350 350,700 1290,1640 1640,1880 1880,2170
Interpret these things right. It
正确地解释这些事情。它计算出了永远不会结束的需求。我们不知道这是什么。

2074
01:12:28,950 --> 01:12:31,085
0,400 1020,1280 1280,1505 1505,1870 1890,2135
numbers the need never it

2075
01:12:31,085 --> 01:12:31,685
0,150 150,300 300,420 420,495 495,600
out. We don't know what

2076
01:12:31,685 --> 01:12:32,680
0,90 90,335
it is.|
|

2077
01:13:14,210 --> 01:13:15,810
0,400 690,965 965,1115 1115,1295 1295,1600
As my rank order list.|
作为我的排名表。|

2078
01:13:18,070 --> 01:13:19,180
0,135 135,315 315,620 730,975 975,1110
That's the core at a
这是矢量设备在超高水平上所做的核心。

2079
01:13:19,180 --> 01:13:20,050
0,180 180,345 345,510 510,690 690,870
super high level of what

2080
01:13:20,050 --> 01:13:21,090
0,165 165,405 405,615 615,765 765,1040
a vector device is doing.|
|

2081
01:13:27,710 --> 01:13:28,645
0,290 290,455 455,620 620,815 815,935
Question. Is this similar to
问题来了。这类似于关系演算吗？这是什么意思？

2082
01:13:28,645 --> 01:13:30,115
0,210 210,660 660,870 870,1145 1165,1470
relational calculus? What is what

2083
01:13:30,115 --> 01:13:31,300
0,150 150,240 240,485
part of this?|
|

2084
01:13:31,420 --> 01:13:33,120
0,400
Well.|
井。|

2085
01:13:58,510 --> 01:14:00,040
0,400 420,820
Or we.|
或者是我们。|

2086
01:14:16,930 --> 01:14:18,500
0,365 365,500 500,665 665,940 1170,1570
I'm just trying to them.|
我只是在试着让他们。|

2087
01:14:19,590 --> 01:14:21,000
0,350 350,590 590,880
They care about.|
他们关心的是。|

2088
01:14:27,170 --> 01:14:29,880
0,245 245,365 365,560 560,880
So I would argue.|
所以我会争辩说。|

2089
01:14:30,220 --> 01:14:32,385
0,290 290,580 900,1300 1590,1925 1925,2165
The core these are is
这些问题的核心就在于此。

2090
01:14:32,385 --> 01:14:33,520
0,240 240,575
just this.|
|

2091
01:14:52,740 --> 01:14:53,980
0,400
No.|
不是的。|

2092
01:14:53,990 --> 01:14:55,315
0,320 320,500 500,635 635,910 1080,1325
Right, you can do a
对，你可以做一堆数据库。他们都加了这个。

2093
01:14:55,315 --> 01:14:56,425
0,90 90,315 315,795 795,915 915,1110
bunch of databases. They all

2094
01:14:56,425 --> 01:14:57,700
0,255 255,575
added this.|
|

2095
01:14:57,770 --> 01:14:59,905
0,380 380,755 755,1000 1470,1820 1820,2135
Has pg better single store
有PG更好的单店点击店。

2096
01:14:59,905 --> 01:15:02,040
0,485
clickhouse.|
|

2097
01:15:03,660 --> 01:15:06,900
0,400 540,940 1590,1990 2070,2470
Beyond all for now.|
就目前而言，这是最重要的。|

2098
01:15:07,940 --> 01:15:09,000
0,400
Okay.|
好吧。|

2099
01:15:09,810 --> 01:15:10,580
0,230 230,320 320,410 410,455 455,770
I just want to expose
我只是想暴露给你看。

2100
01:15:10,580 --> 01:15:12,640
0,210 210,330 330,510 510,800
to you to see.|
|

2101
01:15:13,600 --> 01:15:16,260
0,575 575,680 680,1240 2340,2585 2585,2660
Databases are ubiquitous is going
数据库是无处不在的，要找到原语。

2102
01:15:16,260 --> 01:15:17,740
0,90 90,270 270,465 465,920
to find the primitive.|
|

2103
01:15:18,830 --> 01:15:21,175
0,335 335,670 1500,1790 1790,2015 2015,2345
Database system and then relational
数据库系统则是关系算法的核心。

2104
01:15:21,175 --> 01:15:22,105
0,330 330,405 405,525 525,690 690,930
algabra will be the the

2105
01:15:22,105 --> 01:15:23,480
0,335
core.|
|

2106
01:15:24,100 --> 01:15:25,815
0,275 275,485 485,1000 1290,1550 1550,1715
Do these interactions and then
进行这些交互，然后就定义了我们希望如何构建系统组件来运行查询。所以周三的课将在c上，零项目已经取消了。请现在就开始。11号要交作业，然后家庭作业一就出来了。

2107
01:15:25,815 --> 01:15:27,000
0,390 390,630 630,870 870,1065 1065,1185
that'll define how we want

2108
01:15:27,000 --> 01:15:28,005
0,105 105,360 360,660 660,885 885,1005
to build the component of

2109
01:15:28,005 --> 01:15:29,505
0,105 105,395 685,1035 1035,1305 1305,1500
our system to, to, to

2110
01:15:29,505 --> 01:15:32,640
0,180 180,665 2185,2460 2460,2910 2910,3135
run queries. So wednesday's class

2111
01:15:32,640 --> 01:15:34,340
0,210 210,435 435,800 1060,1380 1380,1700
will be on on c,

2112
01:15:34,720 --> 01:15:36,720
0,380 380,710 710,935 935,1210 1680,2000
project zero is out. Please

2113
01:15:36,720 --> 01:15:37,635
0,195 195,330 330,525 525,795 795,915
start it now. It's due

2114
01:15:37,635 --> 01:15:39,495
0,165 165,695 1255,1515 1515,1635 1635,1860
the eleventh and then homework

2115
01:15:39,495 --> 01:15:40,700
0,240 240,360 360,450 450,695
one will be out.|
|

2116
01:15:42,340 --> 01:16:01,800
0,275 275,550 18630,18995 18995,19115 19115,19460
Hit it I'm the poppy
打它，我是罂粟花，他妈的钩子28克，这取决于它是不是煮熟了你还没有打到暴徒还没有闭上你的嘴我用夹子的底部打你告诉你抬头告诉我它是什么我把你的脸打回去我用水龙头挡住了我无法追踪到ST风格就像大便你不能在多米尼加人那里系花边或者你们叫我多米尼加黑色狡猾的黑色皮革黑色软木我整个黑色肮脏的8号把你送到你想要的每一扇门滑冰，这是你的第一个错误，我为你量体重，我有体重，当我如何生活时，我跑了网错误。

2117
01:16:01,800 --> 01:16:03,900
0,150 150,315 315,915 915,1280 1570,2100
with the motherfuck hook 28

2118
01:16:03,900 --> 01:16:05,265
0,210 210,560 610,960 960,1200 1200,1365
a gram depending on if

2119
01:16:05,265 --> 01:16:06,525
0,210 210,405 405,665 775,1035 1035,1260
it's cooked up you ain't

2120
01:16:06,525 --> 01:16:07,755
0,105 105,240 240,450 450,785 925,1230
hit the mob yet still

2121
01:16:07,755 --> 01:16:08,835
0,195 195,375 375,555 555,795 795,1080
got your shut up I

2122
01:16:08,835 --> 01:16:09,735
0,255 255,390 390,510 510,660 660,900
smack you with the bottom

2123
01:16:09,735 --> 01:16:10,635
0,210 210,375 375,600 600,750 750,900
of the clip to tell

2124
01:16:10,635 --> 01:16:11,865
0,195 195,390 390,665 805,1080 1080,1230
you look up show me

2125
01:16:11,865 --> 01:16:12,810
0,120 120,255 255,465 465,735 735,945
what it sa at for

2126
01:16:12,810 --> 01:16:13,935
0,165 165,345 345,540 540,810 810,1125
I blow your face back

2127
01:16:13,935 --> 01:16:14,940
0,240 240,375 375,540 540,765 765,1005
I got a block on

2128
01:16:14,940 --> 01:16:16,350
0,300 300,540 540,795 795,1200 1200,1410
taps the ve can't trace

2129
01:16:16,350 --> 01:16:17,415
0,290 340,555 555,660 660,825 825,1065
that St style is like

2130
01:16:17,415 --> 01:16:18,795
0,315 315,570 570,840 840,1080 1080,1380
t for poop you can't

2131
01:16:18,795 --> 01:16:20,235
0,195 195,360 360,525 525,675 675,1440
lace that at the Dominican

2132
01:16:20,235 --> 01:16:21,315
0,255 255,420 420,675 675,930 930,1080
or you guys call me

2133
01:16:21,315 --> 01:16:23,505
0,735 735,1080 1080,1515 1515,1785 1785,2190
Dominican black sclly black leather

2134
01:16:23,505 --> 01:16:25,095
0,285 285,630 630,1140 1140,1335 1335,1590
black sued timberins my whole

2135
01:16:25,095 --> 01:16:26,355
0,330 330,630 630,855 855,1065 1065,1260
black dirty eight to send

2136
01:16:26,355 --> 01:16:27,440
0,165 165,300 300,450 450,720 720,1085
you to the per gates

2137
01:16:27,580 --> 01:16:28,800
0,275 275,410 410,905 905,1055 1055,1220
you get youravat trying to

2138
01:16:28,800 --> 01:16:29,745
0,210 210,360 360,555 555,675 675,945
skate and that's your first

2139
01:16:29,745 --> 01:16:31,305
0,395 595,900 900,1080 1080,1335 1335,1560
mistake I in line for

2140
01:16:31,305 --> 01:16:33,290
0,150 150,455 925,1200 1200,1475 1585,1985
I take you weight my

2141
01:16:33,400 --> 01:16:34,545
0,335 335,590 590,785 785,980 980,1145
have weight the ran the

2142
01:16:34,545 --> 01:16:36,350
0,210 210,575 625,1025 1165,1440 1440,1805
web mistake when how I'm

2143
01:16:36,820 --> 01:16:41,580
0,290 290,580
I living.|
|

